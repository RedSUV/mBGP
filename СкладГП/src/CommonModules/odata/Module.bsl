Функция ЗаписатьВСтрокуJSON(Данные) Экспорт
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку(Новый ПараметрыЗаписиJSON);
	НастройкиСериализации = Новый НастройкиСериализацииJSON();
	НастройкиСериализации.СериализовыватьМассивыКакОбъекты = ЛОЖЬ;
	
	ЗаписатьJSON(Запись, Данные, НастройкиСериализации,);
	ТелоСтроки = Запись.Закрыть();
	
	Возврат ТелоСтроки;
КонецФункции

Функция ПрочитатьДанныеJSONизСтроки(СтрокаДанных, ПрочитатьвСоотвествии = ЛОЖЬ, ИменаТипаДата = "") Экспорт
	Чтение = Новый ЧтениеJSON;   
	Если Не ЗначениеЗаполнено(СтрокаДанных) Тогда Возврат НЕОПРЕДЕЛЕНО КонецЕсли;
	Чтение.УстановитьСтроку(СтрокаДанных);
	
	Ответ = ПрочитатьJSON(Чтение, ПрочитатьвСоотвествии, ИменаТипаДата,);
	Чтение.Закрыть();
	Возврат Ответ;
КонецФункции

Функция ТекстЗапросаЗаписиВРегистрСведений(ИмяРегистра, ДанныеПартии) Экспорт
	НаборЗаписей = Новый Массив;
	Для Каждого Стр из ДанныеПартии Цикл
		СтруктураЗаписи = Новый Структура;
		Для Каждого м из стр Цикл
			Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(м.Значение))
				или ТипЗнч(м.Значение) = Тип("УникальныйИдентификатор") Тогда
				СтруктураЗаписи.Вставить(""+м.Ключ+"_Key",XMLСтрока(м.Значение));
			ИначеЕсли ТипЗнч(м.Значение) = Тип("ХранилищеЗначения") Тогда
				СтруктураЗаписи.Вставить(""+м.Ключ+"_Base64Data",XMLСтрока(м.Значение));
				СтруктураЗаписи.Вставить(""+м.Ключ+"_Type", "application/octet-stream");
			Иначе
				СтруктураЗаписи.Вставить(""+м.Ключ+"",XMLСтрока(м.Значение));
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Добавить(СтруктураЗаписи);
	КонецЦикла;
	Возврат ЗаписатьВСтрокуJSON(НаборЗаписей)	

КонецФункции

Функция ДанныеЗаписиРегистраСостоянияЗаявки(Заявка) Экспорт 
	Если ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ().ЭтоERP Тогда 
		Ответ = http.get("/hs/ma_bgp/doc_time?id="+XMLСтрока(Заявка));
		Если Ответ.КодСостояния = 200 Тогда
			Возврат  ПрочитатьДанныеJSONизСтроки(Ответ.ПолучитьТелоКакСтроку(), ИСТИНА, "РегистрацияАвто_Дата,Отгружено_Дата,Оформлено_Дата,ДокументыСданы,ВызовНаПогрузку");
		Иначе
			Возврат НЕОПРЕДЕЛЕНО
		КонецЕсли;
	Иначе
		Попытка
			Ответ = http.get("/odata/standard.odata/InformationRegister_ЗаявкиНаПогрузку(Заявка_Key=guid'"+XMLСтрока(Заявка)+"')?$format=json");
		Исключение
			Возврат НЕОПРЕДЕЛЕНО
		КонецПопытки;
		
		Если Ответ.КодСостояния = 200 Тогда
			Возврат  ПрочитатьДанныеJSONизСтроки(Ответ.ПолучитьТелоКакСтроку(), ИСТИНА, "РегистрацияАвто_Дата,Отгружено_Дата,Оформлено_Дата,ДокументыСданы,ВызовНаПогрузку");
		Иначе
			Возврат НЕОПРЕДЕЛЕНО
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ИзменитьЗаписьРегистраСостоянияЗаявки(Заявка, НовыеДанные) Экспорт 
	Если ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ().ЭтоERP Тогда 
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку(Новый ПараметрыЗаписиJSON);
		ЗаписатьJSON(Запись,НовыеДанные);
		Ответ = http.post("/hs/ma_bgp/doc_time", Запись.Закрыть());
	Иначе
		ДанныеАвторизации = http_ПовтИсп.ДанныеАвторизации();
		Соединение = http.СоединениеПУ(http.СвойстваСоединения(ДанныеАвторизации));
		АдресЗапроса = "/odata/standard.odata/InformationRegister_ЗаявкиНаПогрузку(Заявка_Key=guid'"+XMLСтрока(Заявка)+"')?$format=json";
		Запрос = http.НовыйЗапросПУ(АдресЗапроса, ДанныеАвторизации.Логин);
		ТекстЗапроса = odata.ЗаписатьВСтрокуJSON(НовыеДанные);
		Запрос.УстановитьТелоИзСтроки(ТекстЗапроса);
		Ответ = Соединение.ВызватьHTTPМетод("PATCH", Запрос);
	КонецЕсли;
	Возврат  Ответ.КодСостояния = 200;
КонецФункции


