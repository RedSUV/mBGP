Процедура ЗаполнитьОбновитьПреопределенныйНастройки() Экспорт
	УстановитьПривилегированныйРежим(ИСТИНА);
	//Базы
	ЛДК = Справочники.БазыПУ.ЛДК.ПолучитьОбъект();
	ЛДК.Наименование = "ПУ ЛДК №2";
	ЛДК.Адрес = "ldk2ss.volwood.ru:6080/pu_ldk2/";
	ЛДК.АдресДляPing = "ldk2ss.volwood.ru:6080/ping.htm";
	//ЛДК.АдресДляPing = "ldk2ss.volwood.ru:6080/ping1.htm"; //Для теста оффлайн
	ЛДК.ЛогинСлужебный = "http_service";
	ЛДК.ПарольСлужебный = "475000";
	ЛДК.https = ЛОЖЬ;
	ЛДК.УзелПланаОбмена = МобильноеПриложениеСкладПУ.ПолучитьСоздатьУзелПланаОбменаПУ(Справочники.БазыПУ.ЛДК);
	ЛДК.Записать();
	
	ХЛП = Справочники.БазыПУ.ХЛП.ПолучитьОбъект();
	ХЛП.Наименование = "ПУ ХЛП";
	ХЛП.Адрес = "hlpss.volwood.ru:6080/pu_hlp/";
	ХЛП.АдресДляPing = "hlpss.volwood.ru:6080/ping.htm";
	//ХЛП.АдресДляPing = "hlpsrv1c"; //Для теста лок
	ХЛП.ЛогинСлужебный = "http_service";
	ХЛП.ПарольСлужебный = "http_service475000";
	ХЛП.https = ЛОЖЬ;
	ХЛП.УзелПланаОбмена = МобильноеПриложениеСкладПУ.ПолучитьСоздатьУзелПланаОбменаПУ(Справочники.БазыПУ.ХЛП);
	ХЛП.Записать();
	
    Свирь = Справочники.БазыПУ.Свирь.ПолучитьОбъект();
	Свирь.Наименование = "ПУ Свирь";
	Свирь.Адрес = "hq.volwood.ru/erp_tp/";
	Свирь.АдресДляPing = "hq.volwood.ru/mbgp/ping.htm";
	Свирь.ЛогинСлужебный = "http_service";
	Свирь.ПарольСлужебный = "http_service475000";
	Свирь.https = ИСТИНА;
	Свирь.УзелПланаОбмена = МобильноеПриложениеСкладПУ.ПолучитьСоздатьУзелПланаОбменаПУ(Справочники.БазыПУ.Свирь);
	Свирь.ЭтоERP = Истина;  
	Свирь.Записать();
	
	//Склады
	СкладПересортировкиЛДК2		 = НайтиСоздатьСклад(Справочники.БазыПУ.ЛДК,	 "ПересортировкаКарман", "Склад пересортировки",,ЛОЖЬ);
	СкладГотовойПродукцииЛДК2	 = НайтиСоздатьСклад(Справочники.БазыПУ.ЛДК,	 "СкладГотовойПродукции", "Склад готовой продукции ЛДК2", СкладПересортировкиЛДК2, ИСТИНА);
	СкладПересортировкиХЛП		 = НайтиСоздатьСклад(Справочники.БазыПУ.ХЛП,	 "ПересортировкаКарман", "Склад пересортировки",,ЛОЖЬ);
	СкладГотовойПродукцииХЛП	 = НайтиСоздатьСклад(Справочники.БазыПУ.ХЛП,	 "СкладГотовойПродукции", "Склад готовой продукции ХЛП", СкладПересортировкиХЛП, ИСТИНА);
	СкладПересортировкиСвирь	 = НайтиСоздатьСклад(Справочники.БазыПУ.Свирь,	 "81d4ffdd-3dbc-11ef-ba86-0002c9098f81", "Склад пересортировки п/м Свирь",,ЛОЖЬ);
	СкладГотовойПродукцииСвирь	 = НайтиСоздатьСклад(Справочники.БазыПУ.Свирь,	 "765678ab-0aa1-11ef-b442-3cecef0d4d17", "Склад готовой продукции Свирь", СкладПересортировкиСвирь,ИСТИНА);

	МобильноеПриложениеСкладПУ.ПроверитьНастроитьПланОбмена();
	
	Если Константы.ШаблонПредставленияПакета.Получить() = "" Тогда
		Константы.ШаблонПредставленияПакета.Установить(
		"
		|[Сечение] [Сорт]");
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиСоздатьСклад(База, ИмяПредопределенного, Наименование, ВспомогательныйСклад = "", ОтображатьПриАвторизации = ИСТИНА)
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	Выборка = Справочники.Склады.Выбрать( , База, Новый Структура("ИмяПредопределенногоПУ", ИмяПредопределенного));
	Если Выборка.Следующий() Тогда
		Спр = Выборка.ПолучитьОбъект();
		Спр.Владелец = База;
	Иначе
		Спр = Справочники.Склады.СоздатьЭлемент();
		Спр.Владелец = База;
	КонецЕсли;
	Спр.ИмяПредопределенногоПУ = ИмяПредопределенного;
	Спр.ВспомогательныйСклад = ВспомогательныйСклад;
	Спр.ОтображатьПриАвторизации = ОтображатьПриАвторизации;
	Спр.Наименование = Наименование;
	Спр.ПометкаУдаления = ЛОЖЬ;
	Спр.Записать();
	Возврат Спр.Ссылка;
КонецФункции

Процедура ОбновитьЯчейкиСклада() Экспорт
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	СтруктураЗапроса = УКО.НоваяСтруктураПроизвольногоЗапроса();
	МассивСкладов = ОбщегоНазначенияВызовСервераПовтИсп.МассивСкладовПУ();
	СтруктураЗапроса.ПараметрыЗапроса.Вставить("МассивСкладов", МассивСкладов);
	
	Если ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ().ЭтоERP Тогда
		СтруктураЗапроса.ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(СкладскиеЯчейки.Ссылка) КАК Ссылка,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(СкладскиеЯчейки.Владелец) КАК СкладИмяПредопределенныхДанных,
		|	СкладскиеЯчейки.ЭтоГруппа КАК ЭтоГруппа,
		|	СкладскиеЯчейки.ПометкаУдаления КАК ПометкаУдаления,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(СкладскиеЯчейки.Родитель) КАК Родитель,
		|	СкладскиеЯчейки.Наименование КАК Наименование,
		|	СкладскиеЯчейки.Позиция КАК НомерВСекторе,
		|	СкладскиеЯчейки.pu_АдресЯчейки КАК АдресКартыСклада,
		|	ЛОЖЬ КАК СсылкаЗапретОтгрузки,
		|	ЛОЖЬ КАК СсылкаЗапретПополнения,
		|	ЛОЖЬ КАК ЭтоЯчейкаОТК,
		|	50 КАК МаксимумРядов,
		|	НЕОПРЕДЕЛЕНО КАК ВидШтабеля,
		|	ЛОЖЬ КАК Двухсторонний,
		|	ПРЕДСТАВЛЕНИЕ(СкладскиеЯчейки.ВерсияДанных) КАК ВерсияДанных
		|ИЗ
		|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
		|ГДЕ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(СкладскиеЯчейки.Владелец) В (&МассивСкладов)
		|УПОРЯДОЧИТЬ ПО
		|	СкладскиеЯчейки.Родитель";
	Иначе
		СтруктураЗапроса.ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(VLP_СтруктураХраненияСклада.Ссылка) КАК Ссылка,
		|	VLP_СтруктураХраненияСклада.Владелец.ИмяПредопределенныхДанных КАК СкладИмяПредопределенныхДанных,
		|	VLP_СтруктураХраненияСклада.ЭтоГруппа КАК ЭтоГруппа,
		|	VLP_СтруктураХраненияСклада.ПометкаУдаления КАК ПометкаУдаления,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(VLP_СтруктураХраненияСклада.Родитель) КАК Родитель,
		|	VLP_СтруктураХраненияСклада.Наименование КАК Наименование,
		|	VLP_СтруктураХраненияСклада.НомерВСекторе КАК НомерВСекторе,
		|	VLP_СтруктураХраненияСклада.АдресКартыСклада КАК АдресКартыСклада,
		|	VLP_СтруктураХраненияСклада.ЗапретОтгрузки КАК СсылкаЗапретОтгрузки,
		|	VLP_СтруктураХраненияСклада.ЗапретПополнения КАК СсылкаЗапретПополнения,
		|	VLP_СтруктураХраненияСклада.ЭтоЯчейкаОТК КАК ЭтоЯчейкаОТК,
		|	VLP_СтруктураХраненияСклада.МаксимумРядов КАК МаксимумРядов,
		|	VLP_СтруктураХраненияСклада.ВидШтабеля КАК ВидШтабеля,
		|	VLP_СтруктураХраненияСклада.Двухсторонний КАК Двухсторонний,
		|	ПРЕДСТАВЛЕНИЕ(Склады.ВерсияДанных) КАК ВерсияДанных
		|ИЗ
		|	Справочник.Склады КАК Склады
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.VLP_СтруктураХраненияСклада КАК VLP_СтруктураХраненияСклада
		|		ПО (Склады.Ссылка = VLP_СтруктураХраненияСклада.Владелец)
		|ГДЕ
		|	Склады.ИмяПредопределенныхДанных В (&МассивСкладов)
		|	И НЕ VLP_СтруктураХраненияСклада.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	VLP_СтруктураХраненияСклада.Родитель";
	КонецЕсли;
	
	Менеджер = Справочники.Ячейки;
	Попытка
		ДанныеПУ = УКО.ПолучитьДанныеПроизвольногоЗапроса(СтруктураЗапроса);
		
		Для Каждого стр из ДанныеПУ Цикл
			СоздатьОбновитьЭлементЯчейки(Стр, Менеджер);
		КонецЦикла;
		ЗаписьИстории("СлужебныйОбновление.ОбновитьЯчейкиСклада", "Успех");
	Исключение
		ЗаписьИстории("СлужебныйОбновление.ОбновитьЯчейкиСклада", "Ошибка"+ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Функция СоздатьОбновитьЭлементЯчейки(СтрТаб, Менеджер) Экспорт
	
	Cтр = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрТаб); 
	ЯчейкаСсылка = Менеджер.ПолучитьСсылку(Cтр.Ссылка); 
	ТекДанныеЯчейки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЯчейкаСсылка, "ВерсияДанных,ВерсияПУ,Склад");
	СкладЯчейки = ОбщегоНазначенияВызовСервераПовтИсп.СкладПоИдентификатору(Строка(СтрТаб.СкладИмяПредопределенныхДанных));
	Если ЗначениеЗаполнено(ТекДанныеЯчейки.ВерсияДанных) Тогда
		Если Cтр.Свойство("ВерсияДанных") и ТекДанныеЯчейки.ВерсияПУ = СтрТаб.ВерсияДанных и ТекДанныеЯчейки.Склад = СкладЯчейки Тогда
			Возврат ЯчейкаСсылка;
		КонецЕсли;
		Ячейка = ЯчейкаСсылка.ПолучитьОбъект();	
		Если Cтр.Свойство("ВерсияДанных") Тогда
			Ячейка.ВерсияПУ = СтрТаб.ВерсияДанных; 
		КонецЕсли;
	Иначе
		Если Cтр.Свойство("ЭтоГруппа") и Cтр.ЭтоГруппа Тогда
			Ячейка = Менеджер.СоздатьГруппу();
		Иначе
			Ячейка = Менеджер.СоздатьЭлемент();
		КонецЕсли;
		Ячейка.УстановитьСсылкуНового(ЯчейкаСсылка);
	КонецЕсли;
	Ячейка.Владелец = ОбщегоНазначенияВызовСервераПовтИсп.Склад();
	Ячейка.Склад = СкладЯчейки; 
	Если ЗначениеЗаполнено(Cтр.Родитель) Тогда
		Ячейка.Родитель = Менеджер.ПолучитьСсылку(Cтр.Родитель); 
		Если ЗначениеЗаполнено(Ячейка.Родитель) Тогда
			Если Ячейка.Родитель.ПометкаУдаления Тогда
				Ячейка.Родитель.ПолучитьОбъект().УстановитПометкуУдаления(ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Ячейка.Наименование = Cтр.Наименование;
	Ячейка.ПометкаУдаления = Cтр.ПометкаУдаления;
	Ячейка.АдресКартыСклада = Cтр.АдресКартыСклада;
	Ячейка.НомерВСекторе = Cтр.НомерВСекторе;
	Если Не Cтр.ЭтоГруппа Тогда
		Если Cтр.Свойство("СсылкаЗапретОтгрузки") Тогда
			Ячейка.ЗапретОтгрузки = Cтр.СсылкаЗапретОтгрузки;
		КонецЕсли;
		Если Cтр.Свойство("СсылкаЗапретПополнения") Тогда
			Ячейка.ЗапретПополнения = Cтр.СсылкаЗапретПополнения;
		КонецЕсли;
		Если Cтр.Свойство("МаксимумРядов") Тогда
			Ячейка.МаксимумРядов = Cтр.МаксимумРядов;
		КонецЕсли;
        Если Cтр.Свойство("Двухсторонний") Тогда
			Ячейка.Двухсторонний = Cтр.Двухсторонний;
		КонецЕсли; 
		Если Cтр.Свойство("ЭтоЯчейкаОТК") Тогда
			Ячейка.ЭтоЯчейкаОТК = Cтр.ЭтоЯчейкаОТК;
		КонецЕсли; 
		Если Cтр.Свойство("ВидШтабеля") Тогда
			Ячейка.ВидШтабеля = Cтр.ВидШтабеля;
		КонецЕсли;
	КонецЕсли;
	Ячейка.Записать();    
	
	Возврат Ячейка.Ссылка;
КонецФункции

Процедура ОбновитьСортаПМ() Экспорт
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	СтруктураЗапроса = УКО.НоваяСтруктураПроизвольногоЗапроса(); 
	Если ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ().ЭтоERP Тогда
		СтруктураЗапроса.ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УникальныйИдентификатор(Сорта.Ссылка) КАК Ссылка,
		|	Сорта.Наименование КАК Наименование,
		|	Сорта.ВысшийСорт КАК ВысшийСорт,
		|	Представление(Сорта.ВерсияДанных) КАК ВерсияДанных
		|ИЗ
		|	Справочник.pu_СортаПиломатериалов КАК Сорта";
	Иначе		
		СтруктураЗапроса.ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УникальныйИдентификатор(Сорта.Ссылка) КАК Ссылка,
		|	Сорта.Наименование КАК Наименование,
		|	Сорта.ВысшийСорт КАК ВысшийСорт,
		|	Представление(Сорта.ВерсияДанных) КАК ВерсияДанных
		|ИЗ
		|	Справочник.VLP_СортПиломатериалов КАК Сорта";
	КонецЕсли;
	ДанныеПУ = УКО.ПолучитьДанныеПроизвольногоЗапроса(СтруктураЗапроса);
	Менеджер = Справочники.Сорта;
	Для Каждого стр из ДанныеПУ Цикл
		СоздатьОбновитьЭлементСорта(Стр, Менеджер);
	КонецЦикла;
	ЗаписьИстории("СлужебныйОбновление.ОбновитьСортаПМ", "Успех");		
КонецПроцедуры

Функция СоздатьОбновитьЭлементСорта(Стр, Менеджер) Экспорт
	СпрСсылка = Менеджер.ПолучитьСсылку(стр.Ссылка);
	ТекДанныеСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СпрСсылка, "ВерсияДанных,ВерсияПУ,ПометкаУдаления");
	Если ЗначениеЗаполнено(ТекДанныеСсылки.ВерсияДанных) Тогда
		Если Строка(ТекДанныеСсылки.ВерсияПУ)  = стр.ВерсияДанных И ТекДанныеСсылки.ПометкаУдаления = ЛОЖЬ Тогда
			Возврат СпрСсылка;
		КонецЕсли;
		СпрОбъект = СпрСсылка.ПолучитьОбъект(); 
		СпрОбъект.ПометкаУдаления = ЛОЖЬ;
		СпрОбъект.ВерсияПУ = стр.ВерсияДанных;	
	Иначе
		СпрОбъект = Менеджер.СоздатьЭлемент();
		СпрОбъект.Владелец = ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ();
		СпрОбъект.УстановитьСсылкуНового(СпрСсылка);
	КонецЕсли;
	СпрОбъект.ОбменДанными.Загрузка = ИСТИНА;
	СпрОбъект.ВысшийСорт = стр.ВысшийСорт;
	СпрОбъект.Наименование = СтрЗаменить(Стр.Наименование, "Сорт ", "");
	СпрОбъект.Записать();
	Возврат СпрОбъект.Ссылка;
КонецФункции

Процедура ОбновитьИнструкцииФотографирования() Экспорт
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	СтруктураЗапроса = УКО.НоваяСтруктураПроизвольногоЗапроса();
	Если ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ().ЭтоERP Тогда
		СтруктураЗапроса.ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(спр.Ссылка) КАК Ссылка,
		|	спр.Наименование КАК Наименование,
		|	ПРЕДСТАВЛЕНИЕ(спр.ВерсияДанных) КАК ВерсияДанных,
		|	спр.Инструкция.(
		|		НомерСтроки КАК НомерСтроки,
		|		КраткоеОписание КАК КраткоеОписание,
		|		Описание КАК Описание
		|	) КАК Инструкция
		|ИЗ
		|	Справочник.pu_ИнструкцииФотографирования КАК спр";	
	Иначе
		СтруктураЗапроса.ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(спр.Ссылка) КАК Ссылка,
		|	спр.Наименование КАК Наименование,
		|	ПРЕДСТАВЛЕНИЕ(спр.ВерсияДанных) КАК ВерсияДанных,
		|	спр.Инструкция.(
		|		НомерСтроки КАК НомерСтроки,
		|		КраткоеОписание КАК КраткоеОписание,
		|		Описание КАК Описание
		|	) КАК Инструкция
		|ИЗ
		|	Справочник.vlp_ИнструкцииФотографирования КАК спр";
	КонецЕсли;
	ДанныеПУ = УКО.ПолучитьДанныеПроизвольногоЗапроса(СтруктураЗапроса);
	Менеджер = Справочники.ИнструкцииФотографирования;
	Для Каждого стр из ДанныеПУ Цикл
		СоздатьОбновитьЭлементИнструкцииФотографирования(Стр, Менеджер);
	КонецЦикла;
	ЗаписьИстории("СлужебныйОбновление.ОбновитьИнструкцииФотографирования", "Успех");		
КонецПроцедуры

Функция СоздатьОбновитьЭлементИнструкцииФотографирования(Стр, Менеджер) Экспорт
	СпрСсылка = Менеджер.ПолучитьСсылку(стр.Ссылка);
	Если ЗначениеЗаполнено(СпрСсылка.ВерсияДанных) Тогда
		Если Строка(СпрСсылка.ВерсияПУ)  = стр.ВерсияДанных Тогда
			Возврат СпрСсылка;
		КонецЕсли;
		СпрОбъект = СпрСсылка.ПолучитьОбъект();
		СпрОбъект.ВерсияПУ = стр.ВерсияДанных;
	Иначе
		СпрОбъект = Менеджер.СоздатьЭлемент();
		СпрОбъект.Владелец = ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ();
		СпрОбъект.УстановитьСсылкуНового(СпрСсылка);
	КонецЕсли;
	СпрОбъект.ОбменДанными.Загрузка = ИСТИНА;
	
	СпрОбъект.Наименование = Стр.Наименование;
	Инструкция = СпрОбъект.Инструкция;
	Инструкция.Очистить();
	Для Каждого стрИнстр из Стр.Инструкция Цикл
		Нов = Инструкция.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, стрИнстр);
	КонецЦикла;
	
	СпрОбъект.Записать(); 
	Возврат СпрОбъект.Ссылка;
КонецФункции

Процедура ОбновитьВидыПродукцииПМ() Экспорт
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	СтруктураЗапроса = УКО.НоваяСтруктураПроизвольногоЗапроса();
	Если ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ().ЭтоERP Тогда
		СтруктураЗапроса.ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(спр.Ссылка) КАК Ссылка,
		|	спр.Наименование КАК Наименование,
		|	спр.Тип = Значение(Перечисление.pu_ТипПиломатериалаЦентрБок.Боковой) КАК БоковойПМ,
		|	Представление(спр.ВерсияДанных) КАК ВерсияДанных,
		|	спр.ВозможныеСортаВыхода.(
		|		УНИКАЛЬНЫЙИДЕНТИФИКАТОР(спр.ВозможныеСортаВыхода.Сорт) КАК Сорт
		|	) КАК ВозможныеСортаВыхода
		|ИЗ
		|	Справочник.pu_ВидыПродукции КАК спр";
	Иначе
		СтруктураЗапроса.ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(спр.Ссылка) КАК Ссылка,
		|	спр.Наименование КАК Наименование,
		|	спр.БоковойПМ КАК БоковойПМ,
		|	Представление(спр.ВерсияДанных) КАК ВерсияДанных,
		|	спр.ВозможныеСортаВыхода.(
		|		УНИКАЛЬНЫЙИДЕНТИФИКАТОР(спр.ВозможныеСортаВыхода.Сорт) КАК Сорт
		|	) КАК ВозможныеСортаВыхода
		|ИЗ
		|	Справочник.VLP_ВидыПродукции КАК спр";
	КонецЕслИ;
	ДанныеПУ = УКО.ПолучитьДанныеПроизвольногоЗапроса(СтруктураЗапроса);
	Менеджер = Справочники.ВидыПродукции;
	Для Каждого стр из ДанныеПУ Цикл
		СпрСсылка = Менеджер.ПолучитьСсылку(стр.Ссылка);
		Если ЗначениеЗаполнено(СпрСсылка.ВерсияДанных) Тогда
			Если Строка(СпрСсылка.ВерсияПУ)  = стр.ВерсияДанных Тогда
				Продолжить
			КонецЕсли;
			СпрОбъект = СпрСсылка.ПолучитьОбъект();	
			СпрОбъект.ВерсияПУ = стр.ВерсияДанных;
		Иначе
			СпрОбъект = Менеджер.СоздатьЭлемент();
			СпрОбъект.Владелец = ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ();
			СпрОбъект.УстановитьСсылкуНового(СпрСсылка);
		КонецЕсли;
		СпрОбъект.ОбменДанными.Загрузка = ИСТИНА;
		СпрОбъект.БоковойПМ = стр.БоковойПМ;
		СпрОбъект.Наименование = Стр.Наименование;
		СпрОбъект.ВозможныеСортаВыхода.Очистить();
		Для Каждого стрСорта из стр.ВозможныеСортаВыхода Цикл
			НовСорт = СпрОбъект.ВозможныеСортаВыхода.Добавить();
			НовСорт.Сорт = Справочники.Сорта.ПолучитьСсылку(СтрСорта.Сорт);
		КонецЦикла;
		
		СпрОбъект.Записать();
	КонецЦикла;
	ЗаписьИстории("СлужебныйОбновление.ОбновитьВидыПродукцииПМ", "Успех");	
КонецПроцедуры

Процедура ОбновитьВлажностиПМ() Экспорт
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	СтруктураЗапроса = УКО.НоваяСтруктураПроизвольногоЗапроса();
	Если ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ().ЭтоERP Тогда
		СтруктураЗапроса.ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(спр.Ссылка) КАК Ссылка,
		|	Представление(спр.ВерсияДанных) КАК ВерсияДанных,
		|	спр.Наименование КАК Наименование
		|ИЗ
		|	Справочник.pu_Влажности КАК спр";
	Иначе
		СтруктураЗапроса.ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(спр.Ссылка) КАК Ссылка,
		|	Представление(спр.ВерсияДанных) КАК ВерсияДанных,
		|	спр.Наименование КАК Наименование
		|ИЗ
		|	Справочник.VLP_Влажность КАК спр";
	КонецЕсли;
	ДанныеПУ = УКО.ПолучитьДанныеПроизвольногоЗапроса(СтруктураЗапроса);
	Менеджер = Справочники.Влажности;
	Для Каждого стр из ДанныеПУ Цикл
		СпрСсылка = Менеджер.ПолучитьСсылку(стр.Ссылка);
		Если ЗначениеЗаполнено(СпрСсылка.ВерсияДанных) Тогда
			Если Строка(СпрСсылка.ВерсияПУ)  = стр.ВерсияДанных Тогда
				Продолжить
			КонецЕсли;
			СпрОбъект = СпрСсылка.ПолучитьОбъект();	
			СпрОбъект.ВерсияПУ = стр.ВерсияДанных;	
		Иначе
			СпрОбъект = Менеджер.СоздатьЭлемент();
			СпрОбъект.Владелец = ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ();
			СпрОбъект.УстановитьСсылкуНового(СпрСсылка);
		КонецЕсли;
		СпрОбъект.ОбменДанными.Загрузка = ИСТИНА;
		СпрОбъект.Наименование = Стр.Наименование;
		
		СпрОбъект.Записать();	
	КонецЦикла;
	ЗаписьИстории("СлужебныйОбновление.ОбновитьВлажностиПМ", "Успех");	
КонецПроцедуры

Процедура ОбновитьТипыРаспила() Экспорт
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	СтруктураЗапроса = УКО.НоваяСтруктураПроизвольногоЗапроса();
	Если ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ().ЭтоERP Тогда
		СтруктураЗапроса.ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(спр.Ссылка) КАК Ссылка,
		|	Представление(спр.ВерсияДанных) КАК ВерсияДанных,
		|	спр.Наименование КАК Наименование
		|ИЗ
		|	Справочник.pu_ТипыДосокПоРаспилу КАК спр";
	Иначе
		
		СтруктураЗапроса.ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(спр.Ссылка) КАК Ссылка,
		|	Представление(спр.ВерсияДанных) КАК ВерсияДанных,
		|	спр.Наименование КАК Наименование
		|ИЗ
		|	Справочник.VLP_ТипРаспилаЦентральнойДоски КАК спр";
	КонецЕсли;
	ДанныеПУ = УКО.ПолучитьДанныеПроизвольногоЗапроса(СтруктураЗапроса);
	Менеджер = Справочники.ТипыРаспила;
	Для Каждого стр из ДанныеПУ Цикл
		СпрСсылка = Менеджер.ПолучитьСсылку(стр.Ссылка);
		Если ЗначениеЗаполнено(СпрСсылка.ВерсияДанных) Тогда
			Если Строка(СпрСсылка.ВерсияПУ)  = стр.ВерсияДанных Тогда
				Продолжить
			КонецЕсли;
			СпрОбъект = СпрСсылка.ПолучитьОбъект();	
			СпрОбъект.ВерсияПУ = стр.ВерсияДанных;	
		Иначе
			СпрОбъект = Менеджер.СоздатьЭлемент();
			СпрОбъект.Владелец = ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ();
			СпрОбъект.УстановитьСсылкуНового(СпрСсылка);
		КонецЕсли;
		СпрОбъект.ОбменДанными.Загрузка = ИСТИНА;
		СпрОбъект.Наименование = Стр.Наименование;
		
		СпрОбъект.Записать();	
	КонецЦикла;
	ЗаписьИстории("СлужебныйОбновление.ОбновитьТипыРаспила", "Успех");	
КонецПроцедуры

Функция ПолучитьТекстЗапросаОписанияПакетовНаСкладе(Ячейка, МассивПакетов = "") Экспорт 
	ТекстОтборов = "";
	Если ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ().ЭтоERP Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
		|	МАКСИМУМ(ТоварыНаСкладахОстатки.Назначение) КАК Назначение,
		|	ТоварыНаСкладахОстатки.Серия КАК Серия,
		|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) КАК ВНаличии,
		|	СУММА(ТоварыНаСкладахОстатки.КОтгрузкеОстаток) КАК КОтгрузке,
		|	СУММА(ТоварыНаСкладахОстатки.pu_ВНаличииШтукОстаток) КАК pu_ВНаличииШтук,
		|	ЕСТЬNULL(ВложенныйЗапрос.Ячейка, ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка)) КАК Ячейка,
		|	ЕСТЬNULL(ВложенныйЗапрос.Ряд, 0) КАК Ряд,
		|	ЕСТЬNULL(ВложенныйЗапрос.Уровень, 0) КАК Уровень,
		|	НЕ ТоварыНаСкладахОстатки.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК ВРезерве,
		|	МАКСИМУМ(ВложенныйЗапрос.Склад) КАК Склад
		|ПОМЕСТИТЬ Вт
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(, УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Склад) В (&Склады)) КАК ТоварыНаСкладахОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних.СерияПакета КАК СерияПакета,
		|			pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних.Склад КАК Склад,
		|			pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних.Ячейка КАК Ячейка,
		|			pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних.Ряд КАК Ряд,
		|			pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних.Уровень КАК Уровень
		|		ИЗ
		|			РегистрСведений.pu_ДвижениеПакетовПоЯчейкамСклада.СрезПоследних(, УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Склад) В (&Склады)) КАК pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних) КАК ВложенныйЗапрос
		|		ПО (ТоварыНаСкладахОстатки.Серия = ВложенныйЗапрос.СерияПакета)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Ячейка,
		|	ТоварыНаСкладахОстатки.Характеристика,
		|	ТоварыНаСкладахОстатки.Серия,
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ЕСТЬNULL(ВложенныйЗапрос.Ряд, 0),
		|	ЕСТЬNULL(ВложенныйЗапрос.Уровень, 0),
		|	НЕ ТоварыНаСкладахОстатки.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Характеристика,
		|	Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(pu_СведенияОПакетеСрезПоследних.ПакетПиломатериалов) КАК НомерПакета,
		|	pu_СведенияОПакетеСрезПоследних.Сечение.Толщина КАК Толщина,
		|	pu_СведенияОПакетеСрезПоследних.Сечение.Ширина КАК Ширина,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(pu_СведенияОПакетеСрезПоследних.ВидПродукции) КАК ВидПродукции,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(pu_СведенияОПакетеСрезПоследних.СортПиломатериалов) КАК Сорт,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(pu_СведенияОПакетеСрезПоследних.ТипРаспила) КАК ТипРаспила,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(pu_СведенияОПакетеСрезПоследних.Влажность) КАК Влажность,
		|	pu_СведенияОПакетеСрезПоследних.Длина.ДлинаОт КАК ДлинаОт,
		|	pu_СведенияОПакетеСрезПоследних.Длина.ДлинаДо КАК ДлинаДо,
		|	pu_СведенияОПакетеСрезПоследних.НомерПакета КАК НомерПакетаКод,
		|	pu_СведенияОПакетеСрезПоследних.ДатаВремяВыпуска КАК НомерПакетаДатаВыпуска,
		|	Вт.Номенклатура.pu_Порода.Наименование КАК Порода,
		|	ВЫБОР
		|			КОГДА Вт.ВРезерве
		|				ТОГДА 2
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК Состояние,
		|	pu_СведенияОПакетеСрезПоследних.Количество КАК Объем,
		|	pu_СведенияОПакетеСрезПоследних.КоличествоШтук КАК Досок,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(pu_СведенияОПакетеСрезПоследних.Партия) КАК Партия,
		|	pu_СведенияОПакетеСрезПоследних.ОбъемСПрипуском КАК ОбъемСПрипуском,
		|	pu_СведенияОПакетеСрезПоследних.ПакетПиломатериалов.ПрефиксПроизводителя КАК ПрефиксПроизводителя,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Вт.Ячейка) КАК Ячейка,
		|	Вт.Ряд КАК Ряд,
		|	Вт.Уровень КАК Уровень,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Вт.Склад) КАК Склад
		|ИЗ
		|	Вт КАК Вт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.pu_СведенияОПакете.СрезПоследних КАК pu_СведенияОПакетеСрезПоследних
		|		ПО Вт.Серия = pu_СведенияОПакетеСрезПоследних.Серия";
		
		Если НЕ Ячейка = Неопределено Тогда
			ТекстОтборов = ТекстОтборов + Символы.ПС 
			+ "УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ЕСТЬNULL(Вт.Ячейка, ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка))) = &УИД_Ячейки";
		КонецЕсли;
		
		Если НЕ МассивПакетов = Неопределено Тогда
			ТекстОтборов = ТекстОтборов + Символы.ПС
			+ ?(ТекстОтборов="","","И ") + "УНИКАЛЬНЫЙИДЕНТИФИКАТОР(pu_СведенияОПакетеСрезПоследних.ПакетПиломатериалов) В (&МассивГуидовПакетов)";
		КонецЕсли;
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ОстаткиНаСкладах.НомерПакета) КАК НомерПакета,
		|	ОстаткиНаСкладах.Сечение.Толщина КАК Толщина,
		|	ОстаткиНаСкладах.Сечение.Ширина КАК Ширина,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ОстаткиНаСкладах.СортПиломатериалов) КАК Сорт,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ОстаткиНаСкладах.ТипРаспилаЦентральнойДоски) КАК ТипРаспила,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ОстаткиНаСкладах.Влажность) КАК Влажность,
		|	ВЫБОР
		|		КОГДА ОстаткиНаСкладах.Номенклатура.VLP_ПородаДревесины = ЗНАЧЕНИЕ(Перечисление.VLP_ПородыДревесины.Ель)
		|			ТОГДА ""Ель""
		|		ИНАЧЕ ""Сосна""
		|	КОНЕЦ КАК Порода,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ОстаткиНаСкладах.ВидПродукции) КАК ВидПродукции,
		|	ОстаткиНаСкладах.ОбъемОстаток КАК Объем,
		|	ОстаткиНаСкладах.КоличествоШтукОстаток КАК Досок,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ЕСТЬNULL(РаспределениеЯчеек.Ячейка, ЗНАЧЕНИЕ(Справочник.VLP_СтруктураХраненияСклада.ПустаяСсылка))) КАК Ячейка,
		|	РаспределениеЯчеек.Ряд КАК Ряд,
		|	РаспределениеЯчеек.Уровень КАК Уровень,
		|	ОстаткиНаСкладах.Длина.ДлинаОт КАК ДлинаОт,
		|	ОстаткиНаСкладах.Длина.ДлинаДо КАК ДлинаДо,
		|	ОстаткиНаСкладах.Длина.Наименование КАК ДлинаНаименование,
		|	ОстаткиНаСкладах.НомерПакета.Код КАК НомерПакетаКод,
		|	ОстаткиНаСкладах.НомерПакета.ДатаВыпуска КАК НомерПакетаДатаВыпуска,
		|	ВЫБОР
		|		КОГДА СостояниеПакетаСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.VLP_ВидыСостоянийПакета.Резерв)
		|			ТОГДА 2
		|		КОГДА СостояниеПакетаСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.VLP_ВидыСостоянийПакета.ЗапрещенаОтгрузка)
		|			ТОГДА 3
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Состояние,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(VLP_СведенияОПакетеСрезПоследних.Партия) КАК Партия,
		|	ОстаткиНаСкладах.Склад.ИмяПредопределенныхДанных КАК Склад	
		|ИЗ
		|	РегистрНакопления.VLP_ДвижениеПиломатериаловНаСкладахВрем.Остатки(, Склад.ИмяПредопределенныхДанных В (&Склады)) КАК ОстаткиНаСкладах
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.vlp_РаспределениеПакетовПоЯчейкамСклада.СрезПоследних КАК РаспределениеЯчеек
		|		ПО (ОстаткиНаСкладах.НомерПакета = РаспределениеЯчеек.НомерПакета)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.VLP_СостояниеПакета.СрезПоследних КАК СостояниеПакетаСрезПоследних
		|		ПО (ОстаткиНаСкладах.НомерПакета = СостояниеПакетаСрезПоследних.НомерПакета)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.VLP_СведенияОПакете.СрезПоследних КАК VLP_СведенияОПакетеСрезПоследних
		|		ПО (ОстаткиНаСкладах.НомерПакета = VLP_СведенияОПакетеСрезПоследних.НомерПакета)";
		
		ТекстОтборов = "";
		Если НЕ Ячейка = Неопределено Тогда
			ТекстОтборов = ТекстОтборов + Символы.ПС 
			+ "УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ЕСТЬNULL(РаспределениеЯчеек.Ячейка, ЗНАЧЕНИЕ(Справочник.VLP_СтруктураХраненияСклада.ПустаяСсылка))) = &УИД_Ячейки";
		КонецЕсли;
		
		Если НЕ МассивПакетов = Неопределено Тогда
			ТекстОтборов = ТекстОтборов + Символы.ПС
			+ ?(ТекстОтборов="","","И ") + "УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ОстаткиНаСкладах.НомерПакета) В (&МассивГуидовПакетов)";
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ ТекстОтборов = "" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ "+ТекстОтборов;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
КонецФункции

Процедура ОбновитьОстаткиПакетовНаСкладе(Ячейка = НЕОПРЕДЕЛЕНО, МассивПакетов = НЕОПРЕДЕЛЕНО) Экспорт
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	МассивСкладовПУ = ОбщегоНазначенияВызовСервераПовтИсп.МассивСкладовПУ();
	Если МассивСкладовПУ.Количество() = 0 Тогда Возврат КонецЕсли;
	
	ИмяСобытияЖУрнала = "СлужебныйОбновление.ОбновитьОстаткиПакетовНаСкладе";
	
	ЗаписьИстории(ИмяСобытияЖУрнала, "Начало обмена");
	СтруктураЗапроса = УКО.НоваяСтруктураПроизвольногоЗапроса();

	СтруктураЗапроса.ПараметрыЗапроса.Вставить("Склады", МассивСкладовПУ);	
	СтруктураЗапроса.ТекстЗапроса =  ПолучитьТекстЗапросаОписанияПакетовНаСкладе(Ячейка, МассивПакетов);
	
	Если НЕ Ячейка = Неопределено и ЗначениеЗаполнено(Ячейка) Тогда
		СтруктураЗапроса.ПараметрыЗапроса.Вставить("УИД_Ячейки", Ячейка.УникальныйИдентификатор());
	КонецЕсли;
	Если Не МассивПакетов = НЕОПРЕДЕЛЕНО Тогда
		СтруктураЗапроса.ПараметрыЗапроса.Вставить("МассивГуидовПакетов", МассивПакетов);
	КонецЕсли;
	
	ДанныеПУ = УКО.ПолучитьДанныеПроизвольногоЗапроса(СтруктураЗапроса,,ИмяСобытияЖУрнала);
	Если ДанныеПУ = Неопределено Тогда
		ЗаписьИстории(ИмяСобытияЖУрнала, "Ошибка получения данных", ИСТИНА);
		Возврат;
	КонецЕсли;

	ЗаписьИстории(ИмяСобытияЖУрнала, "Получили данные ПУ");
	
	Если МассивПакетов = НЕОПРЕДЕЛЕНО Тогда
		ОчиститьРегистрОстатков(Ячейка, ДанныеПУ);
	КонецЕсли;
	
	Пакеты.ЗаписатьОстаткиСвойстваПакетовНЗ(ДанныеПУ);	
	
	ЗаписьИстории(ИмяСобытияЖУрнала, "Записали остатки пакетов ПУ");
	
	ДанныеУстройства = ПараметрыСеанса.ИдентификаторУстройства;
	Если ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ().ЭтоERP Тогда
		ТекстУдаления = СтрШаблон(
		"Устройство = %1;
		|ИмяМетаданных = %2;
		|МобильноеПриложениеСкладПУ.УдалитьИзмененияИзПланаОбмена(Устройство, ИмяМетаданных);", """"+ДанныеУстройства+"""", """РегистрСведений.pu_ДвижениеПакетовПоЯчейкамСклада""");
	Иначе
		ТекстУдаления = СтрШаблон(
		"Устройство = %1;
		|ИмяМетаданных = %2;
		|МобильноеПриложениеСкладПУ.УдалитьИзмененияИзПланаОбмена(Устройство, ИмяМетаданных);", """"+ДанныеУстройства+"""", """РегистрСведений.vlp_РаспределениеПакетовПоЯчейкамСклада""");
	КонецЕсли;
	
	УКО.ВыполнитьФункциюПУ(Новый Соответствие, ТекстУдаления, ИмяСобытияЖУрнала);
	
	Если Ячейка = Неопределено или Не ЗначениеЗаполнено(Ячейка) Тогда
		ДлительныеОперацииВызовСервера.ЗапуститьФоновоеЗадание("ПоврежденныеПакеты.ОчиститьУстаревшиеПоврежденные", Новый Массив, "Очистка устаревших поврежденных пакетов"); 
	КонецЕсли;                 
	
	ЯчейкиСклада.ОбновитьИтогиРасстановки();
	
КонецПроцедуры

Процедура ОчиститьРегистрОстатков(Ячейка = Неопределено, Знач ДанныеПУ = Неопределено, Склад = Неопределено)
	
	НаборЗаписей = РегистрыСведений.ОстаткиПакетовНаСкладах.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = ИСТИНА;
	
	//Очистим с пустым складом
	НаборЗаписей.Отбор.Склад.Установить(Справочники.Склады.ПустаяСсылка());
	НаборЗаписей.Записать(ИСТИНА);
	
	Для Каждого склад из ОбщегоНазначенияВызовСервераПовтИсп.МассивСкладов() Цикл
		Если Ячейка = Неопределено Тогда
			НаборЗаписей.Отбор.Склад.Установить(Склад); 
			НаборЗаписей.Записать(ИСТИНА);  
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьИзмененияИзПУ(СтруктураИзменений, РезультатОбмена = НЕОПРЕДЕЛЕНО) Экспорт
	Если РезультатОбмена = НЕОПРЕДЕЛЕНО Тогда
		РезультатОбмена = Новый Структура;
	КонецЕсли;
	
	Изменения = СтруктураИзменений.Получить("VLP_СортПиломатериалов");
	Если Не Изменения = Неопределено Тогда 
		Менеджер = Справочники.Сорта; 
		ИзмененныеСорта = Новый Соответствие;
		Для Каждого стр из Изменения Цикл
			ИзмененныеСорта.Вставить(СоздатьОбновитьЭлементСорта(стр, Менеджер))
		КонецЦикла;
	КонецЕсли;
	
	Изменения = СтруктураИзменений.Получить("VLP_СтруктураХраненияСклада");
	Если Не Изменения = Неопределено Тогда 
		Менеджер = Справочники.Ячейки; 
		ИзмененныеЯчейки = Новый Соответствие;

		Если Изменения.Количество()>0 Тогда
			ТЗИзменений = ОбщегоНазначения.МассивСтруктурВТаблицуЗначений(Изменения);	
			ТЗИзменений.Сортировать("ЭтоГруппа Убыв");
			
			Для Каждого стр из ТЗИзменений Цикл 
				Если ЗначениеЗаполнено(стр.Наименование) Тогда
					ИзмененныеЯчейки.Вставить(СоздатьОбновитьЭлементЯчейки(стр, Менеджер));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Изменения = СтруктураИзменений.Получить("vlp_ИнструкцииФотографирования");
	Если Не Изменения = Неопределено Тогда 
		Менеджер = Справочники.ИнструкцииФотографирования;
		ИзмененныеИнструкции = Новый Соответствие;
		Для Каждого стр из Изменения Цикл
			ИзмененныеИнструкции.Вставить(СоздатьОбновитьЭлементИнструкцииФотографирования(Стр, Менеджер))
		КонецЦикла;
	КонецЕсли;
	
	Изменения = СтруктураИзменений.Получить("ИзмененияПакетов");
	Если Не Изменения = Неопределено и Изменения.Количество()>0 Тогда 
		
		ТаблицаИзменений = ОбщегоНазначения.МассивСтруктурВТаблицуЗначений(Изменения);
		ИзмененияЯчеек = Новый Соответствие;
		
        НЗ_Остатки = РегистрыСведений.ОстаткиПакетовНаСкладах.СоздатьНаборЗаписей();
        НЗ_Остатки.ОбменДанными.Загрузка = ИСТИНА;
		НЗ_Остатки.ОбменДанными.Получатели.АвтоЗаполнение = ЛОЖЬ;
		
		ТаблицаДляОчисткиОстатков = ТаблицаИзменений.Скопировать(Новый Структура("Объем", NULL));
		Для Каждого стр из ТаблицаДляОчисткиОстатков Цикл 
			
			ИзмененияЯчеек.Вставить(стр.Ячейка);

			НЗ_Остатки.Отбор.НомерПакета.Установить(стр.НомерПакета);
			НЗ_Остатки.ОбменДанными.Получатели.Очистить();
			НЗ_Остатки.Записать(ИСТИНА);
			
        КонецЦикла;
		
		Для Каждого стр из ТаблицаИзменений Цикл
			Если Не ЗначениеЗаполнено(стр.Склад) Тогда Продолжить КонецЕсли;
			Если стр.Объем = NULL Тогда Продолжить КонецЕсли;
			ИзмененияЯчеек.Вставить(стр.Ячейка);
			Пакеты.ЗаписатьОстаткиПакета(стр, ИСТИНА);
			Пакеты.ЗаписатьСвойстваПакета(стр);	
		КонецЦикла;
	КонецЕсли;
	
	Изменения = СтруктураИзменений.Получить("ПоврежденныеПакеты");
	Если Не Изменения = Неопределено И Изменения.Количество() > 0 Тогда
		Попытка
			ДанныеПУ = ОбщегоНазначения.МассивСтруктурВТаблицуЗначений(Изменения);
			ОчиститьРегистрПоврежденныеПакеты(ДанныеПУ);
			Для Каждого стр Из ДанныеПУ Цикл
				ПоврежденныеПакеты.ЗаписатьЗаписьРегистра(стр);	
			КонецЦикла
		Исключение
			ИсторияРаботы.мЗаписьИстории("СлужебныйОбновление.НачатьОбменИзменениями-Загрузка поврежденных",
				ОписаниеОшибки(), Истина);
		КонецПопытки;
	КонецЕсли;
	
	Подсборки = СтруктураИзменений.Получить("НазначенныеСпецификации");
	Если Не Подсборки = Неопределено Тогда
		Попытка
			ДанныеПУ = ОбщегоНазначения.МассивСтруктурВТаблицуЗначений(Подсборки);
			НаборЗаписей = РегистрыСведений.НазначенныеПодсборки.СоздатьНаборЗаписей();
			Для Каждого стр Из ДанныеПУ Цикл
				Нов = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Нов, стр);
				Нов.Склад = ОбщегоНазначенияВызовСервераПовтИсп.Склад();
				Нов.Пакет = стр.Пакет;
				Нов.Место = Справочники.Ячейки.ПолучитьСсылку(стр.Штабель);
			КонецЦикла;
			НаборЗаписей.Записать(Истина);
		Исключение
			ИсторияРаботы.мЗаписьИстории("СлужебныйОбновление.НачатьОбменИзменениями-Загрузка поврежденных",
				ОписаниеОшибки(), Истина);
		КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОчиститьРегистрПоврежденныеПакеты(ДанныеПУ = Неопределено)
	
	НаборЗаписей = РегистрыСведений.ПоврежденныеПакеты.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = ИСТИНА;
	
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = ЛОЖЬ;
	
	Для Каждого Склад из ОбщегоНазначенияВызовСервераПовтИсп.МассивСкладов() Цикл
		НаборЗаписей.Отбор.Склад.Установить(Склад);
		Если ДанныеПУ = Неопределено Тогда
			НаборЗаписей.Записать(ИСТИНА);
		Иначе
			НаборЗаписей.Прочитать();
			МассивПакетовУдалить = НаборЗаписей.ВыгрузитьКолонку("Пакет");
			МассивПакетовПУ = ДанныеПУ.ВыгрузитьКолонку("Пакет");
			МассивПакетовУдалить = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивПакетовУдалить, МассивПакетовПУ);	
			Для Каждого ИдПакета из МассивПакетовУдалить Цикл
				НЗ_Удаления = РегистрыСведений.ПоврежденныеПакеты.СоздатьНаборЗаписей();
				НЗ_Удаления.ОбменДанными.Загрузка = ИСТИНА; 
				НЗ_Удаления.ОбменДанными.Получатели.АвтоЗаполнение = ЛОЖЬ;
				НЗ_Удаления.ОбменДанными.Получатели.Очистить();
				НЗ_Удаления.Отбор.Склад.Установить(Склад);
				НЗ_Удаления.Отбор.Пакет.Установить(ИдПакета);
				НЗ_Удаления.Записать(ИСТИНА);
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Функция НачатьОбменИзменениями(КоличествоЗаписейВПакете = 100, ТипДанныхВыгрузки = "") Экспорт
	мОшибки = Новый Массив;
	РезультатОбмена = Новый Структура;

	НачалоОбмена = ТекущаяУниверсальнаяДатаВМиллисекундах();

	УзелПУ = ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ().УзелПланаОбмена;

	Если Не ОбщегоНазначенияВызовСервераПовтИсп.ЭтоERP() Тогда
		ОписаниеИзменений = МобильноеПриложениеСкладПУ.ПолучитьИзмененияУзлаПУ(УзелПУ);
		СоотвТиповИзменений = ОписаниеИзменений.Данные;

		Если Не СоотвТиповИзменений = Неопределено Тогда

			ДопЗаголовки = Новый Соответствие;
			ДопЗаголовки.Вставить("Accept-Encoding", "zip");

			Если Не СоотвТиповИзменений.Количество() = 0 Тогда

				ДанныеДляПУ = МобильноеПриложениеСкладПУ.ПодготовитьДанныеИзмененийДляВыгрузки(СоотвТиповИзменений);
				Если ДанныеДляПУ.Количество() > 0 Тогда

					Ответ = http.post("/hs/ma_bgp/exchange_ma", ДанныеДляПУ, , , , ДопЗаголовки, 300);
					Если Ответ = Неопределено Тогда
						мОшибки.Добавить("Нет связи с сервером");
					ИначеЕсли Ответ.КодСостояния = 200 Тогда
						МобильноеПриложениеСкладПУ.ОчиститьИзмененияУзлаПУ();
					Иначе
						мОшибки.Добавить(Ответ.ПолучитьТелоКакСтроку());	
				КонецЕсли;
				КонецЕсли;
			Иначе
				МобильноеПриложениеСкладПУ.ОчиститьИзмененияУзлаПУ(УзелПУ.НомерОтправленного);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ТипДанныхВыгрузки = "" Или ТипДанныхВыгрузки = "ЗагрузитьИзмененияИзПУ" Тогда
		//Получить Изменения Плана обмена
		Ответ = http.get("/hs/ma_bgp/exchange_ma", , , , ДопЗаголовки, 120);
		Если Ответ = Неопределено Тогда
			мОшибки.Добавить("Ошибка связи");
			Возврат мОшибки
		КонецЕсли
		;
		Если Не Ответ.КодСостояния = 200 Тогда
			мОшибки.Добавить(Ответ.ПолучитьТелоКакСтроку());
			Возврат мОшибки;
		КонецЕсли;

		ДанныеОтвета = http.ИзвлечьДанныеИзОтветаСервера(Ответ);

		Если ДанныеОтвета.Свойство("Изменения") Тогда
			ЗагрузитьИзмененияИзПУ(ДанныеОтвета.Изменения, РезультатОбмена);
		КонецЕсли;

	КонецЕсли;

	РезультатОбмена.Вставить("Ошибки", мОшибки);
	Если мОшибки.Количество() > 0 Тогда
		ИсторияРаботы.мЗаписьИстории("СлужебныйОбновление.НачатьОбменИзменениями", СтрСоединить(мОшибки, Символы.ПС),
			Истина);
	Иначе
		ИсторияРаботы.мЗаписьИстории("СлужебныйОбновление.НачатьОбменИзменениями", "Длительность мс:"
			+ (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоОбмена), Ложь);
		КонецЕсли
	;

	Возврат РезультатОбмена;
КонецФункции

Процедура ОбновитьВидыПоврежденияПакета() Экспорт
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	СтруктураЗапроса = УКО.НоваяСтруктураПроизвольногоЗапроса();
	Если ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ().ЭтоERP Тогда
		Возврат 
	Иначе
		СтруктураЗапроса.ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УникальныйИдентификатор(Спр.Ссылка) КАК Ссылка,
		|	Представление(спр.ВерсияДанных) КАК ВерсияДанных,
		|	Спр.Наименование КАК Наименование,
		|	Спр.Код КАК Код
		|ИЗ
		|	Справочник.VLP_ВидыПоврежденияПакета КАК Спр";
	КонецЕсли;
	ДанныеПУ = УКО.ПолучитьДанныеПроизвольногоЗапроса(СтруктураЗапроса);
	Менеджер = Справочники.ВидыПоврежденияПакета;
	Для Каждого стр из ДанныеПУ Цикл
		СпрСсылка = Справочники.ВидыПоврежденияПакета.ПолучитьСсылку(стр.Ссылка);
		Если ЗначениеЗаполнено(СпрСсылка.ВерсияДанных) Тогда
			Если Строка(СпрСсылка.ВерсияПУ)  = стр.ВерсияДанных Тогда
				Продолжить
			КонецЕсли;
			
			СпрОбъект = СпрСсылка.ПолучитьОбъект();	
			СпрОбъект.ВерсияПУ = стр.ВерсияДанных;	
		Иначе
			СпрОбъект = Менеджер.СоздатьЭлемент();
			СпрОбъект.Владелец = ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ();
			СпрОбъект.УстановитьСсылкуНового(СпрСсылка);
		КонецЕсли;
		СпрОбъект.Наименование = Стр.Наименование;
		СпрОбъект.Код = Стр.Код;
		СпрОбъект.Записать();
	КонецЦикла;
	ЗаписьИстории("СлужебныйОбновление.ОбновитьВидыПоврежденияПакета", "Успех");		
КонецПроцедуры

Процедура ОбновитьСлужебныеСправочники(Фоново = ИСТИНА) Экспорт
	Если Фоново Тогда
		
		Если НЕ ДлительныеОперации.ФоновоеЗаданиеАктивно("СлужебныйОбновление.ОбновитьВидыПоврежденияПакета") Тогда
			ФоновыеЗадания.Выполнить("СлужебныйОбновление.ОбновитьВидыПоврежденияПакета",	 Новый Массив, "ОбновитьВидыПоврежденияПакета",	 "Обновление видов повреждений");
		КонецЕсли;
		
		Если НЕ ДлительныеОперации.ФоновоеЗаданиеАктивно("СлужебныйОбновление.ОбновитьВлажностиПМ") Тогда
			ФоновыеЗадания.Выполнить("СлужебныйОбновление.ОбновитьВлажностиПМ",				 Новый Массив, "ОбновитьВлажностиПМ",			 "Обновление влажностей");
		КонецЕсли;
		
		Если НЕ ДлительныеОперации.ФоновоеЗаданиеАктивно("СлужебныйОбновление.ОбновитьТипыРаспила") Тогда
			ФоновыеЗадания.Выполнить("СлужебныйОбновление.ОбновитьТипыРаспила",				 Новый Массив, "ОбновитьТипыРаспила",			 "Обновление типы распила");
		КонецЕсли;
		
		Если НЕ ДлительныеОперации.ФоновоеЗаданиеАктивно("СлужебныйОбновление.ОбновитьСортаПМ") Тогда
			ФоновыеЗадания.Выполнить("СлужебныйОбновление.ОбновитьСортаПМ",					 Новый Массив, "ОбновитьСортаПМ",				 "Обновление сортов");
		КонецЕсли;
		
		Если НЕ ДлительныеОперации.ФоновоеЗаданиеАктивно("СлужебныйОбновление.ОбновитьВидыПродукцииПМ") Тогда
			ФоновыеЗадания.Выполнить("СлужебныйОбновление.ОбновитьВидыПродукцииПМ",			 Новый Массив, "ОбновитьВидыПродукцииПМ",		 "Обновление видов продукции");
		КонецЕсли;
		
		Если НЕ ДлительныеОперации.ФоновоеЗаданиеАктивно("СлужебныйОбновление.ОбновитьЯчейкиСклада") Тогда
			ФоновыеЗадания.Выполнить("СлужебныйОбновление.ОбновитьЯчейкиСклада",			 Новый Массив, "ОбновитьЯчейкиСклада",			 "Обновление ячеек склада");
		КонецЕсли;
		
		Если НЕ ДлительныеОперации.ФоновоеЗаданиеАктивно("СлужебныйОбновление.ОбновитьИнструкцииФотографирования") Тогда
			ФоновыеЗадания.Выполнить("СлужебныйОбновление.ОбновитьИнструкцииФотографирования",Новый Массив, "ОбновитьИнструкцииФотографирования", "Обновление Инструкций Фотографирования");
		КонецЕсли;

	Иначе
		
		ОбновитьВидыПоврежденияПакета();
		ОбновитьВлажностиПМ();
		ОбновитьТипыРаспила();
		ОбновитьСортаПМ();
		ОбновитьВидыПродукцииПМ();
		ОбновитьЯчейкиСклада(); 
		ОбновитьИнструкцииФотографирования();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПометитьЭлементыСправочникаНаУдаление(Менеджер, СтруктураОтборов)
	Спр = Менеджер.Выбрать(, ОбщегоНазначенияВызовСервераПовтИсп.Склад(), СтруктураОтборов);
	Пока Спр.Следующий() Цикл
		ОбъСпр = Спр.ПолучитьОбъект();
		ОбъСпр.ОбменДанными.Загрузка = ИСТИНА;
		ОбъСпр.ПометкаУдаления = Истина;
		ОбъСпр.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ОчиститьДанныеНаСервере(МетаданныеКУдалению, АдресРезультата = Неопределено) Экспорт
	Для Каждого м из МетаданныеКУдалению.МассивРегистров Цикл
		МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(м);
		//МенеджерРегистра = РегистрыСведений.ДвоичныеДанныеПрисоединенныхФайлов.СоздатьНаборЗаписей();
		НЗ = МенеджерРегистра.СоздатьНаборЗаписей();
		НЗ.ОбменДанными.Загрузка = ИСТИНА;
		НЗ.Записать();
	КонецЦикла;
	Для Каждого м из МетаданныеКУдалению.МассивСправочников Цикл
		МенеджерСправочника = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(м);
		Выборка = МенеджерСправочника.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не Выборка.ПометкаУдаления Тогда
				Спр = Выборка.ПолучитьОбъект();
				Спр.ОбменДанными.Загрузка = ИСТИНА;  
				Попытка
					Спр.УстановитьПометкуУдаления(ИСТИНА);
				Исключение
				КонецПопытки
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого м из МетаданныеКУдалению.МассивДокументов Цикл
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(м);
		Выборка = МенеджерДокумента.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не Выборка.ПометкаУдаления Тогда
				Док = Выборка.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(ИСТИНА);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	МассивПомеченных = НайтиПомеченныеНаУдаление();
	ТаблицаСсылок = НайтиПоСсылкам(МассивПомеченных);
	МассивУдаляемых = Новый Массив;
	Для Каждого ссылкаПомечена из МассивПомеченных Цикл
		СтрокиТаблицы = ТаблицаСсылок.НайтиСтроки(Новый Структура("Ссылка", ссылкаПомечена));
		Берем = ИСТИНА;
		Для Каждого стр из СтрокиТаблицы Цикл 
			Если МассивУдаляемых.Найти(стр.Данные) = Неопределено Тогда
				Берем = ЛОЖЬ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Берем Тогда
			МассивУдаляемых.Добавить(ссылкаПомечена);
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьОбъекты(МассивУдаляемых, ЛОЖЬ);
	
	ОбновитьСправочникиРегистрыПослеОчистки();
	
	ПоместитьВоВременноеХранилище(ИСТИНА, АдресРезультата);
КонецПроцедуры

Процедура ОбновитьСправочникиРегистрыПослеОчистки() Экспорт
	ОбновитьСлужебныеСправочники(ЛОЖЬ);
	ОбновитьОстаткиПакетовНаСкладе(); 
КонецПроцедуры

Процедура ОтправитьАрхивТреков() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Треки.id,
	|	Треки.ДанныеТрека,
	|	Треки.Начало,
	|	Треки.Окончание,
	|	ИдентификаторУстройства.Значение КАК Устройство
	|ИЗ
	|	РегистрСведений.Треки КАК Треки,
	|	Константа.ИдентификаторУстройства КАК ИдентификаторУстройства";
	ДанныеДляПУ = ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
	
	ДопЗаголовки = Новый Соответствие;
	ДопЗаголовки.Вставить("Accept-Encoding", "zip");
	ОтветИБ = http.post("/hs/ma_bgp/track_data", ДанныеДляПУ, , , , ДопЗаголовки, 300);
	Если НЕ ОтветИБ = Неопределено и ОтветИБ.КодСостояния = 200 Тогда
		НаборЗаписей = РегистрыСведений.Треки.СоздатьНаборЗаписей();
		Для Каждого стр из ДанныеДляПУ Цикл
			НаборЗаписей.Отбор.id.Установить(стр.id);	
			НаборЗаписей.Записать(ИСТИНА)
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры