Процедура ЗарегистрироватьВПланеОбмена(мОбъект) Экспорт
	СоставПлана = Метаданные.ПланыОбмена.МобильноеПриложениеСкладПУ.Состав;
	МетаданныеОбъекта = мОбъект.Метаданные();
	Если НЕ СоставПлана.Найти(МетаданныеОбъекта) = Неопределено Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(ПолучитьСоздатьУзелПланаОбменаПУ(), мОбъект);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСоздатьУзелПланаОбменаПУ(БазаПУ = Неопределено) Экспорт
	Если БазаПУ = Неопределено Тогда
		БазаПУ = ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ();
	КонецЕсли;
	Узел = ПланыОбмена.МобильноеПриложениеСкладПУ.НайтиПоРеквизиту("БазаПУ", БазаПУ.Ссылка);	
	Если ЗначениеЗаполнено(Узел) Тогда
		Возврат Узел
	Иначе
		мУзел = ПланыОбмена.МобильноеПриложениеСкладПУ.СоздатьУзел();
		мУзел.БазаПУ = БазаПУ.Ссылка;
		мУзел.Наименование = БазаПУ.Наименование; 
		мУзел.Код = БазаПУ.Код;
		//ЗаполнитьЗначенияСвойств(мУзел, БазаПУ, "Наименование,Код");
		мУзел.Записать();
		Возврат мУзел.Ссылка
	КонецЕсли;
КонецФункции

Процедура ПроверитьНастроитьПланОбмена() Экспорт
	Перем ЭтотУзелОбъект;
	
	ЭтотУзел = ПланыОбмена.МобильноеПриложениеСкладПУ.ЭтотУзел();
	ЕстьИзменения = ЛОЖЬ;
	Если Не ЗначениеЗаполнено(ЭтотУзел.Код) Тогда
		ЭтотУзелОбъект = ЭтотУзел.ПолучитьОбъект();	
		ЭтотУзелОбъект.Код = "001"; ЕстьИзменения = Истина;	
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ЭтотУзел.Наименование) Тогда
		Если ЭтотУзелОбъект = НЕОПРЕДЕЛЕНО Тогда
			ЭтотУзелОбъект = ЭтотУзел.ПолучитьОбъект();	
		КонецЕсли;
		ЭтотУзелОбъект.Наименование = "Этот узел"; ЕстьИзменения = Истина;	
	КонецЕсли;
	Если ЕстьИзменения Тогда
		ЭтотУзелОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьДанныеИзмененийДляВыгрузки(СоотвТиповИзменений) Экспорт
	ДанныеИзмененийТипов = Новый Соответствие;
	Для Каждого м из СоотвТиповИзменений Цикл
		ТипДаннных = м.Ключ;
		МассивЗначений = м.Значение;
		Если ТипДаннных = Тип("РегистрСведенийНаборЗаписей.ПоврежденныеПакеты") и МассивЗначений.Количество()> 0 Тогда
			Если НЕ ОбщегоНазначенияВызовСервераПовтИсп.ЭтоERP() Тогда
				ДанныеИзмененийТипов.Вставить("РегистрСведенийНаборЗаписей.ПоврежденныеПакеты", ДанныеИзменений_ПоврежденныеПакеты(МассивЗначений));
			КонецЕсли;
		ИначеЕсли ТипДаннных = Тип("РегистрСведенийНаборЗаписей.ДвоичныеДанныеПрисоединенныхФайлов") и МассивЗначений.Количество()> 0  Тогда
			ДанныеИзмененийТипов.Вставить("РегистрСведенийНаборЗаписей.ДвоичныеДанныеПрисоединенныхФайлов", ДанныеИзменений_ДвоичныеДанныеПрисоединенныхФайлов(МассивЗначений));
		ИначеЕсли ТипДаннных = Тип("РегистрСведенийНаборЗаписей.ОстаткиПакетовНаСкладах") и МассивЗначений.Количество()> 0  Тогда
			ДанныеИзмененийТипов.Вставить("РегистрСведенийНаборЗаписей.ОстаткиПакетовНаСкладах", ДанныеИзменений_ОстаткиПакетовНаСкладах(МассивЗначений));
		КонецЕсли;
	КонецЦикла;
	Возврат ДанныеИзмененийТипов;
КонецФункции

Процедура ПривестиСтруктуруКСериализуемомуВиду(СтруктураДанных)
	Для Каждого м из СтруктураДанных Цикл
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(м.Значение)) Тогда
			СтруктураДанных.Вставить(м.Ключ, м.Значение.УникальныйИдентификатор());	
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Функция ДанныеИзменений_ПоврежденныеПакеты(МассивЗначений) Экспорт
	ДанныеИзменений = Новый Массив;
	Для Каждого стр из МассивЗначений Цикл
		Если Не ЗначениеЗаполнено(стр.Склад) Тогда
			стр.Склад = стр.Склад.ИмяПредопределенногоПУ;
		КонецЕсли;
		
		ПривестиСтруктуруКСериализуемомуВиду(стр);
		
		ДанныеИзменений.Добавить(стр);	
		
	КонецЦикла;

	Возврат ДанныеИзменений;
КонецФункции

Функция ДанныеИзменений_ДвоичныеДанныеПрисоединенныхФайлов(МассивЗначений) Экспорт
	ДанныеИзменений = Новый Массив;
	Для Каждого стр из МассивЗначений Цикл
		ПривестиСтруктуруКСериализуемомуВиду(стр);
		ДанныеИзменений.Добавить(стр);	
	КонецЦикла;
	
	Возврат ДанныеИзменений;
КонецФункции 

Функция ДанныеИзменений_ОстаткиПакетовНаСкладах(МассивЗначений) Экспорт
	ДанныеИзменений = Новый Массив;
	Для Каждого стр из МассивЗначений Цикл
		ПривестиСтруктуруКСериализуемомуВиду(стр);
		ДанныеИзменений.Добавить(стр);	
	КонецЦикла;
	
	Возврат ДанныеИзменений;
КонецФункции

Функция ПолучитьИзмененияУзлаПУ(УзелПО = НЕОПРЕДЕЛЕНО) Экспорт
	
	ДанныеИзменений = Новый Структура("НомерСообщения,Данные");
	Если ТранзакцияАктивна() Тогда
		Возврат ДанныеИзменений;
	КонецЕсли;
	
	Если УзелПО = НЕОПРЕДЕЛЕНО Тогда
		УзелПО = МобильноеПриложениеСкладПУ.ПолучитьСоздатьУзелПланаОбменаПУ();
	КонецЕсли;
	СоотвТиповИзменений = Новый Соответствие;

	Попытка;
		ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
		Запись = Новый ЗаписьXML;
		ПотокЗаписи = Новый ПотокВПамяти;
		Запись.ОткрытьПоток(ПотокЗаписи);
		ЗаписьСообщения.НачатьЗапись(Запись, УзелПО);
		ДанныеИзменений.Вставить("НомерСообщения", ЗаписьСообщения.НомерСообщения);
		
		Запрос = Новый Запрос; 
		Запрос.УстановитьПараметр("МассивСкладов", ОбщегоНазначенияВызовСервераПовтИсп.МассивСкладов());
		Запрос.УстановитьПараметр("Узел", ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ().УзелПланаОбмена);
		Запрос.Текст=
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОстаткиПакетовНаСкладахИзменения.НомерПакета КАК НомерПакета,
		|	ОстаткиПакетовНаСкладахИзменения.Склад КАК Склад
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	РегистрСведений.ОстаткиПакетовНаСкладах.Изменения КАК ОстаткиПакетовНаСкладахИзменения
		|ГДЕ
		|	ОстаткиПакетовНаСкладахИзменения.Склад В(&МассивСкладов)
		|	И ОстаткиПакетовНаСкладахИзменения.Узел = &Узел
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПакетовНаСкладахИзменения.НомерПакета,
		|	ОстаткиПакетовНаСкладахИзменения.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоврежденныеПакетыИзменения.Пакет КАК Пакет,
		|	ПоврежденныеПакетыИзменения.ИдентификаторЗаписи КАК ИдентификаторЗаписи
		|ПОМЕСТИТЬ вт_Повр
		|ИЗ
		|	РегистрСведений.ПоврежденныеПакеты.Изменения КАК ПоврежденныеПакетыИзменения
		|ГДЕ
		|	ПоврежденныеПакетыИзменения.Склад В(&МассивСкладов)
		|	И ПоврежденныеПакетыИзменения.Узел = &Узел
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиПакетовНаСкладах.Склад.ИмяПредопределенногоПУ КАК Склад,
		|	ОстаткиПакетовНаСкладах.НомерПакета КАК НомерПакета,
		|	ОстаткиПакетовНаСкладах.Ячейка КАК Ячейка,
		|	ОстаткиПакетовНаСкладах.Ряд КАК Ряд,
		|	ОстаткиПакетовНаСкладах.Уровень КАК Уровень,
		|	ОстаткиПакетовНаСкладах.Номер КАК Номер,
		|	ОстаткиПакетовНаСкладах.ВремяСобытия КАК ВремяСобытия
		|ИЗ
		|	вт КАК вт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиПакетовНаСкладах КАК ОстаткиПакетовНаСкладах
		|		ПО вт.Склад = ОстаткиПакетовНаСкладах.Склад
		|			И вт.НомерПакета = ОстаткиПакетовНаСкладах.НомерПакета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоврежденныеПакеты.Склад.ИмяПредопределенногоПУ КАК Склад,
		|	ПоврежденныеПакеты.Пакет КАК Пакет,
		|	ПоврежденныеПакеты.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
		|	ПоврежденныеПакеты.Комментарий КАК Комментарий,
		|	ПоврежденныеПакеты.Фото КАК Фото,
		|	ПоврежденныеПакеты.ДанныеПовреждений КАК ДанныеПовреждений,
		|	ПоврежденныеПакеты.Исправлено КАК Исправлено,
		|	ПоврежденныеПакеты.ВыгруженПУ КАК ВыгруженПУ,
		|	ПоврежденныеПакеты.Номер КАК Номер,
		|	ПоврежденныеПакеты.ДатаОбнаружения КАК ДатаОбнаружения
		|ИЗ
		|	вт_Повр КАК вт_Повр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоврежденныеПакеты КАК ПоврежденныеПакеты
		|		ПО вт_Повр.Пакет = ПоврежденныеПакеты.Пакет
		|			И вт_Повр.ИдентификаторЗаписи = ПоврежденныеПакеты.ИдентификаторЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвоичныеДанныеПрисоединенныхФайлов.ID_Ссылки КАК ID_Ссылки,
		|	ДвоичныеДанныеПрисоединенныхФайлов.ТипВладельца КАК ТипВладельца,
		|	ДвоичныеДанныеПрисоединенныхФайлов.Наименование КАК Наименование,
		|	ДвоичныеДанныеПрисоединенныхФайлов.ID_Файла КАК ID_Файла,
		|	ДвоичныеДанныеПрисоединенныхФайлов.Расширение КАК Расширение,
		|	ДвоичныеДанныеПрисоединенныхФайлов.Base64 КАК Base64,
		|	ДвоичныеДанныеПрисоединенныхФайлов.Описание КАК Описание
		|ИЗ
		|	РегистрСведений.ДвоичныеДанныеПрисоединенныхФайлов.Изменения КАК ДвоичныеДанныеПрисоединенныхФайловИзменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДвоичныеДанныеПрисоединенныхФайлов КАК ДвоичныеДанныеПрисоединенныхФайлов
		|		ПО ДвоичныеДанныеПрисоединенныхФайловИзменения.ID_Ссылки = ДвоичныеДанныеПрисоединенныхФайлов.ID_Ссылки";
		Результат = Запрос.ВыполнитьПакет(); 
		ИзмененияПакетов = Результат.Получить(2).Выгрузить();
		ИзмененияПоврежденных = Результат.Получить(3).Выгрузить();
		ИзмененияФото = Результат.Получить(4).Выгрузить();
		
		Если ИзмененияПакетов.Количество()>0 Тогда
			СоотвТиповИзменений.Вставить(Тип("РегистрСведенийНаборЗаписей.ОстаткиПакетовНаСкладах"), ОбщегоНазначения.ТаблицаЗначенийВМассив(ИзмененияПакетов));	
		КонецЕсли;
		
		Если ИзмененияПоврежденных.Количество()>0 Тогда
			СоотвТиповИзменений.Вставить(Тип("РегистрСведенийНаборЗаписей.ПоврежденныеПакеты"), ОбщегоНазначения.ТаблицаЗначенийВМассив(ИзмененияПоврежденных));	
		КонецЕсли;
		
		Если ИзмененияФото.Количество()>0 Тогда
			СоотвТиповИзменений.Вставить(Тип("РегистрСведенийНаборЗаписей.ДвоичныеДанныеПрисоединенныхФайлов"), ОбщегоНазначения.ТаблицаЗначенийВМассив(ИзмененияФото));	
		КонецЕсли;
	Исключение
		ЗаписьСообщения.ЗакончитьЗапись();
		Запись.Закрыть(); 
		Возврат Новый Структура("НомерСообщения, Данные", ЗаписьСообщения.НомерСообщения, СоотвТиповИзменений);
	КонецПопытки;
	
	ЗаписьСообщения.ЗакончитьЗапись();
	Запись.Закрыть();  
	
	Возврат Новый Структура("НомерСообщения, Данные", ЗаписьСообщения.НомерСообщения, СоотвТиповИзменений);
КонецФункции

Процедура ОчиститьИзмененияУзлаПУ(ПараметрУдаления=НЕОПРЕДЕЛЕНО) Экспорт
	ПланыОбмена.УдалитьРегистрациюИзменений(ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ().УзелПланаОбмена, ПараметрУдаления);
КонецПроцедуры
