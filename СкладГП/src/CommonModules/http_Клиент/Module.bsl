Асинх Функция get_Асинх(Адрес, HTTPСоединение = Неопределено, ДанныеТела = Неопределено, ДанныеАвторизации = Неопределено, ИмяВыходногоФайла = НЕОПРЕДЕЛЕНО, ДопЗаголовки = НЕОПРЕДЕЛЕНО) Экспорт
	Попытка
		Возврат ВыполнитьЗапрос_Клиент(Адрес, "GET", ДанныеТела, HTTPСоединение, ДанныеАвторизации,  ИмяВыходногоФайла, ДопЗаголовки);
	Исключение
		Возврат Неопределено;
	КонецПопытки
КонецФункции

Асинх Функция post_Асинх(Адрес, HTTPСоединение = Неопределено, ДанныеТела = Неопределено, ДанныеАвторизации = Неопределено, ИмяВыходногоФайла = НЕОПРЕДЕЛЕНО, ДопЗаголовки = НЕОПРЕДЕЛЕНО) Экспорт
	Попытка
		Возврат ВыполнитьЗапрос_Клиент(Адрес, "POST", ДанныеТела, HTTPСоединение, ДанныеАвторизации,  ИмяВыходногоФайла, ДопЗаголовки);
	Исключение
		Возврат Неопределено;
	КонецПопытки
КонецФункции

Асинх Функция ВыполнитьЗапрос_Клиент(Адрес, HTTPМетод, ДанныеТела=НЕОПРЕДЕЛЕНО, HTTPСоединение = Неопределено, Знач ДанныеАвторизации = Неопределено, ИмяВыходногоФайла = НЕОПРЕДЕЛЕНО, ДопЗаголовки = НЕОПРЕДЕЛЕНО) 
	
	Если ДанныеАвторизации = Неопределено Тогда
		ДанныеАвторизации = http_ПовтИсп.ДанныеАвторизации();	
	КонецЕсли;
	
	Если HTTPСоединение = Неопределено Тогда
		СвойстваСоединения = http_ВызовСервера.СвойстваСоединения(ДанныеАвторизации);
		HTTPСоединение = Новый HTTPСоединение(СвойстваСоединения.Сервер, , СвойстваСоединения.Логин, СвойстваСоединения.Пароль, ,СвойстваСоединения.ЗащищСоединение);
		HTTPСоединение.Прокси.НеИспользоватьПроксиДляАдресов.Добавить(СвойстваСоединения.Сервер);
	КонецЕсли;
	
	//гео 
	Если ДанныеГеоПозиции = Неопределено Тогда
		ГеопозиционированиеКлиент.ДанныеГеоПозиции_Инициализация();
	КонецЕсли; 
	
	HTTPЗапрос = НовыйHTTPЗапрос(Адрес, ДанныеАвторизации.Логин, ДопЗаголовки);
	
	Если Не ДанныеТела = НЕОПРЕДЕЛЕНО  и ЗначениеЗаполнено(ДанныеТела) Тогда
		Если ТипЗнч(ДанныеТела) = Тип("Строка")  Тогда
			HTTPЗапрос.УстановитьТелоИзСтроки(ДанныеТела);
		Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(json_ВызовСервера.ЗаписатьВСтрокуJSON_СериализаторXDTO(ДанныеТела));
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Ответ = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос, ИмяВыходногоФайла);
		Если Ответ.КодСостояния = 301 или Ответ.КодСостояния = 302 Тогда
			АдресПереадресации	 = Ответ.Заголовки.Получить("Location");
			КукиПереадресации	 = Ответ.Заголовки.Получить("Set-Cookie");
			Если НЕ КукиПереадресации = Неопределено Тогда
				Если ДопЗаголовки = Неопределено Тогда
					ДопЗаголовки = Новый Соответствие;	
				КонецЕсли;
				ДопЗаголовки.Вставить("Set-Cookie", КукиПереадресации);	
			КонецЕсли;
			
			Нов = http_ВызовСервера.РазобратьАдрес(АдресПереадресации);
			ДанныеАвторизации.Путь = Нов.Сервер;
			HTTPЗапрос = НовыйHTTPЗапрос(Нов.Адрес, ДанныеАвторизации.Логин, ДопЗаголовки);
			
			Ответ = ВыполнитьЗапрос_Клиент(Нов.Адрес, HTTPМетод, ДанныеТела, Неопределено, ДанныеАвторизации, ИмяВыходногоФайла, ДопЗаголовки);
		КонецЕсли;
		
	Исключение
		Ответ = Неопределено	
	КонецПопытки;
	
	Возврат Ответ;
КонецФункции

Функция НовыйHTTPЗапрос(Адрес, Логин, Заголовки = НЕОПРЕДЕЛЕНО) Экспорт
	
	Если Заголовки = Неопределено Тогда
		Заголовки = Новый Соответствие;
	КонецЕсли;
	ТипКодировки = http_ВызовСервера.ТипКодировки();
	Заголовки.Вставить("Content-Type", "charset="+ТипКодировки);
	
	Для Каждого м из http_ПовтИсп.ЗаголовкиЗапроса() Цикл
		Заголовки.Вставить(м.Ключ, http_ВызовСервера.Строка_вURL(м.Значение, ТипКодировки));	
	КонецЦикла;
	Заголовки.Вставить("Geo_location", ДанныеГеоПозиции.ТекущееМестоположение);
	
	Заголовки.Вставить("Login", http_ВызовСервера.Строка_вURL(Логин, ТипКодировки));	
	
	Запрос = Новый HTTPЗапрос(Адрес, Заголовки);
		
	Возврат Запрос;	
	
КонецФункции

Функция ТипКодировки(ЗапросОтвет = Неопределено) Экспорт
	КодировкаУмолч = "utf-8";
	Если ЗапросОтвет = Неопределено Тогда Возврат КодировкаУмолч КонецЕсли;
	
	ОписаниеКодировки = ЗапросОтвет.Заголовки.Получить("Content-Type");
	Если ОписаниеКодировки = Неопределено Тогда
		Возврат КодировкаУмолч;
	Иначе
		м_Content_Type = СтрРазделить(ОписаниеКодировки, ";");
		Для Каждого м из м_Content_Type Цикл
			т = СокрЛП(м);
			Если Лев(т, 7) = "charset" Тогда
				Возврат Сред(т, 9);
			КонецЕсли;
		КонецЦикла;
		Возврат КодировкаУмолч	
	КонецЕсли;
КонецФункции

Функция ИзвлечьДанныеИзОтветаСервера(Ответ) Экспорт
	Кодировка = ТипКодировки(Ответ);
	ТипОтвета = Ответ.Заголовки.Получить("Accept-Encoding");
	СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку(Кодировка);
	
	Возврат http_ВызовСервера.ИзвлечьДанныеИзСтрокиОтветаСервера(СтрокаОтвета, ТипОтвета)
	
КонецФункции

Асинх Функция ЕстьСвязь(СброситьСостояние = ЛОЖЬ) Экспорт
	Если СброситьСостояние Тогда
	Иначе
		//Не проверяем если времени прошло меньше 10 сек   
		Если ДатаВремяСвязьПроверилиУспешно = Неопределено Тогда
			ДатаВремяСвязьПроверилиУспешно = Дата(1,1,1);
		КонецЕсли;
		//@skip-check use-non-recommended-method
		Если ТекущаяДата() - ДатаВремяСвязьПроверилиУспешно < 10 Тогда
			Возврат ЕстьСвязь; //ИСТИНА
		КонецЕсли;  
	КонецЕсли;
	ДанныеПинга = ОбщегоНазначенияКлиентПовтИсп.ДанныеПинга();
	Попытка
		Соединение = Новый HTTPСоединение(ДанныеПинга.АдресДляPing,,,,,ДанныеПинга.Таймаут, ?(ДанныеПинга.https, Новый ЗащищенноеСоединениеOpenSSL, НЕОПРЕДЕЛЕНО));
		Ответ = Ждать Соединение.ПолучитьАсинх(Новый HTTPЗапрос);
		//@skip-check use-non-recommended-method
		ДатаВремяСвязьПроверилиУспешно = ТекущаяДата();
		Возврат Ответ.КодСостояния = 200
	Исключение
		ДатаВремяСвязьПроверилиУспешно = Неопределено;
		Возврат ЛОЖЬ
	КонецПопытки;
КонецФункции
