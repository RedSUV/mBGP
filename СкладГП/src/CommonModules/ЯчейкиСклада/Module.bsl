Функция НовоеРазмещениеПакета() Экспорт
	
	НовоеРазмещение = Новый Структура();
	НовоеРазмещение.Вставить("Period", ТекущаяДата());
	НовоеРазмещение.Вставить("НомерПакета", Новый УникальныйИдентификатор);
	НовоеРазмещение.Вставить("Ячейка", Справочники.Ячейки.ПустаяСсылка());
	НовоеРазмещение.Вставить("Ряд", 0);
	НовоеРазмещение.Вставить("Уровень", 0);
	НовоеРазмещение.Вставить("ДанныеПогрузчика", ОбщегоНазначенияВызовСервераПовтИсп.УзелПУ_id());
	НовоеРазмещение.Вставить("ВремяСобытия", ТекущаяДата());
	НовоеРазмещение.Вставить("Документ", НЕОПРЕДЕЛЕНО);  
	Возврат НовоеРазмещение;
КонецФункции

Функция НоваяТаблицаРазмещенийПакетов() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "Выбрать * Из РегистрСведений.ОстаткиПакетовНаСкладах Где ЛОЖЬ";
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Процедура ДобавитьСтрокуТаблицыРазмещенияПакетов(Таблица, ПакетID, Ячейка, Ряд, Уровень, НомерПакета = "") Экспорт
	Нов = Таблица.Добавить();
	Нов.Склад = ОбщегоНазначенияВызовСервераПовтИсп.Склад();
	Нов.НомерПакета = ПакетID;
	Нов.Ячейка = Ячейка;
	Нов.Ряд = Ряд;
	Нов.Уровень = Уровень;
	Нов.Номер = НомерПакета;
	Нов.ВремяСобытия = ТекущаяДата();
КонецПроцедуры

Функция ПривестиДанныеКСериализуемомуВиду(НаборДанных) Экспорт 
	ТипНабора = ТипЗнч(НаборДанных);
	Если ТипНабора = Тип("Массив") Тогда
		Ответ = Новый Массив;
	Иначе
		Ответ = Новый Структура;
	КонецЕсли;
	Для Каждого м из НаборДанных Цикл
		мТипЗначения = ТипЗнч(м.Значение);
		Если ТипНабора = Тип("Массив") Тогда 
			Для Каждого стр из НаборДанных Цикл 
				Ответ.Добавить(ПривестиДанныеКСериализуемомуВиду(стр))
			КонецЦикла;
		Иначе
			Если Справочники.ТипВсеСсылки().СодержитТип(мТипЗначения)
				или мТипЗначения = Тип("УникальныйИдентификатор") Тогда
				Ответ.Вставить(""+м.Ключ+"_Key", XMLСтрока(м.Значение));
				
				Если мТипЗначения = ТИП("СправочникСсылка.Склады") Тогда 
					Если ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ().ЭтоERP Тогда
						Ответ.Вставить(""+м.Ключ+"_Key", XMLСтрока(м.Значение.ИмяПредопределенногоПУ));	
					Иначе
						Ответ.Вставить(""+м.Ключ, XMLСтрока(м.Значение.ИмяПредопределенногоПУ));
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли мТипЗначения = Тип("ХранилищеЗначения") Тогда
				Ответ.Вставить(""+м.Ключ+"_Base64Data", XMLСтрока(м.Значение));
				Ответ.Вставить(""+м.Ключ+"_Type", "application/octet-stream");
				
			ИначеЕсли мТипЗначения = Тип("Число") Тогда
				Ответ.Вставить(""+м.Ключ+"",м.Значение);	
				
			ИначеЕсли мТипЗначения = Тип("Дата") Тогда
				Ответ.Вставить(""+м.Ключ+"",м.Значение);	
				
			ИначеЕсли мТипЗначения = Тип("Массив") Тогда 
				Ответ.Вставить(""+м.Ключ+"", ПривестиДанныеКСериализуемомуВиду(м.Значение));
			Иначе
				Ответ.Вставить(""+м.Ключ+"",XMLСтрока(м.Значение));
			КонецЕсли;
			
		КонецЕсли;
		
			КонецЦикла;
	Возврат Ответ;
КонецФункции

Процедура ПопробоватьОтправитьИзмененияПакетовПУ_Фоном() Экспорт
	Запрос = Новый Запрос;
	Узел = ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ().УзелПланаОбмена;
	Запрос.УстановитьПараметр("Узел", Узел);	
	Запрос.УстановитьПараметр("Склады", ОбщегоНазначенияВызовСервераПовтИсп.МассивСкладов());	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОстаткиПакетовНаСкладах.НомерПакета КАК НомерПакета,
	|	ОстаткиПакетовНаСкладах.Склад КАК Склад
	|ПОМЕСТИТЬ м
	|ИЗ
	|	РегистрСведений.ОстаткиПакетовНаСкладах.Изменения КАК ОстаткиПакетовНаСкладах
	|ГДЕ
	|	ОстаткиПакетовНаСкладах.Узел = &Узел
	|	И ОстаткиПакетовНаСкладах.Склад В (&Склады)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПакетовНаСкладах.НомерПакета КАК НомерПакета,
	|	ОстаткиПакетовНаСкладах.Объем КАК Объем,
	|	ОстаткиПакетовНаСкладах.Досок КАК Досок,
	|	ОстаткиПакетовНаСкладах.Ячейка КАК Ячейка,
	|	ОстаткиПакетовНаСкладах.Ряд КАК Ряд,
	|	ОстаткиПакетовНаСкладах.Уровень КАК Уровень,
	|	ОстаткиПакетовНаСкладах.Номер КАК Номер,
	|	ОстаткиПакетовНаСкладах.Склад КАК Склад,
	|	ОстаткиПакетовНаСкладах.ВремяСобытия КАК ВремяСобытия
	|ИЗ
	|	м КАК м
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиПакетовНаСкладах КАК ОстаткиПакетовНаСкладах
	|		ПО м.НомерПакета = ОстаткиПакетовНаСкладах.НомерПакета
	|			И м.Склад = ОстаткиПакетовНаСкладах.Склад";
	
	МассивДанных = ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
	УспехОнлайнВыгрузки = ЯчейкиСклада.ВыполнитьРазмещениеПакетовВПУ(МассивДанных, "");
	Если УспехОнлайнВыгрузки Тогда 
		Для Каждого стр из МассивДанных Цикл
			НЗ = РегистрыСведений.ОстаткиПакетовНаСкладах.СоздатьНаборЗаписей();
			НЗ.Отбор.Склад.Установить(стр.Склад);
			НЗ.Отбор.НомерПакета.Установить(стр.НомерПакета);
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НЗ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьРазмещениеПакетовВПУ(ДанныеЗаполнения, ТекстОшибки = "", ПроверятьСвязь = ИСТИНА) Экспорт
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	ДанныеТела = Новый Массив;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Массив") Тогда
		Для Каждого стрДанных из ДанныеЗаполнения Цикл
			ДанныеТела.Добавить(ПривестиДанныеКСериализуемомуВиду(стрДанных));	
		КонецЦикла; 
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("РегистрСведенийНаборЗаписей.ОстаткиПакетовНаСкладах") Тогда
		Для Каждого стрДанных из ДанныеЗаполнения.Выгрузить() Цикл
			ДанныеТела.Добавить(ПривестиДанныеКСериализуемомуВиду(стрДанных));	
		КонецЦикла; 	
	Иначе
		ДанныеТела.Добавить(ПривестиДанныеКСериализуемомуВиду(ДанныеЗаполнения));	
	КонецЕсли;
	
	Если ПроверятьСвязь Тогда
		Выгружать = http.ЕстьСвязь();
	Иначе
		Выгружать = ИСТИНА;		
	КонецЕсли;
	
	Если Выгружать Тогда
		Ответ = http.post("/hs/ma_bgp/set_packets", ДанныеТела); 
		Если Ответ = Неопределено Тогда
			ТекстОшибки = "Нет связи с ПУ";
			Возврат ЛОЖЬ;	
		ИначеЕсли Ответ.КодСостояния = 200 Тогда
			Возврат ИСТИНА;
		Иначе
			ТекстОшибки = Ответ.ПолучитьТелоКакСтроку();
			Возврат ЛОЖЬ;
		КонецЕсли;
	Иначе
		Возврат ЛОЖЬ	
	КонецЕсли;
		
КонецФункции

Процедура ВывестиПредставлениеШтабеляНаФорму(Форма, ШиринаЭкрана = 1080, Обратная = ЛОЖЬ) Экспорт
	Элементы = Форма.Элементы;
	РядыЯчейки = Форма.РядыЯчейки;
	ГоризонтальноПакетовНаФорме	 = Форма.ГоризонтальноПакетовНаФорме;
	КоличествоУровнейЯчейки		 = Форма.КоличествоУровнейЯчейки;
	
	ЕстьПакетыБезРядов = (Не Элементы.Найти("ПакетыБезРядов") = Неопределено);
	//ОчисткаПодчиненных
	Пока Элементы.СтраницыРядов.ПодчиненныеЭлементы.Количество()>0 Цикл
		Элементы.Удалить(Элементы.СтраницыРядов.ПодчиненныеЭлементы[0]);
	КонецЦикла; 
	Если ЕстьПакетыБезРядов Тогда
		Пока Элементы.ПакетыБезРядов.ПодчиненныеЭлементы.Количество()>0 Цикл
			Элементы.Удалить(Элементы.ПакетыБезРядов.ПодчиненныеЭлементы[0]);
		КонецЦикла;
		ПакетыБезРядов = Форма.ПакетыБезРядов;
	КонецЕсли;
	
	МассивКомандКУдалению = Новый Массив;
	Для Каждого мКоманда из Форма.Команды Цикл 
		Для Каждого мСуф из Форма.СуффиксыДобавленныхКоманд() Цикл
			Если СтрНайти(мКоманда.Имя, мСуф.Ключ) > 0 Тогда
				МассивКомандКУдалению.Добавить(мКоманда);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла; 
	Для Каждого мКоманда из МассивКомандКУдалению Цикл
		Форма.Команды.Удалить(мКоманда)	
	КонецЦикла;
	
	//Вывод рядов ячейки
	мРяды = Новый СписокЗначений;
	Для Каждого стр из РядыЯчейки Цикл 
		Если мРяды.НайтиПоЗначению(стр.Ряд) = Неопределено Тогда
			мРяды.Добавить(стр.Ряд);
		КонецЕсли;
	КонецЦикла; 
	мРяды.СортироватьПоЗначению(?(Обратная, НаправлениеСортировки.Убыв, НаправлениеСортировки.Возр));
	ВсегоСтраницОжидается = Цел(мРяды.Количество()/ГоризонтальноПакетовНаФорме)+1; 
	инд = 1;
	Для Каждого м из мРяды Цикл
		НомерРяда = м.Значение; 
		РезультатДеления = инд/ГоризонтальноПакетовНаФорме;
		НомерСтраницы = ?(РезультатДеления = Цел(РезультатДеления), РезультатДеления, Цел(РезультатДеления)+1);
		СтраницаРядов = ЭлементФормыСтраницаПакетовРядаЯчейки(Элементы, НомерСтраницы);
		ГруппаРяда = ЭлементФормыГруппаПакетовРядаЯчейки(Элементы, НомерРяда, СтраницаРядов); 
		инд = инд + 1;
	КонецЦикла;
	
	ШиринаКартинкиПакета = Цел(ШиринаЭкрана/96/ГоризонтальноПакетовНаФорме);
	Для Каждого м из мРяды Цикл 
		ГруппаРяда = ЭлементФормыГруппаПакетовРядаЯчейки(Элементы, м.Значение);
		
		Для инд = 1 по КоличествоУровнейЯчейки Цикл
			Уровень = КоличествоУровнейЯчейки-инд+1;
			СтрокиПакетовРяда = РядыЯчейки.НайтиСтроки(Новый Структура("Ряд,Уровень", м.Значение, Уровень));
			Если СтрокиПакетовРяда.Количество() > 0 Тогда
				стр = СтрокиПакетовРяда[0];
				Если ЗначениеЗаполнено(стр.Пакет) и Не ПакетНаВилах(Форма.ПакетыНаВилах, стр.ПакетID)  Тогда
					СтильПакета = СтильДекорацииОбычныйПакет();
				Иначе
					СтильПакета = СтильДекорацииПустойПакет();
				КонецЕсли;
				
				КартинкаПакета = ЭлементФормыПакета(Форма, Элементы, ГруппаРяда, стр.Пакет,, "ПакетВЯчейке", стр, стр.ОписаниеПакета, СтильПакета);	
				КартинкаПакета.Ширина = ШиринаКартинкиПакета;
			Иначе 
				а=1;	
			КонецЕсли
		КонецЦикла;
		
	КонецЦикла;
	
	//Без Рядов
	Если ЕстьПакетыБезРядов Тогда
		СчетчикПакетов = 0;
		ГоризонтальноПакетовНаФормеБезРядов = ГоризонтальноПакетовНаФорме + 1;
		СчетчикСтраниц = 0;
		ТекущаяСтраница = НЕОПРЕДЕЛЕНО;
		ШиринаКартинкиПакетаБезРядов = Цел(ШиринаЭкрана/96/ГоризонтальноПакетовНаФормеБезРядов);
		
		Для Каждого стр из ПакетыБезРядов Цикл 
			Если ТекущаяСтраница = НЕОПРЕДЕЛЕНО или СчетчикПакетов >= ГоризонтальноПакетовНаФормеБезРядов Тогда
				СчетчикСтраниц = СчетчикСтраниц + 1;
				СчетчикПакетов = 0;
				ТекущаяСтраница =  Элементы.Добавить("ПакетыБезРядов_Ряд"+СчетчикСтраниц, Тип("ГруппаФормы"), Элементы.ПакетыБезРядов); 
				ТекущаяСтраница.Вид = ВидГруппыФормы.Страница;
				ТекущаяСтраница.Заголовок = "";//+СчетчикСтраниц;
				ТекущаяСтраница.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
				ТекущаяСтраница.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
				ТекущаяСтраница.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
			КонецЕсли;
			КартинкаПакета = ЭлементФормыПакета(Форма, Элементы, ТекущаяСтраница, стр.Пакет, , "ПакетБезРяда", стр, стр.ОписаниеПакета, СтильДекорацииОбычныйПакет());	
			КартинкаПакета.Ширина = ШиринаКартинкиПакетаБезРядов;
			СчетчикПакетов = СчетчикПакетов + 1;
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

Функция ЭлементФормыСтраницаПакетовРядаЯчейки(Элементы, НомерСтраницы)
	
	СтрокаНомераСтраницы = Формат(НомерСтраницы, "ЧГ=0");
	ЭлементФормы = Элементы.Найти("Страницы_Ряд"+СтрокаНомераСтраницы);
	Если ЭлементФормы = Неопределено Тогда
		ЭлементФормы =  Элементы.Добавить("Страницы_Ряд"+СтрокаНомераСтраницы, Тип("ГруппаФормы"), Элементы.СтраницыРядов);
		ЭлементФормы.Вид = ВидГруппыФормы.Страница;
		ЭлементФормы.Заголовок = "Стр "+СтрокаНомераСтраницы;
		ЭлементФормы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	КонецЕсли;
	ЭлементФормы.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Верх; 
	ЭлементФормы.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	ЭлементФормы.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	ЭлементФормы.ОтображатьЗаголовок = ЛОЖЬ;
	
	Возврат ЭлементФормы;
КонецФункции

Функция ЭлементФормыГруппаПакетовРядаЯчейки(Элементы, НомерРяда, РодительРяда = НЕОПРЕДЕЛЕНО)

	СтрокаНомера = Формат(НомерРяда, "ЧГ=0");
	ГруппаФормыРяд = ЭлементФормыГруппа(Элементы, "Группа_Ряд"+СтрокаНомера, РодительРяда, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, ИнтервалМеждуЭлементамиФормы.Нет, ИнтервалМеждуЭлементамиФормы.Нет);
	ГруппаФормыРяд.Заголовок = "Ряд "+СтрокаНомера;
	ГруппаФормыРяд.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаФормыРяд.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаФормыРяд.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	ГруппаФормыРяд.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	ГруппаФормыРяд.Ширина = 20; 
	ГруппаФормыРяд.Объединенная = ИСТИНА;
	ГруппаФормыРяд.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Верх; 
	
	ИмяДекорацииЗаголовка = "Заг_"+ГруппаФормыРяд.Имя;
	элЗаголовокРяда = ГруппаФормыРяд.ПодчиненныеЭлементы.Найти(ИмяДекорацииЗаголовка);
	Если элЗаголовокРяда  = Неопределено Тогда
		элЗаголовокРяда = Элементы.Добавить("Заг_"+ГруппаФормыРяд.Имя, Тип("ДекорацияФормы"), ГруппаФормыРяд);
	КонецЕсли;
	элЗаголовокРяда.Вид = ВидДекорацииФормы.Надпись;
	элЗаголовокРяда.Заголовок = ГруппаФормыРяд.Заголовок;
	элЗаголовокРяда.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;

	элЗаголовокРяда.ЦветТекста = WebЦвета.ТемноЗеленый;
	элЗаголовокРяда.Высота = 1;
	элЗаголовокРяда.МаксимальнаяВысота = 1;
	элЗаголовокРяда.АвтоМаксимальнаяВысота = ЛОЖЬ;
	
	элЗаголовокРяда.РастягиватьПоВертикали = Ложь;
	элЗаголовокРяда.РастягиватьПоГоризонтали = ИСТИНА;
	элЗаголовокРяда.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр; 
	элЗаголовокРяда.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 0);
	
	Возврат ГруппаФормыРяд;
КонецФункции

Функция ЭлементФормыГруппа(Элементы, ИмяГруппы, РодительГруппы = НЕОПРЕДЕЛЕНО, Группировка, ВертикальныйИнтервал = НЕОПРЕДЕЛЕНО, ГоризонтальныйИнтервал = НЕОПРЕДЕЛЕНО, Ширина = НЕОПРЕДЕЛЕНО)

	ГруппаФормы = Элементы.Найти(ИмяГруппы);
	Если ГруппаФормы = Неопределено Тогда
		ГруппаФормы =  Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), РодительГруппы); 
		ГруппаФормы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаФормы.Группировка = Группировка;
		Если Не ВертикальныйИнтервал = НЕОПРЕДЕЛЕНО Тогда 
			ГруппаФормы.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		КонецЕсли;
		Если Не ГоризонтальныйИнтервал = НЕОПРЕДЕЛЕНО Тогда
			ГруппаФормы.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		КонецЕсли;
		Если НЕ Ширина = Неопределено Тогда
			ГруппаФормы.Ширина = Ширина;
		КонецЕсли;
	КонецЕсли;
	ГруппаФормы.ОтображатьЗаголовок = ЛОЖЬ;
	ГруппаФормы.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаФормы.РастягиватьПоГоризонтали = ИСТИНА;
	ГруппаФормы.РастягиватьПоВертикали = ИСТИНА;
	ГруппаФормы.Объединенная = ИСТИНА;
	Возврат ГруппаФормы;
КонецФункции

Функция ЭлементФормыПакета(Форма, Элементы, ЭлементРодитель, Пакет, ВставитьПередЭлементом = НЕОПРЕДЕЛЕНО, МестоПакета = "ПакетВЯчейке", СтрокаТаблицы, ОписаниеПакета = "", СтруктураОформления = НЕОПРЕДЕЛЕНО) Экспорт
	
	Если Форма.ГоризонтальноПакетовНаФорме<3 Тогда
		ВысотаКартинки = 2;
	Иначе
		ВысотаКартинки = 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Пакет) Тогда
		ИмяЭлемента = "гп_"+ Пакет;
		//ВысотаКартинки = 2;
	Иначе 
		Для инд = 1 по 200 Цикл 
			ИмяЭлемента = "гп_Пустой"+инд; 	
			Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	м = Элементы.Найти(ИмяЭлемента);
	Если м = Неопределено Тогда
		м = Элементы.Вставить(ИмяЭлемента, Тип("ДекорацияФормы"), ЭлементРодитель); 
	Иначе
		Элементы.Переместить(м, ЭлементРодитель);
	КонецЕсли;

	НастроитьДекорациюПакета(Элементы, м, Пакет, ВысотаКартинки, ОписаниеПакета, СтруктураОформления, СтрокаТаблицы.Состояние, СтрокаТаблицы.Назначение);
	
	СтрокаТаблицы.ИмяЭлементаФормы = ИмяЭлемента;
	
	Форма.УстановитьДействияПакета(м, МестоПакета, СтрокаТаблицы); 
	
	Возврат м
КонецФункции 

Процедура НастроитьДекорациюПакета(Элементы, ЭлДекорация, Пакет, ВысотаКартинки = 2, ОписаниеПакета = "", СтруктураОформления = НЕОПРЕДЕЛЕНО, СостояниеПакета = 1, Назначение = НЕОПРЕДЕЛЕНО) Экспорт
	
	ЭлДекорация.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	ЭлДекорация.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
	
	ЭлДекорация.Ширина = 30;
	
	ЭлДекорация.Высота = ВысотаКартинки;
	ЭлДекорация.МаксимальнаяВысота = ?(ВысотаКартинки = 1, 1, ВысотаКартинки+1);
	
	ЭлДекорация.Гиперссылка = ИСТИНА; 
	
	ЭлДекорация.РастягиватьПоГоризонтали = ИСТИНА;
	
	ЭлДекорация.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
	
	Если ЗначениеЗаполнено(Пакет) Тогда
		Если ЭлДекорация.Высота = 1 Тогда
			ШаблонЗаголовка = "<b><font size=3>%1</font></b><font size=1> %2</font>";
		Иначе
			ШаблонЗаголовка = "<b><font size=3>%1</font></b><br><font size=1>%2</font>";
		КонецЕсли;
		Если СостояниеПакета = 1 Тогда
			СтруктураОформления = СтильДекорацииОбычныйПакет();
		ИначеЕсли СостояниеПакета = 2 Тогда
			СтруктураОформления = СтильДекорацииПакетРезерв();	
		ИначеЕсли СостояниеПакета = 3 Тогда
			СтруктураОформления = СтильДекорацииПакетЗапретОтгрузки();	
		КонецЕсли;
		ХтмлПакета = СтрШаблон(ШаблонЗаголовка, Пакет, ОписаниеПакета);
		Если ЗначениеЗаполнено(Назначение) Тогда
			ХтмлПакета = "<font size=2>("+Назначение+")</font> " + ХтмлПакета;
		КонецЕсли;
		
		ЗаголовокДекорации = ТекстHTMLВФорматированнуюСтроку(ХтмлПакета);
	Иначе         
		ЗаголовокДекорации = ТекстHTMLВФорматированнуюСтроку("<font size=1><i>--Пусто--</i></font>");
		СтруктураОформления = СтильДекорацииПустойПакет();
	КонецЕсли;
	
	ЭлДекорация.Заголовок					 = ЗаголовокДекорации; 
	ЭлДекорация.Подсказка					 = ЗаголовокДекорации; 
	
	Если СтруктураОформления = НЕОПРЕДЕЛЕНО Тогда
		УстановитьСтилиДекорацииСервер(Элементы, ЭлДекорация, СтильДекорацииОбычныйПакет());		
	Иначе
		УстановитьСтилиДекорацииСервер(Элементы, ЭлДекорация, СтруктураОформления);		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСтилиДекорацииСервер(Элементы, Знач элФормы, СтруктураСтиля) Экспорт
	Если ТипЗнч(элФормы) = Тип("Строка") Тогда 
		элФормы = Элементы.Найти(элФормы);
	КонецЕсли;
	Для Каждого ОписаниеСтиля из СтруктураСтиля Цикл
		элФормы[ОписаниеСтиля.Ключ] = ОписаниеСтиля.Значение;		
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьДействияПакета(Форма, Элементы, ЭлементПакета, МестоПакета = "ПакетВЯчейке", СтрокаТаблицы) Экспорт
	
	ЭлементПакета.УстановитьДействие("Нажатие",	"ПакетНажатие");
	УстановитьКонтекстноеМенюПакета(Форма, Элементы, ЭлементПакета, МестоПакета, СтрокаТаблицы) 	
	
КонецПроцедуры

Процедура УстановитьКонтекстноеМенюПакета(Форма, Элементы, ЭлементПакета, МестоПакета = "ПакетВЯчейке", СтрокаТаблицы) 
	Если МестоПакета = "ПакетВЯчейке" Тогда 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Пакет) Тогда 
			
			ДобавитьКомандуКонтекстногоМеню(Форма, Элементы, ЭлементПакета, "_ВыборПакета", "ПоказатьФормуВыбораПакета");
			
		Иначе
			
			ДобавитьКомандуКонтекстногоМеню(Форма, Элементы, ЭлементПакета, "_ЗабратьПакет", "ЗабратьПакетИзЯчейки"); 
			
		КонецЕсли;
	Иначе 
		
		ДобавитьКомандуКонтекстногоМеню(Форма, Элементы, ЭлементПакета, "_УстановитьПакетЯчейку", "УстановитьПакетЯчейку");
		
	КонецЕсли;
КонецПроцедуры 

Функция суффиксыДобавленныхКоманд() Экспорт
	суффиксы = Новый Структура();
	суффиксы.Вставить("_УстановитьПакетЯчейку",	 "Установить пакет в ячейку");
	суффиксы.Вставить("_ВыборПакета",			 "Установить пакет");
	суффиксы.Вставить("_ЗабратьПакет",			 "Забрать пакет");
	суффиксы.Вставить("_ОткрытьСвойства",		 "Свойства пакета");
	Возврат суффиксы;
КонецФункции

Процедура ДобавитьКомандуКонтекстногоМеню(Форма, Элементы, ЭлементПакета, суфиксКоманды, Действие) Экспорт
	
	мЗаголовокКоманды = Форма.СуффиксыДобавленныхКоманд()[суфиксКоманды];
	ИмяКоманды = ЭлементПакета.Имя + суфиксКоманды;
	НоваяКоманда = Форма.Команды.Найти(ИмяКоманды);
	Если НоваяКоманда = Неопределено Тогда
		НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды);
	КонецЕсли;
	НоваяКоманда.Заголовок = мЗаголовокКоманды;
	НоваяКоманда.Действие = Действие; 
	
	КомандаКонтекстногоМеню = Элементы.Найти(ИмяКоманды);
	Если КомандаКонтекстногоМеню = Неопределено Тогда
		КомандаКонтекстногоМеню = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы[ЭлементПакета.Имя+"КонтекстноеМеню"]);
	КонецЕсли;
	КомандаКонтекстногоМеню.ИмяКоманды = ИмяКоманды;
	КомандаКонтекстногоМеню.Заголовок = мЗаголовокКоманды;
	КомандаКонтекстногоМеню.Высота = 2;
	
	Если суфиксКоманды = "_ЗабратьПакет" //или суфиксКоманды = "_УдалитьИзЯчейки"
		Тогда
		КомандаКонтекстногоМеню.Картинка = БиблиотекаКартинок.Удалить;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеПакетаСтроки(СтрокаТаблицы, Выборка, СвойстваПакета)
	СтрокаТаблицы.Пакет = Выборка.НомерПакета;
	СтрокаТаблицы.ПакетID = Выборка.ПакетID;
	Если НЕ СвойстваПакета = Неопределено Тогда
		СтрокаТаблицы.Назначение = СвойстваПакета.Подсборка;
		СтрокаТаблицы.ОписаниеПакета = ОписаниеПакета(Выборка.ПакетID, СвойстваПакета);
		СтрокаТаблицы.Состояние = СвойстваПакета.Состояние
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьТаблицуРядыЯчейки(Форма, ВыбраннаяЯчейка, Локально = ЛОЖЬ) Экспорт
	Элементы = Форма.Элементы;
	КоличествоУровнейЯчейки = Форма.КоличествоУровнейЯчейки;
	
	РядыЯчейки = Форма.РядыЯчейки;
	РядыЯчейки.Очистить();
	
	ЕстьПакетыБезРядов = (Не Элементы.Найти("ПакетыБезРядов") = Неопределено);
	Если ЕстьПакетыБезРядов Тогда
		Форма.ПакетыБезРядов.Очистить();
	КонецЕсли;
	 
	МинимальныйРяд = 0;
	МаксимальныйРяд = 0;
	
	Если ЗначениеЗаполнено(ВыбраннаяЯчейка) Тогда
		
		ТаблицаОстатков = ПолучитьРезультатЗапросаОстатковЯчейки(ВыбраннаяЯчейка, Локально);
		Если ТаблицаОстатков = Неопределено Тогда Возврат КонецЕсли;
		
		Если Не Локально Тогда
			МассивЯчеек = Новый Массив;
			ЯчейкиСкладаВызовСервера.ОбновитьОстаткиЯчеекИзОтветаПУ(ТаблицаОстатков, МассивЯчеек);
		КонецЕсли;
		
		МассивПакетов = ТаблицаОстатков.ВыгрузитьКолонку("ПакетID");
		
		Для Каждого мПакетВил Из ПолучитьПакетыНаВилах() Цикл
			МассивПакетов.Добавить(мПакетВил);
		КонецЦикла;
		
		СвойстваПакетов = Пакеты.СвойстваМассиваПакетовМоб(МассивПакетов, Тип("УникальныйИдентификатор"));
		
		ТребуетсяОбмен = ЛОЖЬ;
		
		Если ЯчейкиСкладаВызовСервера.ЭтоШтабельИмеющийРядыУровни(ВыбраннаяЯчейка) Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТаблицаОстатков", ТаблицаОстатков);
			Запрос.Текст =
			"Выбрать * поместить вт из &ТаблицаОстатков как вт;
			|Выбрать * из вт ИТОГИ ПО Ряд";
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаРядов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаРядов.Следующий() Цикл                   
				Выборка = ВыборкаРядов.Выбрать();
				Пока Выборка.Следующий() Цикл
					СвойстваПакета = СвойстваПакетов.Получить(Выборка.ПакетID);
					Если Не ЗначениеЗаполнено(ВыборкаРядов.Ряд) Тогда 
						Если ЕстьПакетыБезРядов Тогда
							Нов = Форма.ПакетыБезРядов.Добавить(); 
							ЗаполнитьОписаниеПакетаСтроки(Нов, Выборка, СвойстваПакета);
						КонецЕсли;
					Иначе
						Нов = РядыЯчейки.Добавить(); 
						ЗаполнитьОписаниеПакетаСтроки(Нов, Выборка, СвойстваПакета);
						Нов.Ряд = ВыборкаРядов.Ряд;
						Нов.Уровень = Выборка.Уровень;
						
						Если МинимальныйРяд = 0 Тогда
							МинимальныйРяд = ВыборкаРядов.Ряд;
						Иначе
							МинимальныйРяд = Мин(МинимальныйРяд, ВыборкаРядов.Ряд);
						КонецЕсли;
						МаксимальныйРяд = Макс(МаксимальныйРяд, ВыборкаРядов.Ряд);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если РядыЯчейки.Количество() = 0 Тогда
				ДополнитьРядПустымиПакетами(РядыЯчейки, 1, КоличествоУровнейЯчейки)
			Иначе
				//Проверим, поправим ряды с 1 без пропусков
				Если МинимальныйРяд > 1 Тогда
					СдвинутьРядыНа = МинимальныйРяд-1;
					Если СдвинутьРядыНа > 0 Тогда
						Изменения = ЯчейкиСклада.НоваяТаблицаРазмещенийПакетов();
						Для Каждого стр из РядыЯчейки Цикл
							стр.Ряд = стр.Ряд - СдвинутьРядыНа;
							ДобавитьСтрокуТаблицыРазмещенияПакетов(Изменения, стр.ПакетID, ВыбраннаяЯчейка, Стр.Ряд, Стр.Уровень, стр.Пакет);
						КонецЦикла;
						МаксимальныйРяд = МаксимальныйРяд - СдвинутьРядыНа; 
						
						МассивИзменений = ОбщегоНазначения.ТаблицаЗначенийВМассив(Изменения);
						ЯчейкиСклада.РазместитьМассивПакетовВЯчейке(МассивИзменений, ИСТИНА);
						ТекстОшибки = "";
						УспехПУ = ВыполнитьРазмещениеПакетовВПУ(МассивИзменений, ТекстОшибки);
					КонецЕсли;     
				КонецЕсли;
				
				//Дозаполним ряды
				Для инд = 1 по МаксимальныйРяд Цикл
					ДополнитьРядПустымиПакетами(РядыЯчейки, инд, КоличествоУровнейЯчейки);    
				КонецЦикла;
			КонецЕсли;
						
		Иначе  
			текРяд = 1;
			ТекЯрус = 1;
			МаксЯрус = 5;
			Для Каждого стр из ТаблицаОстатков Цикл
				Нов = РядыЯчейки.Добавить();
				Нов.Пакет = стр.НомерПакета;
				Нов.ПакетID = стр.ПакетID;
				Нов.Назначение = "";
				Нов.ОписаниеПакета = ОписаниеПакета(Нов.ПакетID, СвойстваПакета);
				Нов.Состояние = СвойстваПакета.Состояние;
				Нов.Ряд = текРяд;
				Нов.Уровень = ТекЯрус;
				
				ТекЯрус = ТекЯрус + 1;
				Если ТекЯрус > МаксЯрус Тогда
					текРяд = текРяд + 1;
					ТекЯрус = 1;
				КонецЕсли;
			КонецЦикла;
			Если ТекЯрус <= МаксЯрус Тогда 
				ДополнитьРядПустымиПакетами(РядыЯчейки, текРяд, МаксЯрус);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьРезультатЗапросаОстатковЯчейки(ВыбраннаяЯчейка, Локально = ИСТИНА) 
	УстановитьПривилегированныйРежим(ИСТИНА);
	Если Локально Тогда
		Возврат ЯчейкиСкладаВызовСервера.ПолучитьОстаткиЯчейкиЛокально(ВыбраннаяЯчейка);
	Иначе
		СтруктураЗапроса = УКО.НоваяСтруктураПроизвольногоЗапроса();
		Если ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ().ЭтоERP Тогда
			СтруктураЗапроса.ТекстЗапроса = 
			"ВЫБРАТЬ
			|	pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних.СерияПакета КАК СерияПакета,
			|	pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних.Ячейка КАК Ячейка,
			|	pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних.Ряд КАК Ряд,
			|	pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних.Уровень КАК Уровень
			|ПОМЕСТИТЬ вт
			|ИЗ
			|	РегистрНакопления.ТоварыНаСкладах.Остатки(, УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Склад) В (&Склады)) КАК ТоварыНаСкладахОстатки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.pu_ДвижениеПакетовПоЯчейкамСклада.СрезПоследних КАК pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних
			|		ПО (ТоварыНаСкладахОстатки.Серия = pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних.СерияПакета)
			|			И (ТоварыНаСкладахОстатки.Склад = pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних.Склад)
			|ГДЕ
			|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних.Ячейка) = &Ячейка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	pu_СведенияОПакетеСрезПоследних.НомерПакета КАК НомерПакета,
			|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(pu_СведенияОПакетеСрезПоследних.ПакетПиломатериалов) КАК ПакетID,
			|	pu_СведенияОПакетеСрезПоследних.ПакетПиломатериалов.ДатаВыпуска КАК ДатаВыпуска,
			|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(вт.Ячейка) КАК Ячейка,
			|	вт.Ряд КАК Ряд,
			|	вт.Уровень КАК Уровень
			|ИЗ
			|	вт КАК вт
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.pu_СведенияОПакете.СрезПоследних КАК pu_СведенияОПакетеСрезПоследних
			|		ПО вт.СерияПакета = pu_СведенияОПакетеСрезПоследних.Серия
			|ГДЕ НЕ pu_СведенияОПакетеСрезПоследних.ПакетПиломатериалов = Значение(Справочник.pu_ПакетыПиломатериалов.ПустаяСсылка)"	
			
		Иначе
			СтруктураЗапроса.ТекстЗапроса = 
			"ВЫБРАТЬ
			|	vlp_РаспределениеПакетовПоЯчейкамСкладаСрезПоследних.НомерПакета КАК НомерПакета,
			|	vlp_РаспределениеПакетовПоЯчейкамСкладаСрезПоследних.Ячейка КАК Ячейка,
			|	vlp_РаспределениеПакетовПоЯчейкамСкладаСрезПоследних.Ряд КАК Ряд,
			|	vlp_РаспределениеПакетовПоЯчейкамСкладаСрезПоследних.Уровень КАК Уровень
			|ПОМЕСТИТЬ м_ПакетыЯчейкиВсе
			|ИЗ
			|	РегистрСведений.vlp_РаспределениеПакетовПоЯчейкамСклада.СрезПоследних(, ) КАК vlp_РаспределениеПакетовПоЯчейкамСкладаСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	VLP_ДвижениеПиломатериаловНаСкладахВремОстатки.НомерПакета КАК НомерПакета
			|ПОМЕСТИТЬ вт_Остатки
			|ИЗ
			|	РегистрНакопления.VLP_ДвижениеПиломатериаловНаСкладахВрем.Остатки(
			|			,
			|			Склад.ИмяПредопределенныхДанных В (&Склады)
			|				И НомерПакета В
			|					(ВЫБРАТЬ
			|						м.НомерПакета
			|					ИЗ
			|						м_ПакетыЯчейкиВсе КАК м)) КАК VLP_ДвижениеПиломатериаловНаСкладахВремОстатки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерПакета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	вт_Остатки.НомерПакета КАК НомерПакета,
			|	м_ПакетыЯчейкиВсе.Ячейка КАК Ячейка,
			|	м_ПакетыЯчейкиВсе.Ряд КАК Ряд,
			|	м_ПакетыЯчейкиВсе.Уровень КАК Уровень
			|ПОМЕСТИТЬ м_ПакетыЯчейки
			|ИЗ
			|	вт_Остатки КАК вт_Остатки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ м_ПакетыЯчейкиВсе КАК м_ПакетыЯчейкиВсе
			|		ПО вт_Остатки.НомерПакета = м_ПакетыЯчейкиВсе.НомерПакета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	м_ПакетыЯчейки.НомерПакета.Код КАК НомерПакета,
			|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(м_ПакетыЯчейки.НомерПакета) КАК ПакетID,
			|	м_ПакетыЯчейки.НомерПакета.ДатаВыпуска КАК ДатаВыпуска,
			|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(м_ПакетыЯчейки.Ячейка) КАК Ячейка,
			|	м_ПакетыЯчейки.Ряд КАК Ряд,
			|	м_ПакетыЯчейки.Уровень КАК Уровень
			|ИЗ
			|	м_ПакетыЯчейки КАК м_ПакетыЯчейки
			|	ГДЕ УНИКАЛЬНЫЙИДЕНТИФИКАТОР(м_ПакетыЯчейки.Ячейка) = &Ячейка
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ячейка,
			|	Ряд,
			|	Уровень УБЫВ";
		КонецЕсли;
		СтруктураЗапроса.ПараметрыЗапроса.Вставить("Склады",	ОбщегоНазначенияВызовСервераПовтИсп.МассивСкладовПУ());
		СтруктураЗапроса.ПараметрыЗапроса.Вставить("Ячейка",	ВыбраннаяЯчейка.УникальныйИдентификатор());
		ДопЗаголовки = Новый Соответствие;
		Возврат УКО.ПолучитьДанныеПроизвольногоЗапроса(СтруктураЗапроса, ДопЗаголовки);
	КонецЕсли;
КонецФункции

Функция ОписаниеПакета(Пакет, СвойстваПакета) Экспорт
	
	Описание = Пакеты.ОписаниеПакетаПоШаблону(Пакет, СвойстваПакета);
	Возврат Описание;
	
КонецФункции

Процедура ДополнитьРядПустымиПакетами(РядыЯчейки, Ряд, КоличествоУровнейЯчейки)
	Для инд = 1 по КоличествоУровнейЯчейки Цикл 
		СтрокиРядаУровня = РядыЯчейки.НайтиСтроки(Новый Структура("Ряд,Уровень", Ряд, инд));
		Если СтрокиРядаУровня.Количество() = 0 Тогда
			Нов = РядыЯчейки.Добавить();
			Нов.Пакет = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
			Нов.Ряд = Ряд;
			Нов.Уровень = инд;
		ИначеЕсли Не ЗначениеЗаполнено(СтрокиРядаУровня[0].Пакет) Тогда
			Нов = СтрокиРядаУровня[0];
			Нов.Пакет = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
			Нов.Ряд = Ряд;
			Нов.Уровень = инд;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура РазместитьМассивПакетовВЯчейке(МассивРазмещений, ОбменДаннымиЗагрузка = ЛОЖЬ, ЕстьСвязь = ИСТИНА) Экспорт
	
	РегистрыСведений.ОстаткиПакетовНаСкладах.ИзменитьРасположениеПакетов(МассивРазмещений, ОбменДаннымиЗагрузка, ЕстьСвязь);
	ФоновыеЗадания.Выполнить("ЯчейкиСклада.ОбновитьИтогиРасстановки", Новый Массив); 
	
КонецПроцедуры

Процедура РазместитьПакетВЯчейке(Знач Пакет, Знач Ячейка, Знач Ряд, Знач Уровень, ОбменДаннымиЗагрузка = ЛОЖЬ, ЕстьСвязь = ЛОЖЬ) Экспорт
	
	РегистрыСведений.ОстаткиПакетовНаСкладах.ИзменитьРасположениеПакета(Пакет, Ячейка, Ряд, Уровень, ОбменДаннымиЗагрузка, ЕстьСвязь);

КонецПроцедуры

Функция ЭлементФормыСекторШтабельКнопка(Форма, Элементы, ЭлементРодитель, СекторШтабель, ВставитьПередЭлементом = НЕОПРЕДЕЛЕНО, СтрокаТаблицы, Описание = "") Экспорт
	
	Если ЗначениеЗаполнено(СекторШтабель) Тогда
		ПсевдоЭлемента = ОбщегоНазначения.СтрокаБезСпецСимволов(СокрЛП(СекторШтабель));
		ИмяЭлемента = "СекторШтабель_"+ ПсевдоЭлемента;
	Иначе 
		Для инд = 1 по 10 Цикл 
			ИмяЭлемента = "СекторШтабель_Пустой"+инд; 	
			Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла
	КонецЕсли;
	
	КомандаФормы = Форма.Команды.Найти(ИмяЭлемента);
	Если КомандаФормы = НЕОПРЕДЕЛЕНО Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяЭлемента);
		КомандаФормы.Действие = "СекторШтабельНажатиеКнопки";
	КонецЕсли;

	ТипЭлементаФормы = Тип("КнопкаФормы");
	
	м = Элементы.Вставить(ИмяЭлемента, ТипЭлементаФормы, ЭлементРодитель); 
	
	м.Высота = 3;
	
	м.РастягиватьПоГоризонтали = ИСТИНА;
	м.РастягиватьПоВертикали = ЛОЖЬ;	
	
	ЯчейкиСклада.УстановитьСтилиДекорацииСервер(Элементы, м, Новый Структура("ЦветТекста,ЦветРамки", WebЦвета.ТемноЗеленый, WebЦвета.ТемноЗеленый));
	
	Если ЗначениеЗаполнено(СекторШтабель) Тогда
		мЗаголовок = СекторШтабель;
	Иначе         
		мЗаголовок = "";
		ЯчейкиСклада.УстановитьСтилиДекорацииСервер(Элементы, м, Новый Структура("ЦветТекста,ЦветРамки", WebЦвета.Серый, WebЦвета.Серый));
	КонецЕсли;
	
	м.Заголовок					 = мЗаголовок; 

	м.Шрифт = Новый Шрифт(,,ЛОЖЬ,,,ЛОЖЬ);
	
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы.ИмяЭлементаФормы = ИмяЭлемента;
	КонецЕсли;

	м.ИмяКоманды = КомандаФормы.Имя;

	м.Отображение = ОтображениеКнопки.КартинкаИТекст;

	м.Фигура = ФигураКнопки.Обычная;
	м.ОтображениеФигуры = ОтображениеФигурыКнопки.Всегда;
	Возврат м
КонецФункции

Функция ЭлементФормыСекторШтабель(Форма, Элементы, ЭлементРодитель, СекторШтабель, ВставитьПередЭлементом = НЕОПРЕДЕЛЕНО, СтрокаТаблицы, Описание = "") Экспорт
	
	Если ЗначениеЗаполнено(СекторШтабель) Тогда
		ПсевдоЭлемента = ОбщегоНазначения.СтрокаБезСпецСимволов(СокрЛП(СекторШтабель));
		ИмяЭлемента = "СекторШтабель_"+ ПсевдоЭлемента;
	Иначе 
		Для инд = 1 по Форма.ЭлементовПоГоризонтали Цикл 
			ИмяЭлемента = "СекторШтабель_Пустой"+инд; 	
			Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла
	КонецЕсли;
	
	ТипЭлементаФормы = Тип("ДекорацияФормы");
	
	м = Элементы.Вставить(ИмяЭлемента, ТипЭлементаФормы, ЭлементРодитель); 
	м.Вид = ВидДекорацииФормы.Надпись;
	
	м.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	м.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;

	м.Высота = 3;
	
	м.РастягиватьПоГоризонтали = ИСТИНА;
	м.РастягиватьПоВертикали = ЛОЖЬ;	
	
	ЯчейкиСклада.УстановитьСтилиДекорацииСервер(Элементы, м, Новый Структура("ЦветТекста,ЦветРамки", WebЦвета.ТемноЗеленый, WebЦвета.ТемноЗеленый));
	
	м.Гиперссылка = ИСТИНА; 
	
	м.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
	
	Если ЗначениеЗаполнено(СекторШтабель) Тогда
		мЗаголовок = СекторШтабель;
	Иначе         
		мЗаголовок = "";
		ЯчейкиСклада.УстановитьСтилиДекорацииСервер(Элементы, м, Новый Структура("ЦветТекста,ЦветРамки", WebЦвета.Серый, WebЦвета.Серый));
	КонецЕсли;
	
	м.Заголовок					 = мЗаголовок; 
	м.Подсказка					 = мЗаголовок; 

	м.Шрифт = Новый Шрифт(,,ЛОЖЬ,,,ЛОЖЬ);
	
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы.ИмяЭлементаФормы = ИмяЭлемента;
	КонецЕсли;
	
	м.УстановитьДействие("Нажатие",	"СекторШтабельНажатие");
	
	Возврат м
КонецФункции

Процедура НастроитьФормуСектораШтабеляКвадратики(Форма, ТаблицаСекторов, ЭлементыКнопкой = ЛОЖЬ, ОбщаяГруппа = НЕОПРЕДЕЛЕНО) Экспорт
	Элементы = Форма.Элементы;
	Если ОбщаяГруппа = НЕОПРЕДЕЛЕНО Тогда
		ОбщаяГруппа = Элементы.Найти("ОбщаяГруппа");
	КонецЕсли;
	
	Если ОбщаяГруппа = Неопределено Тогда
		ОбщаяГруппа = ЭлементФормыГруппа(Элементы, "ОбщаяГруппа", НЕОПРЕДЕЛЕНО, ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда, ИнтервалМеждуЭлементамиФормы.Нет, ИнтервалМеждуЭлементамиФормы.Нет);
		ОбщаяГруппа.ОтображатьЗаголовок = ЛОЖЬ;
		ОбщаяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	КонецЕсли;
	Пока ОбщаяГруппа.ПодчиненныеЭлементы.Количество()>0 Цикл
		Элементы.Удалить(ОбщаяГруппа.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	
	Если ЭлементыКнопкой Тогда
		
	КонецЕсли;
	
	Для инд = 1 по Форма.ЭлементовПоГоризонтали Цикл
		ГруппаКнопок = ЭлементФормыГруппа(Элементы, "ГруппаКнопок"+инд, ОбщаяГруппа, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, ИнтервалМеждуЭлементамиФормы.Нет, ИнтервалМеждуЭлементамиФормы.Нет);
	КонецЦикла;
	
	мНомерГруппы = 1;
	НомерСтроки = 1;
	Для Каждого СтрокаТаблицы из ТаблицаСекторов Цикл
		
 		Кнопка = Элементы.Найти(СтрокаТаблицы.ИмяЭлементаФормы);
		Если Кнопка = Неопределено Тогда
			Если ЭлементыКнопкой Тогда
				Кнопка = ЭлементФормыСекторШтабельКнопка(Форма, Элементы, Неопределено, СтрокаТаблицы.Ссылка, НЕОПРЕДЕЛЕНО, СтрокаТаблицы);
			Иначе
				Кнопка = ЭлементФормыСекторШтабель(Форма, Элементы, Неопределено, СтрокаТаблицы.Ссылка, НЕОПРЕДЕЛЕНО, СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
		Кнопка.Ширина = ?(Форма.ЭлементовПоГоризонтали < 5, 30, 10);
		
		ГруппаКнопок = Элементы.Найти("ГруппаКнопок"+мНомерГруппы);
		Элементы.Переместить(Кнопка, ГруппаКнопок);
		мНомерГруппы = мНомерГруппы + 1;
		Если мНомерГруппы > Форма.ЭлементовПоГоризонтали Тогда
			мНомерГруппы = 1;
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЭлементыКнопкой Тогда
		Если мНомерГруппы < Форма.ЭлементовПоГоризонтали и мНомерГруппы > 1 Тогда
			Для м = мНомерГруппы по Форма.ЭлементовПоГоризонтали Цикл
				ГруппаКнопок = Элементы.Найти("ГруппаКнопок"+м);
				Заглушка = ЭлементФормыСекторШтабель(Форма, Элементы, ГруппаКнопок, "", НЕОПРЕДЕЛЕНО, НЕОПРЕДЕЛЕНО)	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьРядНаСервере(ВыбраннаяЯчейка, РядыЯчейки, ТекущийРяд, КоличествоУровнейЯчейки, Слева = ИСТИНА) Экспорт
	
	Если Слева Тогда
		//Сдвигаем все пакеты 
		Изменения = ЯчейкиСклада.НоваяТаблицаРазмещенийПакетов();
		
		Для Каждого стр из РядыЯчейки Цикл
			стр.Ряд = Стр.Ряд + 1;
			Если ЗначениеЗаполнено(стр.Пакет) Тогда
				ДобавитьСтрокуТаблицыРазмещенияПакетов(Изменения, стр.ПакетID, ВыбраннаяЯчейка, Стр.Ряд, Стр.Уровень, стр.Пакет);
			КонецЕсли; 
		КонецЦикла;
		МассивИзменений = ОбщегоНазначения.ТаблицаЗначенийВМассив(Изменения);
		ЯчейкиСклада.РазместитьМассивПакетовВЯчейке(МассивИзменений, ИСТИНА);
		ТекстОшибки = "";
		УспехПУ = ВыполнитьРазмещениеПакетовВПУ(МассивИзменений, ТекстОшибки);
		
		ТекущийРяд = 1;
	Иначе
		ТекущийРяд = 0;
		Для Каждого стр из РядыЯчейки Цикл
			ТекущийРяд = МАКС(ТекущийРяд, стр.Ряд);
		КонецЦикла;
		ТекущийРяд = ТекущийРяд + 1;
	КонецЕсли;
	
	ДополнитьРядПустымиПакетами(РядыЯчейки, ТекущийРяд, КоличествоУровнейЯчейки);
	
КонецПроцедуры

Функция ТекстHTMLВФорматированнуюСтроку(ТекстHTML) Экспорт
    ФорматированныйДокумент = Новый ФорматированныйДокумент;
    ФорматированныйДокумент.УстановитьHTML(ТекстHTML, Новый Структура);
    Возврат ФорматированныйДокумент.ПолучитьФорматированнуюСтроку();
КонецФункции

Функция СтильДекорацииВыделенныйПакет() Экспорт
	Возврат Новый Структура("ЦветТекста,ЦветРамки", WebЦвета.ТемноКрасный, WebЦвета.ТемноКрасный)	
КонецФункции

Функция СтильДекорацииОбычныйПакет() Экспорт
	Возврат Новый Структура("ЦветТекста,ЦветРамки", WebЦвета.ТемноЗеленый, WebЦвета.ТемноЗеленый)	
КонецФункции

Функция СтильДекорацииПустойПакет() Экспорт
	Возврат Новый Структура("ЦветТекста,ЦветРамки", WebЦвета.Серый, WebЦвета.Серый)	
КонецФункции

Функция СтильДекорацииПакетРезерв() Экспорт
	Возврат Новый Структура("ЦветТекста,ЦветРамки,ЦветФона", WebЦвета.ТемноЗеленый, WebЦвета.Серый, WebЦвета.СветлоСерый)	
КонецФункции

Функция СтильДекорацииПакетЗапретОтгрузки() Экспорт
	Возврат Новый Структура("ЦветТекста,ЦветРамки,ЦветФона", WebЦвета.ТемноЗеленый, WebЦвета.Серый, WebЦвета.БледноКрасноФиолетовый)	
КонецФункции

Процедура ЗаполнитьСектораСклада(Форма, ТаблицаСекторов) Экспорт
	ЭлементыКнопкой = ИСТИНА;
	
	Элементы = Форма.Элементы;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ячейки.Ссылка КАК Ссылка,
	|	Ячейки.Наименование КАК Наименование,
	|	Ячейки.НомерВСекторе КАК НомерВСекторе,
	|	Ячейки.ЭтоГруппа КАК ЭтоГруппа
	|ИЗ
	|	Константа.Склад КАК КонстСклад
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Ячейки КАК Ячейки
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ячейки.Ссылка) КАК КоличествоШтабелей,
	|				Ячейки.Родитель КАК Родитель
	|			ИЗ
	|				Справочник.Ячейки КАК Ячейки
	|			ГДЕ
	|				НЕ Ячейки.ПометкаУдаления
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Ячейки.Родитель) КАК ВложенныйЗапрос
	|			ПО Ячейки.Ссылка = ВложенныйЗапрос.Родитель
	|		ПО КонстСклад.Значение = Ячейки.Владелец
	|ГДЕ
	|	Ячейки.ЭтоГруппа
	|	И НЕ Ячейки.ПометкаУдаления
	|	И ЕСТЬNULL(ВложенныйЗапрос.КоличествоШтабелей, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерВСекторе,
	|	Наименование"; 

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаСекторов.Добавить();
		СтрокаТаблицы.Ссылка = Выборка.Ссылка;
		
		Если ЭлементыКнопкой Тогда
			ЭлементФормы = ЯчейкиСклада.ЭлементФормыСекторШтабельКнопка(Форма, Элементы, Неопределено, СтрокаТаблицы.Ссылка, НЕОПРЕДЕЛЕНО, СтрокаТаблицы);
		Иначе
			ЭлементФормы = ЯчейкиСклада.ЭлементФормыСекторШтабель(Форма, Элементы, Неопределено, СтрокаТаблицы.Ссылка, НЕОПРЕДЕЛЕНО, СтрокаТаблицы);
		КонецЕсли;
		
		СтрокаТаблицы.ИмяЭлементаФормы = ЭлементФормы.Имя;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПакетыНаВилах() Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСкладов", ОбщегоНазначенияВызовСервераПовтИсп.МассивСкладов());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПакетыНаВилах.Пакет КАК Пакет
	|ИЗ
	|	РегистрСведений.ОстаткиПакетовНаСкладах КАК ОстаткиПакетовНаСкладах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыНаВилах КАК ПакетыНаВилах
	|		ПО (ПакетыНаВилах.Пакет = ОстаткиПакетовНаСкладах.НомерПакета)
	|ГДЕ
	|	ОстаткиПакетовНаСкладах.Склад В(&МассивСкладов)";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пакет");
КонецФункции

Процедура ДобавитьПакетНаВилы(id) Экспорт
	МЗ = РегистрыСведений.ПакетыНаВилах.СоздатьМенеджерЗаписи();
	МЗ.Пакет = id;
	МЗ.Записать(ИСТИНА);
КонецПроцедуры

Процедура УбратьПакетСВил(id) Экспорт
	МЗ = РегистрыСведений.ПакетыНаВилах.СоздатьМенеджерЗаписи();
	МЗ.Пакет = id;
	МЗ.Удалить();
КонецПроцедуры

Процедура ВывестиПредставлениеВилНаФорму(Форма, ШиринаЭкрана = 1080, Горизонтально = ЛОЖЬ) Экспорт
	Элементы = Форма.Элементы;
	ПакетыВил = Форма.ПакетыНаВилах;
	
	ГоризонтальноПакетовНаФорме = Форма.ГоризонтальноПакетовНаФорме;
	КоличествоУровнейЯчейки = Форма.КоличествоУровнейЯчейки;
	
	//ОчисткаПодчиненных
	Пока Элементы.ГруппаПакетыНаВилах.ПодчиненныеЭлементы.Количество()>0 Цикл
		Элементы.Удалить(Элементы.ГруппаПакетыНаВилах.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	
	Для Каждого стр из ПакетыВил Цикл 
		КартинкаПакета = ЭлементФормыПакета(Форма, Элементы, Элементы.ГруппаПакетыНаВилах, стр.Пакет,, "ПакетыВил", стр, стр.ОписаниеПакета, СтильДекорацииОбычныйПакет());	
		Если Не КартинкаПакета = Неопределено Тогда
			КартинкаПакета.МаксимальнаяВысота = 2;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры 

Процедура ЗаполнитьТаблицуПакетовВил(Форма, ОчистилиВилы = ЛОЖЬ) Экспорт
	Элементы = Форма.Элементы;
	
	МассивПакетов = ПолучитьПакетыНаВилах();
	СвойстваПакетов = Пакеты.СвойстваМассиваПакетовМоб(МассивПакетов, Тип("УникальныйИдентификатор"));
	Если СвойстваПакетов = Неопределено Тогда
		//Какая-то хрень на вилах
		НЗ = РегистрыСведений.ПакетыНаВилах.СоздатьНаборЗаписей();
		НЗ.Записать(ИСТИНА);
		МассивПакетов = ПолучитьПакетыНаВилах();
		МассивПакетов.Очистить(); 
		ОчистилиВилы = ИСТИНА;
	КонецЕсли;
	Форма.ПакетыНаВилах.Очистить();
	Для Каждого ПакетID из МассивПакетов Цикл
		Нов = Форма.ПакетыНаВилах.Добавить(); 
		Нов.ПакетID = ПакетID;
		СвойстваПакета = СвойстваПакетов.Получить(ПакетID);
		Если СвойстваПакета = Неопределено Тогда
			Продолжить
		КонецЕсли;
		Нов.Пакет = СвойстваПакета.Номер;
		Нов.Назначение = СвойстваПакета.Подсборка;
		Нов.ОписаниеПакета = ОписаниеПакета(Нов.ПакетID, СвойстваПакета);
		Нов.Состояние = СвойстваПакета.Состояние;
	КонецЦикла;
	Пока Форма.ПакетыНаВилах.Количество() < 5 Цикл
		Нов = Форма.ПакетыНаВилах.Добавить(); 	
	КонецЦикла;
	
КонецПроцедуры

Функция АдресПакета(Штабель, Ряд, Уровень) Экспорт
	Возврат СтрШаблон("%1/%2/%3", СокрЛП(Штабель), Ряд, Уровень);
КонецФУнкции

Процедура ОбновитьИтогиРасстановки() Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСкладов", ОбщегоНазначенияВызовСервераПовтИсп.МассивСкладов());
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОстаткиПакетовНаСкладах.НомерПакета) КАК Пакетов,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ОстаткиПакетовНаСкладах.Ряд = 0
	|					ИЛИ ОстаткиПакетовНаСкладах.Ячейка.ВидШтабеля = ЗНАЧЕНИЕ(Перечисление.vlp_ВидыШтабелейСклада.Подсборка)
	|					ИЛИ ОстаткиПакетовНаСкладах.Ячейка.ВидШтабеля = ЗНАЧЕНИЕ(Перечисление.vlp_ВидыШтабелейСклада.СтолПогрузки)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Расставлено
	|ИЗ
	|	РегистрСведений.ОстаткиПакетовНаСкладах КАК ОстаткиПакетовНаСкладах
	|ГДЕ
	|	ОстаткиПакетовНаСкладах.Склад В(&МассивСкладов)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		МЗ = РегистрыСведений.ИсторияКачестваРасстановкиСклада.СоздатьМенеджерЗаписи();
		МЗ.Период = ТекущаяДата();
		МЗ.Склад = ОбщегоНазначенияВызовСервераПовтИсп.Склад();
		МЗ.Всего = Выборка.Пакетов;
		МЗ.Расставлено = Выборка.Расставлено;
		МЗ.Записать(ИСТИНА);
	КонецЕсли;
	
КонецПроцедуры

Функция ПакетНаВилах(ТаблицаВил, ПакетID) Экспорт
	Ответ = ЛОЖЬ;
	Для Каждого стр из ТаблицаВил Цикл
		Если стр.ПакетID = ПакетID Тогда Возврат ИСТИНА КонецЕсли;
	КонецЦикла;

	Возврат Ответ;
КонецФункции


