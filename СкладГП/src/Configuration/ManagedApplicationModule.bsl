#Область ОписаниеПеременных
Перем ДанныеГеоПозиции Экспорт; 
Перем СмещениеСтандартногоВремени Экспорт;
Перем ЛучшийПровайдерГЕО Экспорт;
Перем ЕстьСвязь Экспорт;
Перем ДатаВремяСвязьПроверилиУспешно Экспорт;
Перем АвторизацияВыполнена Экспорт;
Перем ИдентификаторПользователяОповещениеОшибка Экспорт;
Перем ДлительноеФоновоеЗадание Экспорт;
Перем СобытиеОповещенияДлительноеФоновоеЗадание Экспорт; 
Перем ПараметрОповещенияДлительноеФоновоеЗадание Экспорт;
Перем ЭтоТестоваяСборка Экспорт;
Перем ДатаВремяЗасыпания Экспорт;
#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриНачалеРаботыСистемы()
		
	ПодключитьОбработчикиУведомлений();
	ПодключитьОбработчикОповещения("ГлобальнаяОбработкаОповещений");
	
	СмещениеСтандартногоВремени = ОбщегоНазначенияВызовСервераПовтИсп.СмещениеСтандартногоВремениУстройства();
	
	#Если МобильноеПриложениеКлиент или МобильныйКлиент Тогда 
		
		ИнтернетСоединениеКлиент.ПодключитьОбработчикИзмененияКачестваСоединения();
		
		//Гео
		ГеопозиционированиеВызовСервера.ФоноваяАрхивацияТекущегоТрека();
		ГеопозиционированиеКлиент.ОпределитьЛучшегоПровайдераГЕО();
		ГеопозиционированиеКлиент.ПодключитьОбработчикИзмененияДоступностиПровайдеров();
		//---
	#КонецЕсли 
	
	ЭтоТестоваяСборка = ЛОЖЬ; //В Реальной сборке - ЛОЖЬ
	
	ПодключитьОбработчикОжидания("ОткрытьФормуАвторизации", 0.5, ИСТИНА);
	
	Если Не ЭтоТестоваяСборка Тогда
		ПодключитьОбработчикОжидания("ВыполнитьПоискОбновлений", 5, ИСТИНА);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбменИзменениями", 0.5, ИСТИНА);
	
	ПодключитьОбработчикОжидания("Подключаемый_ОтправкаОтложенныхОшибок", 300, ИСТИНА);
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСтарыеФото", 500, ИСТИНА);
	
	//ПодключитьОбработчикИзмененияГеопозиции();
КонецПроцедуры

Процедура ПриЗасыпанииКлиентскогоПриложения()
	ДатаВремяЗасыпания = ТекущаяДата();
КонецПроцедуры

Процедура ПриПробужденииКлиентскогоПриложения()
	
	Если (Не ДатаВремяЗасыпания = Неопределено) и (ТекущаяДата() - ДатаВремяЗасыпания)>60*30 Тогда
		АвторизацияВыполнена = ЛОЖЬ;
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения(); 
	
	Если НЕ АвторизацияВыполнена Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаАвторизации",,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередНачаломРаботыСистемы(Отказ)
	ЕстьСвязь = ЛОЖЬ; 
	АвторизацияВыполнена = ЛОЖЬ;
	СлужебныйОбновлениеВызовСервера.ЗаполнитьОбновитьПреопределенныйНастройки();
КонецПроцедуры

#КонецОбласти

#Область Уведомления

Процедура ПодключитьОбработчикиУведомлений()
	#Если МобильноеПриложениеКлиент или МобильныйКлиент Тогда
		Попытка
			Подписчик = ДоставляемыеУведомления.ПолучитьИдентификаторПодписчикаУведомлений();
			ОбщегоНазначенияВызовСервера.СохранитьИдентификаторПодписчика(Подписчик);
		Исключение
		КонецПопытки;
		ДоставляемыеУведомления.ПодключитьОбработчикУведомлений("ПриПолученииУведомления");
	#КонецЕсли
КонецПроцедуры

Процедура ПриПолученииУведомления(Уведомление, Локальное, Показано) Экспорт
	ОбработкаВходящихУведомленийКлиент.ОбработатьУведомление(Уведомление, Локальное, Показано);	
КонецПроцедуры

#КонецОбласти 

Процедура ГлобальнаяОбработкаОповещений(ИмяСобытия, Параметр, Источник) Экспорт
	Если ИмяСобытия  = "ИзменениеРазмещенияПакета" Тогда
		
	ИначеЕсли ИмяСобытия = "ИзменениеКачестваСвязи" Тогда
		
		Если ЕстьСвязь Тогда
			Подключаемый_ЗапуститьОбменИзменениями()	
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ВыполненаАвторизацияКлиента" Тогда
		
	ИначеЕсли ИмяСобытия = "НачалоДлительногоФоновогоЗадания" Тогда
		ДлительноеФоновоеЗадание = Параметр.Задание;	
		Если ЗначениеЗаполнено(Параметр.СобытиеОповещения) Тогда
			СобытиеОповещенияДлительноеФоновоеЗадание = Параметр.СобытиеОповещения;
			ПараметрОповещенияДлительноеФоновоеЗадание = Параметр.ПараметрОповещения;
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ПроверкаВыполненияДлительногоФоновогоЗадания", 2, ИСТИНА);
	КонецЕсли;
	
КонецПроцедуры   

Процедура Подключаемый_ПроверкаВыполненияДлительногоФоновогоЗадания() Экспорт
	ОтключитьОбработчикОжидания("Подключаемый_ПроверкаВыполненияДлительногоФоновогоЗадания");
	Если ДлительноеФоновоеЗадание = Неопределено Тогда Возврат КонецЕсли; 
	Если ДлительныеОперацииВызовСервера.ФоновоеЗаданиеID_Активно(ДлительноеФоновоеЗадание) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверкаВыполненияДлительногоФоновогоЗадания", 2, ИСТИНА);	
	Иначе
		ДлительноеФоновоеЗадание = Неопределено;
		Если ЗначениеЗаполнено(СобытиеОповещенияДлительноеФоновоеЗадание) Тогда
			Оповестить(СобытиеОповещенияДлительноеФоновоеЗадание, ПараметрОповещенияДлительноеФоновоеЗадание);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура Подключаемый_ЗапуститьОбменИзменениями() Экспорт
	
	ОтключитьОбработчикОжидания("Подключаемый_ЗапуститьОбменИзменениями");
	
	Если ЕстьСвязь и АвторизацияВыполнена Тогда 
		СлужебныйОбновлениеКлиент.ОбменятьсяИзменениями();
	КонецЕсли; 
	
	ПериодичностьВыгрузкиИзмененийСек = ОбщегоНазначенияВызовСервераПовтИсп.ПериодичностьВыгрузкиИзменений();
	Если ПериодичностьВыгрузкиИзмененийСек = 0 Тогда
		ПериодичностьВыгрузкиИзмененийСек = 300;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбменИзменениями", ПериодичностьВыгрузкиИзмененийСек, ИСТИНА);
	
КонецПроцедуры

Процедура ОткрытьФормуАвторизации() ЭКспорт
	ОткрытьФорму("ОбщаяФорма.ФормаАвторизации",,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

#Область СоединениеСИнтернет

Процедура ПодключитьОбработчикИзмененияКачестваСоединения()
	ИнтернетСоединениеКлиент.ПодключитьОбработчикИзмененияКачестваСоединения();
КонецПроцедуры

Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)
	а=1;
КонецПроцедуры

#КонецОбласти

Асинх Процедура ВыполнитьПоискОбновлений() Экспорт
	
	ОтключитьОбработчикОжидания("ВыполнитьПоискОбновлений");
	
	ДанныеАдресаОбновлений = http_ВызовСервера.РазобратьАдрес(ОбщегоНазначенияВызовСервераПовтИсп.АдресОбновлений());
	ЗащищСоединение = ?(ДанныеАдресаОбновлений.ЗащищенноеСоединение, Новый ЗащищенноеСоединениеOpenSSL, НЕОПРЕДЕЛЕНО);
	
	ДанныеАвторизации = Новый Структура("Сервер,Логин,Пароль,ЗащищСоединение", ДанныеАдресаОбновлений.Сервер,,,ЗащищСоединение);
	
	Соединение = Новый HTTPСоединение(ДанныеАдресаОбновлений.Сервер,,,,,10, ЗащищСоединение);
	
	Ответ = Ждать http_Клиент.get_Асинх("version.txt", Соединение, "", ДанныеАвторизации);
	
	Если Ответ = Неопределено Тогда
		//ПодключитьОбработчикОжидания("ВыполнитьПоискОбновлений", 3600, ИСТИНА);	
		Возврат;
	ИначеЕсли Ответ.КодСостояния = 200 Тогда
		ТекстНовойВерсии = Ответ.ПолучитьТелоКакСтроку();	
		Если ОбщегоНазначенияВызовСервераПовтИсп.ВерсияКонфигурации() = ТекстНовойВерсии Тогда
			//ПодключитьОбработчикОжидания("ВыполнитьПоискОбновлений", 3600, ИСТИНА);	
			Возврат
		КонецЕсли;
		
		СисИнфо = Новый СистемнаяИнформация;
		Если СтрНайти(СисИнфо.ВерсияОС,"Android") > 0 Тогда
			Если СтрНайти(СисИнфо.Процессор,"64")>0 Тогда
				Если СтрНайти(СисИнфо.Процессор,"ar")>0 Тогда
					ИмяФайла = "com.example.mob_storage_pu-arm64.apk"
				Иначе
					ИмяФайла = "com.example.mob_storage_pu-x86_64.apk"
				КонецЕсли;
			Иначе
				Если СтрНайти(СисИнфо.Процессор,"ar")>0 Тогда
					ИмяФайла = "com.example.mob_storage_pu-arm.apk"
				Иначе
					ИмяФайла = "com.example.mob_storage_pu-x86.apk"
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ИмяФайла) Тогда Возврат КонецЕсли;
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, "Скачать");
		СписокКнопок.Добавить(КодВозвратаДиалога.ОК, "Обновить");
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, "Отмена");
		ОтветНачСкач = Ждать ВопросАсинх("Обнаружена новая версия "+ТекстНовойВерсии+"! Скачать файл обновления?", СписокКнопок);
		Если ОтветНачСкач = КодВозвратаДиалога.Да Тогда
			ОбщегоНазначенияКлиент.ЗапускСкачиванияУстановкиОбновления(ОбщегоНазначенияВызовСервераПовтИсп.АдресОбновлений()+ИмяФайла);
		ИначеЕсли ОтветНачСкач = КодВозвратаДиалога.ОК Тогда
			ОбщегоНазначенияКлиент.СкачатьУстановитьОбновления(ИмяФайла);
		КонецЕсли; 
	Иначе
		//ПодключитьОбработчикОжидания("ВыполнитьПоискОбновлений", 3600, ИСТИНА);	
		Возврат
	КонецЕсли;  
	ПодключитьОбработчикОжидания("ВыполнитьПоискОбновлений", 3600, ИСТИНА);
КонецПроцедуры

Процедура ОбработкаОтображенияОшибки(ИнформацияОбОшибке, ТребуетсяЗавершениеСеанса, СтандартнаяОбработка)
	telegramВызовСервера.ОтправитьСообщениеВТелегу(ИдентификаторПользователяОповещениеОшибка, ИнформацияОбОшибке);	
КонецПроцедуры

Процедура Подключаемый_ОтправкаОтложенныхОшибок() Экспорт
	Если ЕстьСвязь Тогда
		ОшибкиВызовСервера.ОтправитьПервуюОтложенную(ИдентификаторПользователяОповещениеОшибка)
	КонецЕсли;
КонецПроцедуры

Процедура Подключаемый_УдалитьСтарыеФото() Экспорт
	СлужебныйОбновлениеКлиент.ОчисткаСтарыхФайлов(30);	
КонецПроцедуры

#Область Инициализация
	ИдентификаторПользователяОповещениеОшибка = "1039280692"
#КонецОбласти
