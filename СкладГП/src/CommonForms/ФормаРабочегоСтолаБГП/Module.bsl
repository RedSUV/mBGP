
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если МобильноеПриложениеКлиент или МобильныйКлиент  Тогда
	#Иначе
		Элементы.ГруппаСтраниц.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	#КонецЕсли
	
	ВыборСтраницы = "Партии";
	ПриИзмененииПараметровЭкрана();
	
	//ПодключитьОбработчикГеопозиционирования();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Склад = ОбщегоНазначенияВызовСервераПовтИсп.Склад();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	Если ИмяСобытия = "ВыполненаАвторизацияКлиента" Тогда
		
		ПриИзмененииСвойствАвторизации();
		ВыборСтраницыПриИзменении(Неопределено);
		ЕстьСвязь_ = ЕстьСвязь;
		
	ИначеЕсли ИмяСобытия = "ИзменениеКачестваСвязи" Тогда
		//
		//Если ЕстьСвязь и АвторизацияВыполнена Тогда
		//	СлужебныйОбновлениеВызовСервера.НачатьОбменФоново(100);
		//КонецЕсли;
		ЕстьСвязь_ = ЕстьСвязь;
		
	ИначеЕсли ИмяСобытия = "Новая партия сортировки" и АвторизацияВыполнена Тогда
		
		ТаблицаПартийОбработкаЗапросаОбновления()
		
	ИначеЕсли ИмяСобытия = "ОбновлениеПакетовЯчейки" и Параметр = ЯчейкиСклада_Ячейка Тогда
		
		Элементы.ЯчейкаПакетыВЯчейке.Обновить();	
		
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	ОбщегоНазначенияКлиент.ЗаполнитьСвойстваФормыПриИзмененииПараметровЭкрана(ЭтаФорма);
	
	Если ГоризонтальноеПоложениеЭкрана Тогда
		ЭлементовПоГоризонтали = 6;
	Иначе
		ЭлементовПоГоризонтали = 3;
	КонецЕсли;
	
	Если ВыборСтраницы = "Штабеля" Тогда 
		ОбновитьПредставлениеШтабелей();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти

#Область ПодключаемыеПроцедурыИФункции

#Область Геопозиционирование

	
#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ОбновитьСписокПартийСортировки(Результат, ДопПар) Экспорт
	Если ЕстьСвязь Тогда
		ОбновитьСписокПартийСортировкиНаСервере();	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыгрузитьИзменения() Экспорт
	Если ЕстьСвязь Тогда
		СлужебныйОбновлениеВызовСервера.НачатьОбменФоново(100);
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьЭлектроннуюОчередь() Экспорт
	Если ЕстьСвязь Тогда
		ОбновитьЭлектроннуюОчередьСервер()
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбработкаРезультатаСканированияПакета(Штрихкод, Результат, Сообщение, ДопПараметр) Экспорт
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	ПоискПакета_НомерПакета = Штрихкод;
	ПриИзмененииОтборовПоискаПакета();
	#Если МобильноеПриложениеКлиент или МобильныйКлиент Тогда
		СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
	#КонецЕсли	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаВводаПакета(Результат, ДопПараметр) Экспорт
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	Если ЗначениеЗаполнено(ДопПараметр) Тогда
		ЭтаФорма[ДопПараметр] = Строка(Результат);	
	Иначе
		ПоискПакета_НомерПакета = Строка(Результат);
	КонецЕсли;
	
	ПриИзмененииОтборовПоискаПакета();	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСканированиеПакета(Команда)
	#Если МобильноеПриложениеКлиент или МобильныйКлиент  Тогда
		ОбработчикРезультата = Новый ОписаниеОповещения("ОбработкаРезультатаСканированияПакета", ЭтотОбъект);
		//Если ОбщегоНазначенияВызовСервераПовтИсп.СканированиеСтороннимПриложением() Тогда
		//	Пакеты_Клиент.НачатьСканированиеBarcode(ОбработчикРезультата);
		//Иначе
			Пакеты_Клиент.НачатьСканирование1с(ОбработчикРезультата);
		//КонецЕсли;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ВыборСтраницыПриИзменении(Элемент)
	Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы["Страница"+ВыборСтраницы];
	Если ВыборСтраницы = "Партии" Тогда
		ОбновитьСписокПартийСортировки(Элемент);
		ОбновитьЭлектроннуюОчередь(Элемент);
	ИначеЕсли ВыборСтраницы = "Штабеля" Тогда 
		ОбновитьПредставлениеШтабелей();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуОписанияЭлементаСектораФормыНаКлиенте(ИмяЭлемента, ТаблицаОписания)
	СтрПакета = ТаблицаОписания.НайтиСтроки(Новый Структура("ИмяЭлементаФормы", ИмяЭлемента));
	Если СтрПакета.Количество() = 0 Тогда 
		Возврат Неопределено
	КонецЕсли;
	Возврат СтрПакета[0]
КонецФункции

&НаКлиенте
Процедура СекторШтабельНажатиеКнопки(Команда)

	СтрокаОписания = ПолучитьСтрокуОписанияЭлементаСектораФормыНаКлиенте(Команда.Имя, ТаблицаСекторов);	
	
	ДействиеПослеВыбораШтабеля = Новый ОписаниеОповещения("ДействиеПослеВыбораШтабеля", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Ячейки.Форма.ФормаВыбораШтабеляСектора", Новый Структура("Сектор", СтрокаОписания.Ссылка), ЭтаФорма,,,,ДействиеПослеВыбораШтабеля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры  

&НаКлиенте
Функция ДействиеПослеВыбораШтабеля(Результат, ДопПар) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ОткрытьФорму("Обработка.ИнвентаризацияЯчейки.Форма.ФормаИнвентаризацииШтабеля", Новый Структура("Ячейка", Результат));	
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ОбновитьПредставлениеШтабелей()
	ОбновитьПредставлениеШтабелейНаСервере()	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСекторовНаСервере()
	ЯчейкиСклада.ЗаполнитьСектораСклада(ЭтаФорма, ТаблицаСекторов);
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеШтабелейНаСервере()
	Если ТаблицаСекторов.Количество() = 0 Тогда
		ЗаполнитьТаблицуСекторовНаСервере();		
	КонецЕсли;
	ЯчейкиСклада.НастроитьФормуСектораШтабеляКвадратики(ЭтаФорма, ТаблицаСекторов, ИСТИНА, Элементы.ГруппаШтабелей);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПриИзмененииСвойствАвторизацииАсинх()
	Подключаемый_ВыгрузитьИзменения();
	Подключаемый_ОбновитьЭлектроннуюОчередь();
	ОбновитьСписокПартийСортировкиАсинх();
КонецПроцедуры


&НаКлиенте
Процедура ПриИзмененииСвойствАвторизации()
	ПриИзмененииСвойствАвторизацииНаСервере();
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЭлектроннуюОчередь", 0.5, ИСТИНА);
	ПодключитьОбработчикОжидания("ОбновитьСписокПартийСортировкиАсинх", 0.5, ИСТИНА);
	
	ПриИзмененииСвойствАвторизацииАсинх();
		
	ПодключитьОбработчикОжидания("Подключаемый_ВыгрузитьИзменения", Мин(30, ОбщегоНазначенияКлиентПовтИсп.ПериодичностьВыгрузкиИзменений()));
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЭлектроннуюОчередь",		 30*60);
	ПодключитьОбработчикОжидания("ОбновитьСписокПартийСортировкиАсинх",	 30*60);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСвойствАвторизацииНаСервере()
	ИБ = ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ();
	Склад = ОбщегоНазначенияВызовСервераПовтИсп.Склад();
	НайденныеПакеты.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
	НайденныеПакеты.Параметры.УстановитьЗначениеПараметра("БазаПУ", ИБ);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПартийСортировки(Команда)
	Если ЕстьСвязь Тогда
		ОбновитьСписокПартийСортировкиАсинх()
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОбновитьСписокПартийСортировкиАсинх()
	Если ЕстьСвязь Тогда
		ОбновитьСписокПартийСортировкиНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокПартийСортировкиНаСервере()
	ДанныеПУ = ПартииСортировки.ПолучитьТекущиеПартии();
	ТаблицаПартий.Очистить(); 
	Если ДанныеПУ = Неопределено Тогда
		Возврат 
	КонецЕсли;
	
	Для Каждого стр из ДанныеПУ Цикл
		Нов = ТаблицаПартий.Добавить();
		ЗаполнитьЗначенияСвойств(Нов,стр);
		Нов.ВидПродукции = Справочники.ВидыПродукции.ПолучитьСсылку(стр.ВидПродукции);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПартийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//Открыть настройку партии
	ТекДанные = Элементы.ТаблицаПартий.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат КонецЕсли;

	Пар = Новый Структура("Номер,Дата,id,Сечение,ВидПродукции,Порода");
	ЗаполнитьЗначенияСвойств(Пар, ТекДанные);
	ДействиеПриЗакрытии = Новый ОписаниеОповещения("Подключаемый_ОбновитьСписокПартийСортировки", ЭтотОбъект, ВыбраннаяСтрока);
	ОткрытьФорму("ОбщаяФорма.ФормаПартииСортировки",Пар, ЭтаФорма, ТекДанные.id,,,ДействиеПриЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПакетыЯчейки(Команда)
	ЯчейкиСкладаКлиент.НачатьОбновлениеПакетовЯчейки(ЯчейкиСклада_Ячейка, ЕстьСвязь);
	Элементы.ЯчейкаПакетыВЯчейке.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПослеИнвентаризации(Результат, ДопПар) Экспорт
	ЯчейкиСклада_ЯчейкаПриИзменении(Результат, ЛОЖЬ);
КонецПроцедуры

&НаКлиенте
Процедура НачатьИнвентаризациюЯчейки(Команда)
	ДействиеПослеИнвентаризации = Новый ОписаниеОповещения("ДействиеПослеИнвентаризации", ЭтотОбъект);
	ОткрытьФорму("Обработка.ИнвентаризацияЯчейки.Форма.ФормаИнвентаризацииШтабеля", Новый Структура("Ячейка",ЯчейкиСклада_Ячейка), ЭтаФорма,,,,ДействиеПослеИнвентаризации)
КонецПроцедуры

&НаКлиенте
Процедура ЯчейкиСклада_ЯчейкаПриИзменении(Элемент, ОбновитьИзПУ = ИСТИНА)
	Если ОбновитьИзПУ Тогда
		ЯчейкиСкладаКлиент.НачатьОбновлениеПакетовЯчейки(ЯчейкиСклада_Ячейка, ЕстьСвязь);
	КонецЕсли;
	ЯчейкиСклада_ЯчейкаПриИзмененииНаСервере()
КонецПроцедуры

&НаСервере
Процедура ЯчейкиСклада_ЯчейкаПриИзмененииНаСервере()
	ЯчейкаПакетыВЯчейке.Параметры.УстановитьЗначениеПараметра("Ячейка", ЯчейкиСклада_Ячейка);
КонецПроцедуры

&НаКлиенте
Процедура ЯчейкаПакетыВЯчейкеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьФорму("ОбщаяФорма.ФормаПакета", Новый Структура("Пакет", Элементы.ЯчейкаПакетыВЯчейке.ДанныеСтроки(ВыбраннаяСтрока).НомерПакета));
	СтандартнаяОбработка = ЛОЖЬ;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ВыборСтраницы = СтрЗаменить(Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя,"Страница","");
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтборовПоискаПакета()
	УстановитьОтборыПоискаПакетов();		
КонецПроцедуры

&НаСервере
Функция СоотвествиеОтборов()
	Соотв = Новый Соответствие;
	Соотв.Вставить("ПоискПакета_НомерПакета",		 Новый Структура("ЛевоеЗначение, ВидСравнения",Новый ПолеКомпоновкиДанных("Номер"),			 ВидСравненияКомпоновкиДанных.Равно));
	Соотв.Вставить("ПоискПакета_Порода",			 Новый Структура("ЛевоеЗначение, ВидСравнения",Новый ПолеКомпоновкиДанных("Порода"),		 ВидСравненияКомпоновкиДанных.Равно));
	Соотв.Вставить("ПоискПакета_ВидПродукции",		 Новый Структура("ЛевоеЗначение, ВидСравнения",Новый ПолеКомпоновкиДанных("ВидПродукции"),	 ВидСравненияКомпоновкиДанных.Равно));
	Соотв.Вставить("ПоискПакета_Сорт",				 Новый Структура("ЛевоеЗначение, ВидСравнения",Новый ПолеКомпоновкиДанных("Сорт"),			 ВидСравненияКомпоновкиДанных.Равно));
	Соотв.Вставить("ПоискПакета_Влажность",			 Новый Структура("ЛевоеЗначение, ВидСравнения",Новый ПолеКомпоновкиДанных("Влажность"),		 ВидСравненияКомпоновкиДанных.Равно));
	Соотв.Вставить("ПоискПакета_СечениеТолщина",	 Новый Структура("ЛевоеЗначение, ВидСравнения",Новый ПолеКомпоновкиДанных("СечениеТолщина"), ВидСравненияКомпоновкиДанных.Равно));
	Соотв.Вставить("ПоискПакета_СечениеШирина",		 Новый Структура("ЛевоеЗначение, ВидСравнения",Новый ПолеКомпоновкиДанных("СечениеШирина"),	 ВидСравненияКомпоновкиДанных.Равно));
	Соотв.Вставить("ПоискПакета_ТипРаспила",		 Новый Структура("ЛевоеЗначение, ВидСравнения",Новый ПолеКомпоновкиДанных("ТипРаспила"),	 ВидСравненияКомпоновкиДанных.Равно));
	Соотв.Вставить("ПоискПакета_ДлинаОт",			 Новый Структура("ЛевоеЗначение, ВидСравнения",Новый ПолеКомпоновкиДанных("ДлинаОт"),		 ВидСравненияКомпоновкиДанных.БольшеИлиРавно));
	Соотв.Вставить("ПоискПакета_ДлинаДо",			 Новый Структура("ЛевоеЗначение, ВидСравнения",Новый ПолеКомпоновкиДанных("ДлинаДо"),		 ВидСравненияКомпоновкиДанных.МеньшеИлиРавно));
	Соотв.Вставить("ПоискПакета_Состояние",			 Новый Структура("ЛевоеЗначение, ВидСравнения",Новый ПолеКомпоновкиДанных("Состояние"),		 ВидСравненияКомпоновкиДанных.Равно));
	Возврат Соотв
КонецФункции

&НаСервере
Функция НайтиЭлементОтбора(ОтборСписка, ОписаниеОтбора, ПравоеЗначение)
	
	мЛевоеЗначение	 = ОписаниеОтбора.ЛевоеЗначение;
	мВидСравнения	 = ОписаниеОтбора.ВидСравнения;
	
	Для Каждого эл из ОтборСписка.Элементы Цикл
		Если эл.ЛевоеЗначение = мЛевоеЗначение Тогда
			Возврат эл;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(ПравоеЗначение) Тогда
		ЭлементОтбора = ОтборСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = мЛевоеЗначение;
		ЭлементОтбора.ВидСравнения = мВидСравнения;
		Возврат ЭлементОтбора;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаСервере
Процедура УстановитьОтборыПоискаПакетов()
	Для Каждого м из СоотвествиеОтборов() Цикл
		ЗначениеОтбора = ЭтаФорма[м.Ключ];
		ОписаниеОтбора = м.Значение;
		
		ЭлементОтбора = НайтиЭлементОтбора(НайденныеПакеты.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ОписаниеОтбора, ЗначениеОтбора);
		Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
			ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
			ЭлементОтбора.Использование = ИСТИНА;
		Иначе
			Если НЕ ЭлементОтбора = Неопределено Тогда
				ЭлементОтбора.Использование = ЛОЖЬ;	
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПартийОбработкаЗапросаОбновления()
	Если ЕстьСвязь Тогда
		ОбновитьСписокПартийСортировкиНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НайденныеПакетыОбработкаЗапросаОбновления()
	ОбновитьОстаткиСклада("")
КонецПроцедуры

&НаКлиенте
Процедура НайденныеПакетыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Не Элементы.НайденныеПакеты.ДанныеСтроки(ВыбраннаяСтрока) = Неопределено Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПакета", Новый Структура("Пакет", Элементы.НайденныеПакеты.ДанныеСтроки(ВыбраннаяСтрока).НомерПакета));
	КонецЕсли;
	СтандартнаяОбработка = ЛОЖЬ;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОбновитьОстаткиСклада(Команда)
	ЯчейкиСкладаКлиент.НачатьОбновлениеПакетовЯчейки(НЕОПРЕДЕЛЕНО, ЕстьСвязь);
//	Элементы.НайденныеПакеты.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПриПробужденииКлиентскогоПриложения()
КонецПроцедуры

&НаКлиенте
Процедура ПоискПакета_НомерПакетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если МобильноеПриложениеКлиент или МобильныйКлиент Тогда
		ОбработчикРезультата = Новый ОписаниеОповещения("ОбработкаРезультатаСканированияПакета", ЭтотОбъект);
		Пакеты_Клиент.НачатьСканирование1с(ОбработчикРезультата);
	#Иначе
		ОбработчикРезультата = Новый ОписаниеОповещения("ОбработкаРезультатаВводаПакета", ЭтотОбъект, "ПоискПакета_НомерПакета");
		ПоказатьВводЧисла(ОбработчикРезультата, ,"Введите номера пакета", 6, 0);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьГруппуПоКнопкеЗаголовка(ЭлГруппа, ЭлКнопка)
	ЭлГруппа.Видимость = Не ЭлГруппа.Видимость;
	Если Не ЭлГруппа.Видимость Тогда
		ЭлКнопка.Картинка = БиблиотекаКартинок.ПереместитьВниз;
		ЭлКнопка.ЦветТекста = Новый Цвет(0, 128, 0);
	Иначе
		ЭлКнопка.Картинка = БиблиотекаКартинок.ПереместитьВверх;
		ЭлКнопка.ЦветТекста = WebЦвета.ТемноСиний;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказать_ГруппаПартииСортировки(Команда)
	//СвернутьВсе
	//
	СвернутьРазвернутьГруппуПоКнопкеЗаголовка(Элементы.ГруппаПартииСортировки, Элементы.СкрытьПоказать_ГруппаПартииСортировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказать_ГруппаЭлектроннаяОчередь(Команда)
	СвернутьРазвернутьГруппуПоКнопкеЗаголовка(Элементы.ГруппаЭлектроннаяОчередь, Элементы.СкрытьПоказать_ГруппаЭлектроннаяОчередь);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОбновитьЭлектроннуюОчередь(Команда)
	Подключаемый_ОбновитьЭлектроннуюОчередь()
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлектроннуюОчередьСервер()
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	ИмяСобытияЖурнала = "СлужебныйОбновление.ОбновитьЭлектроннуюОчередь";
	
	СтруктураЗапроса = УКО.НоваяСтруктураПроизвольногоЗапроса(); 
	Если ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ().ЭтоERP Тогда
		СтруктураЗапроса.ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(pu_ЗаявкаНаПогрузку.Ссылка) КАК Заявка,
		|	pu_ЗаявкаНаПогрузку.Номер КАК ЗаявкаНомер,
		|	pu_ЗаявкаНаПогрузку.Контрагент.Наименование КАК Покупатель,
		|	ВЫРАЗИТЬ(pu_ЗаявкаНаПогрузку.Транспорт.Наименование КАК СТРОКА(6)) КАК НомерАвто,
		|	ЗаявкиНаПогрузку.НомерТалона КАК НомерТалона,
		|	ЗаявкиНаПогрузку.РегистрацияАвто_Дата КАК ДатаПрибытия,
		|	ЗаявкиНаПогрузку.Отгружено_Дата КАК ДатаОтгрузки,
		|	pu_ЗаявкаНаПогрузку.Контейнер.Наименование КАК Контейнер,
		|	pu_ЗаявкаНаПогрузку.Перевозчик.Наименование КАК Перевозчик,
		|	ИСТИНА КАК АвтоЗарегистирован,
		|	1 КАК Сортировка,
		|	НЕ ЗаявкиНаПогрузку.Отгружено_Дата = ДАТАВРЕМЯ(1, 1, 1) КАК АвтоОтгружено,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(МАКСИМУМ(pu_ЗаявкаНаПогрузку.Ссылка)) КАК ПредвОтгрузка,
		|	pu_ЗаявкаНаПогрузку.ТелефонВодителя КАК ТелефонВодителя,
		|	НЕ ЗаявкиНаПогрузку.ВызовНаПогрузку = ДАТАВРЕМЯ(1, 1, 1) КАК ВызванНаПогрузку,
		|	ЕСТЬNULL(ЗапросПрисоединенных.Ссылок, 0) > 0 КАК ЕстьФото,
		|	ПРЕДСТАВЛЕНИЕ(pu_СтатусыЗаявокНаПогрузкуСрезПоследних.Статус) КАК Статус
		|ИЗ
		|	Документ.pu_ЗаявкаНаПогрузку КАК pu_ЗаявкаНаПогрузку
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.pu_ЗаявкиНаПогрузку КАК ЗаявкиНаПогрузку
		|		ПО (ЗаявкиНаПогрузку.Заявка = pu_ЗаявкаНаПогрузку.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			VLP_ЗаявкаНаПогрузкуПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ VLP_ЗаявкаНаПогрузкуПрисоединенныеФайлы.Ссылка) КАК Ссылок
		|		ИЗ
		|			Справочник.pu_ЗаявкаНаПогрузкуПрисоединенныеФайлы КАК VLP_ЗаявкаНаПогрузкуПрисоединенныеФайлы
		|		
		|		СГРУППИРОВАТЬ ПО
		|			VLP_ЗаявкаНаПогрузкуПрисоединенныеФайлы.ВладелецФайла) КАК ЗапросПрисоединенных
		|		ПО pu_ЗаявкаНаПогрузку.Ссылка = ЗапросПрисоединенных.ВладелецФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.pu_СтатусыЗаявокНаПогрузку.СрезПоследних КАК pu_СтатусыЗаявокНаПогрузкуСрезПоследних
		|		ПО (pu_СтатусыЗаявокНаПогрузкуСрезПоследних.Заявка = pu_ЗаявкаНаПогрузку.Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявкиНаПогрузку.РегистрацияАвто_Дата,
		|	ЗаявкиНаПогрузку.Отгружено_Дата,
		|	ЗаявкиНаПогрузку.НомерТалона,
		|	pu_ЗаявкаНаПогрузку.Контейнер.Наименование,
		|	pu_ЗаявкаНаПогрузку.Перевозчик.Наименование,
		|	pu_ЗаявкаНаПогрузку.ТелефонВодителя,
		|	НЕ ЗаявкиНаПогрузку.ВызовНаПогрузку = ДАТАВРЕМЯ(1, 1, 1),
		|	ЕСТЬNULL(ЗапросПрисоединенных.Ссылок, 0) > 0,
		|	pu_ЗаявкаНаПогрузку.Контрагент.Наименование,
		|	ВЫРАЗИТЬ(pu_ЗаявкаНаПогрузку.Транспорт.Наименование КАК СТРОКА(6)),
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(pu_ЗаявкаНаПогрузку.Ссылка),
		|	pu_ЗаявкаНаПогрузку.Номер,
		|	ПРЕДСТАВЛЕНИЕ(pu_СтатусыЗаявокНаПогрузкуСрезПоследних.Статус)
		|
		|ИМЕЮЩИЕ
		|	(МАКСИМУМ(pu_СтатусыЗаявокНаПогрузкуСрезПоследних.Статус) = ЗНАЧЕНИЕ(Перечисление.pu_СтатусыЗаявокНаПогрузку.Запланировано)
		|		ИЛИ МАКСИМУМ(pu_СтатусыЗаявокНаПогрузкуСрезПоследних.Статус) = ЗНАЧЕНИЕ(Перечисление.pu_СтатусыЗаявокНаПогрузку.Отгружается))";
	Иначе
		СтруктураЗапроса.ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ЗаявкиНаПогрузку.Заявка) КАК Заявка,
		|	ЗаявкиНаПогрузку.Заявка.Номер КАК ЗаявкаНомер,
		|	ЗаявкиНаПогрузку.Заявка.Покупатель.Наименование КАК Покупатель,
		|	ВЫРАЗИТЬ(ЗаявкиНаПогрузку.Заявка.НомерАвто КАК СТРОКА(6)) КАК НомерАвто,
		|	ЗаявкиНаПогрузку.НомерТалона КАК НомерТалона,
		|	ЗаявкиНаПогрузку.РегистрацияАвто_Дата КАК ДатаПрибытия,
		|	ЗаявкиНаПогрузку.Отгружено_Дата КАК ДатаОтгрузки,
		|	ЗаявкиНаПогрузку.Заявка.Контейнер КАК Контейнер,
		|	ЗаявкиНаПогрузку.Заявка.Перевозчик.Наименование КАК Перевозчик,
		|	НЕ ЗаявкиНаПогрузку.РегистрацияАвто_Дата = ДАТАВРЕМЯ(1, 1, 1) КАК АвтоЗарегистирован,
		|	ВЫБОР
		|		КОГДА ЗаявкиНаПогрузку.Заявка.Контейнер
		|				И ЗаявкиНаПогрузку.РегистрацияАвто_Дата <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(ЗаявкиНаПогрузку.РегистрацияАвто_Дата, ЧАС, -2)
		|		ИНАЧЕ ЗаявкиНаПогрузку.РегистрацияАвто_Дата
		|	КОНЕЦ КАК Сортировка,
		|	НЕ ЗаявкиНаПогрузку.Отгружено_Дата = ДАТАВРЕМЯ(1, 1, 1) КАК АвтоОтгружено,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(МАКСИМУМ(VLP_ПредварительнаяОтгрузка.Ссылка)) КАК ПредвОтгрузка,
		|	ЗаявкиНаПогрузку.Заявка.ТелефонВодителя КАК ТелефонВодителя,
		|	НЕ ЗаявкиНаПогрузку.ВызовНаПогрузку = ДАТАВРЕМЯ(1, 1, 1) КАК ВызванНаПогрузку,
		|	ЕСТЬNULL(ЗапросПрисоединенных.Ссылок, 0) > 0 КАК ЕстьФото
		|ИЗ
		|	РегистрСведений.ЗаявкиНаПогрузку КАК ЗаявкиНаПогрузку
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.VLP_ПредварительнаяОтгрузка КАК VLP_ПредварительнаяОтгрузка
		|		ПО (ЗаявкиНаПогрузку.Заявка = VLP_ПредварительнаяОтгрузка.ЗаявкаНаПогрузку)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			VLP_ЗаявкаНаПогрузкуПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ VLP_ЗаявкаНаПогрузкуПрисоединенныеФайлы.Ссылка) КАК Ссылок
		|		ИЗ
		|			Справочник.VLP_ЗаявкаНаПогрузкуПрисоединенныеФайлы КАК VLP_ЗаявкаНаПогрузкуПрисоединенныеФайлы
		|		
		|		СГРУППИРОВАТЬ ПО
		|			VLP_ЗаявкаНаПогрузкуПрисоединенныеФайлы.ВладелецФайла) КАК ЗапросПрисоединенных
		|		ПО (ЗаявкиНаПогрузку.Заявка = ЗапросПрисоединенных.ВладелецФайла)
		|ГДЕ
		|	ЗаявкиНаПогрузку.Оформлено_Дата = ДАТАВРЕМЯ(1, 1, 1)
		|	И ЗаявкиНаПогрузку.Заявка.ПланДатаПогрузки <= ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 5)
		|	И НЕ ЗаявкиНаПогрузку.Заявка.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявкиНаПогрузку.РегистрацияАвто_Дата,
		|	ВЫБОР
		|		КОГДА ЗаявкиНаПогрузку.Заявка.Контейнер
		|				И ЗаявкиНаПогрузку.РегистрацияАвто_Дата <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(ЗаявкиНаПогрузку.РегистрацияАвто_Дата, ЧАС, -2)
		|		ИНАЧЕ ЗаявкиНаПогрузку.РегистрацияАвто_Дата
		|	КОНЕЦ,
		|	ЗаявкиНаПогрузку.Отгружено_Дата,
		|	ЗаявкиНаПогрузку.НомерТалона,
		|	ЗаявкиНаПогрузку.Заявка.Покупатель.Наименование,
		|	ЗаявкиНаПогрузку.Заявка.Контейнер,
		|	ЗаявкиНаПогрузку.Заявка.Перевозчик.Наименование,
		|	ЗаявкиНаПогрузку.Заявка.ТелефонВодителя,
		|	НЕ ЗаявкиНаПогрузку.ВызовНаПогрузку = ДАТАВРЕМЯ(1, 1, 1),
		|	ВЫРАЗИТЬ(ЗаявкиНаПогрузку.Заявка.НомерАвто КАК СТРОКА(6)),
		|	ЕСТЬNULL(ЗапросПрисоединенных.Ссылок, 0) > 0,
		|	ЗаявкиНаПогрузку.Заявка.Номер,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ЗаявкиНаПогрузку.Заявка)";
	КонецЕсли;
	СтруктураЗапроса.ПараметрыЗапроса.Вставить("ТекущаяДата", ТекущаяДата());
	
	
	ДанныеПУ = УКО.ПолучитьДанныеПроизвольногоЗапроса(СтруктураЗапроса,,ИмяСобытияЖУрнала);
	Если ДанныеПУ = Неопределено 
		Или ДанныеПУ.Количество() = 0 Тогда
		ЗаписьИстории(ИмяСобытияЖУрнала,"", ИСТИНА);
		Возврат;
	КонецЕсли;
	ЭлектроннаяОчередь.Очистить();
	ЭлектроннаяОчередь.Загрузить(ДанныеПУ);
	ЭлектроннаяОчередь.Сортировать("АвтоЗарегистирован Убыв, Сортировка Возр");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяОчередьОбработкаЗапросаОбновления()
	Подключаемый_ОбновитьЭлектроннуюОчередь()
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПодтвердитьОтправитьSMS(ТекДанные)
	
	#Если МобильноеПриложениеКлиент или МобильныйКлиент Тогда
		Если СредстваТелефонии.ПоддерживаетсяОтправкаSMS(ИСТИНА) Тогда
			
			Текст = "а/м %1. Ваша очередь погрузки подошла.
			|Можете заезжать на территорию ЛДК2";
			
			SMS = Новый SMSСообщение;
			SMS.Отправитель = ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ();
			SMS.Получатели.Добавить(ТекДанные.ТелефонВодителя);
			SMS.Текст = СтрШаблон(Текст,ТекДанные.НомерАвто);
			
			СредстваТелефонии.ПослатьSMS(SMS, ИСТИНА);	
		КонецЕсли;
	#КонецЕсли	
КонецПроцедуры


&НаСервере
Процедура ИзменитьДанныеЗаписиРегистраСостоянияЗаявки(мЗаявка, ИмяКоманды)
	ДанныеСостояния = odata.ДанныеЗаписиРегистраСостоянияЗаявки(мЗаявка);	 
	Если ИмяКоманды  =	"ПогрузкаЗавершена" Тогда
		ДанныеСостояния.Вставить("Отгружено_Дата", ТекущаяДата());
	ИначеЕсли ИмяКоманды  =	"ДокументыОформлены" Тогда
		ДанныеСостояния.Вставить("Оформлено_Дата", ТекущаяДата());
	КонецЕсли;
	odata.ИзменитьЗаписьРегистраСостоянияЗаявки(мЗаявка, ДанныеСостояния);
КонецПроцедуры

&НаКлиенте
Процедура ВызватьНаПогрузку(Команда)
	ТекДанные = Элементы.ЭлектроннаяОчередь.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекДанные.НомерАвто) Тогда Возврат КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекДанные.ТелефонВодителя) Тогда 
		ПоказатьПредупреждение(,"Не заполнен номер телефона");
		Возврат КонецЕсли;
	
	ПодтвердитьОтправитьSMS(ТекДанные);
	ИзменитьДанныеЗаписиРегистраСостоянияЗаявки(ТекДанные.Заявка, Команда.Имя);
	ОбновитьЭлектроннуюОчередь(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПогрузкаЗавершена(Команда)
	ТекДанные = Элементы.ЭлектроннаяОчередь.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат КонецЕсли;
	ИзменитьДанныеЗаписиРегистраСостоянияЗаявки(ТекДанные.Заявка, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОформлены(Команда)
	ТекДанные = Элементы.ЭлектроннаяОчередь.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат КонецЕсли;
	ИзменитьДанныеЗаписиРегистраСостоянияЗаявки(ТекДанные.Заявка, Команда.Имя);
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЭлектроннуюОчередь",0.5, ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ВидимостиДоступностиКоманд_Очереди(Структ)
	Если ЗначениеЗаполнено(Структ.НомерАвто) Тогда
		Если Структ.АвтоЗарегистирован и НЕ Структ.АвтоОтгружено Тогда
			ЗаголовокВопроса = "%1 %2";
			Элементы.ЭлектроннаяОчередьВызватьНаПогрузку.Заголовок = СтрШаблон(ЗаголовокВопроса,?(Структ.ВызванНаПогрузку,"Повторить вызов ","Вызвать на погрузку "),Структ.НомерАвто);
			Элементы.ЭлектроннаяОчередьВызватьНаПогрузку.Видимость = ИСТИНА;
			Элементы.ЭлектроннаяОчередьПогрузкаЗавершена.Видимость = ИСТИНА;//ИСТИНА;
		Иначе
			Элементы.ЭлектроннаяОчередьПогрузкаЗавершена.Видимость = ЛОЖЬ;
			Элементы.ЭлектроннаяОчередьВызватьНаПогрузку.Видимость = ЛОЖЬ;
		Конецесли;
		Элементы.ЭлектроннаяОчередьДокументыОформлены.Видимость = Структ.АвтоОтгружено;
	Иначе
		Элементы.ЭлектроннаяОчередьПогрузкаЗавершена.Видимость = ЛОЖЬ;
		Элементы.ЭлектроннаяОчередьВызватьНаПогрузку.Видимость = ЛОЖЬ;
		Элементы.ЭлектроннаяОчередьДокументыОформлены.Видимость = ЛОЖЬ;
	КонецЕсли;
	Элементы.ЭлектроннаяОчередьПозвонитьВодителю.Видимость = ЗначениеЗаполнено(Структ.ТелефонВодителя);
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяОчередьПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.ЭлектроннаяОчередь.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат КонецЕсли;
	ВидимостиДоступностиКоманд_Очереди(ТекДанные)	
КонецПроцедуры

&НаКлиенте
Процедура ПозвонитьВодителю(Команда)
	#Если МобильноеПриложениеКлиент или МобильныйКлиент Тогда
		ТекДанные = Элементы.ЭлектроннаяОчередь.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда Возврат КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекДанные.ТелефонВодителя) Тогда Возврат КонецЕсли;
		СредстваТелефонии.НабратьНомер(ТекДанные.ТелефонВодителя, ЛОЖЬ);	
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяОчередьВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	ЭлектроннаяОчередьОткрытьФормуТекущейЗаявки(Элемент, Значение, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяОчередьОткрытьФормуТекущейЗаявки(Элемент, Значение, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	ТекДанные = Элементы.ЭлектроннаяОчередь.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат КонецЕсли; 
	Пар = Новый Структура("Заявка", ТекДанные.Заявка);
	ОткрытьФорму("ОбщаяФорма.ФормаЗаявкиНаПогрузку", Пар, ЭтаФорма, ТекДанные.Заявка,,,,);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяОчередьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ЭлектроннаяОчередьОткрытьФормуТекущейЗаявки(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВыключитьГруппировкуПакетов(Команда)
	Если НайденныеПакеты.Группировка.Элементы.Количество() = 0 Тогда
		НовГруппа = НайденныеПакеты.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		НовГруппа.Поле = Новый ПолеКомпоновкиДанных("ГруппировкаСечение");
	Иначе
		НайденныеПакеты.Группировка.Элементы.Очистить();
	КонецЕсли;
	НастроитьКнопкуВключенияВыключенияГруппировки()	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКнопкуВключенияВыключенияГруппировки()
	Если НайденныеПакеты.Группировка.Элементы.Количество() = 0 Тогда
		Элементы.ВключитьВыключитьГруппировкуПакетов.Заголовок = "вкл.группировку";
	Иначе
		Элементы.ВключитьВыключитьГруппировкуПакетов.Заголовок = "выкл.группировку";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЯчейкиСклада_ЯчейкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	ДействиеПослеЗакрытияВыбораШтабеля = Новый ОписаниеОповещения("ДействиеПослеЗакрытияВыбораШтабеля", ЭтотОбъект);
	ОткрытьФорму("Справочник.Ячейки.Форма.ФормаВыбораСектора", Новый Структура("ВыбраныйШтабель", ЯчейкиСклада_Ячейка), ЭтаФорма,,,,ДействиеПослеЗакрытияВыбораШтабеля)
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПослеЗакрытияВыбораШтабеля(Результат, ДопПар) ЭКспорт
	Если Результат = Неопределено Тогда 
		Возврат
	КонецЕсли;
	
	ЯчейкиСклада_Ячейка = Результат;
	ЯчейкиСклада_ЯчейкаПриИзменении("");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОтборы(Команда)
	Если Элементы.ГруппаОтборы.Видимость Тогда
		Элементы.ПоказатьСкрытьОтборы.Картинка = БиблиотекаКартинок.ГлазОткрыт16
	Иначе
		Элементы.ПоказатьСкрытьОтборы.Картинка = БиблиотекаКартинок.ГлазЗакрыт16
	КонецЕсли;
	Элементы.ГруппаОтборы.Видимость = Не Элементы.ГруппаОтборы.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ЯчейкаПакетыВЯчейкеОбработкаЗапросаОбновления()
	ЯчейкиСкладаКлиент.НачатьОбновлениеПакетовЯчейки(ЯчейкиСклада_Ячейка, ЕстьСвязь);
	Элементы.ЯчейкаПакетыВЯчейке.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивации()
	а=1;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	а=1;
КонецПроцедуры

&НаКлиенте
Процедура ПоискПакета_НомерПакета(Команда)
	ОбработчикРезультата = Новый ОписаниеОповещения("ОбработкаРезультатаВводаПакета", ЭтотОбъект, "ПоискПакета_НомерПакета");
	
	Пар = Новый Структура("Номер", ПоискПакета_НомерПакета);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаНомераПакета", Пар, ЭтаФорма,,,,ОбработчикРезультата, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры
