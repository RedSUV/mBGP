
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Параметры.id) Тогда Отказ = ИСТИНА; Возврат КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, "Номер,Дата,Сечение,Порода,ВидПродукции");
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		Для Каждого стрВозмСорта из ВидПродукции.ВозможныеСортаВыхода Цикл
			Нов = СортаВыпуска.Добавить();
			ЗаполнитьЗначенияСвойств(нов, стрВозмСорта);
			ЗаполнитьДлинаСтр(нов);
		КонецЦикла;
	КонецЕсли;
	ОбновитьДанныеПартииИзПУ();
	ОбновитьЗаголовок();
	Склад = ОбщегоНазначенияВызовСервераПовтИсп.Склад();
КонецПроцедуры  

&НаСервере
Процедура ЗаполнитьДлинаСтр(строкаПартии)
	Если ЗначениеЗаполнено(строкаПартии.ДлинаОт) или ЗначениеЗаполнено(строкаПартии.ДлинаДо) Тогда
		строкаПартии.ДлинаСтр = СтрШаблон("%1-%2", строкаПартии.ДлинаОт, строкаПартии.ДлинаДо);	  
	Иначе 
		строкаПартии.ДлинаСтр = "все длины"
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДлинаСтрКлиент(строкаПартии)
	Если ЗначениеЗаполнено(строкаПартии.ДлинаОт) или ЗначениеЗаполнено(строкаПартии.ДлинаДо) Тогда
		строкаПартии.ДлинаСтр = СтрШаблон("%1-%2", строкаПартии.ДлинаОт, строкаПартии.ДлинаДо);	  
	Иначе 
		строкаПартии.ДлинаСтр = "все длины"
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ОбновитьЗаголовок()
	Заголовок = СтрШаблон("Партия %1 от %2", Параметры.Номер, Формат(Параметры.Дата,"ДФ=dd.MM.yy"));
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПартииИзПУ()

	ДанныеПУ = ПартииСортировки.ПолучитьРазмещениеПартииИзПУ(Параметры.id);
	Если ДанныеПУ = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Для Каждого стр из ДанныеПУ Цикл
		СортПУ = Справочники.Сорта.ПолучитьСсылку(стр.Сорт);
		СтрокиСорта = СортаВыпуска.НайтиСтроки(Новый Структура("Сорт", СортПУ));
		Если СтрокиСорта.Количество() > 0 Тогда
			СтрВыпуска = СтрокиСорта[0];
		Иначе
			СтрВыпуска = СортаВыпуска.Добавить();
			СтрВыпуска.Сорт = СортПУ;
		КонецЕсли; 
		СтрВыпуска.ДлинаОт = стр.ДлинаОт;
		СтрВыпуска.ДлинаДо = стр.ДлинаДо;
		ЗаполнитьДлинаСтр(СтрВыпуска);
		
		ДанныеЯчеекСорта = Стр.Ячейки.Получить();
		Если ТипЗнч(ДанныеЯчеекСорта) = Тип("ДвоичныеДанные") Тогда
			Хранилище = XMLЗначение(Тип("ХранилищеЗначения"), Base64Строка(Стр.Ячейки.Получить()));
			СписокЯчеек = Хранилище.Получить();
		Иначе
			СписокЯчеек = Стр.Ячейки.Получить();
		КонецЕсли;
		Если СписокЯчеек = Неопределено Тогда Продолжить КонецЕсли;
		Для Каждого ЭлементСпискаЯчеек из СписокЯчеек Цикл
			Если НЕ ЗначениеЗаполнено(ЭлементСпискаЯчеек.Значение) Тогда Продолжить КонецЕсли;
			ТипЗначенияСписка = ТипЗнч(ЭлементСпискаЯчеек.Значение);
			Если ТипЗначенияСписка = Тип("Строка") Тогда
				СтрВыпуска.Ячейки.Добавить(Справочники.Ячейки.ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлементСпискаЯчеек.Значение)));
			ИначеЕсли ТипЗначенияСписка = Тип("УникальныйИдентификатор") Тогда
				СтрВыпуска.Ячейки.Добавить(Справочники.Ячейки.ПолучитьСсылку(ЭлементСпискаЯчеек.Значение));
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзменения(Команда)
	ЗаписатьИзмененияНаСервере();
	Закрыть(Параметры.id);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияНаСервере()
	ДанныеДляЗаписи = Новый Массив;
	Для Каждого стр из СортаВыпуска Цикл
		Запись = Новый Структура;
		Запись.Вставить("Партия",	 Параметры.id);
		Запись.Вставить("Сорт",		 стр.Сорт);
		Запись.Вставить("ДлинаОт",	 стр.ДлинаОт);
		Запись.Вставить("ДлинаДо",	 стр.ДлинаДо);
		СписокЯчеек = Новый СписокЗначений;
		Для Каждого м из стр.Ячейки Цикл
			Если ЗначениеЗаполнено(м.Значение) Тогда
				СписокЯчеек.Добавить(м.Значение.УникальныйИдентификатор());
			КонецЕсли;
		КонецЦикла;
		Запись.Вставить("Ячейки",	 Новый ХранилищеЗначения(СписокЯчеек, Новый СжатиеДанных(6)));
		ДанныеДляЗаписи.Добавить(Запись);
	КонецЦикла;
	ПартииСортировки.ЗаписатьИзмененияРазмещенияПартии(ДанныеДляЗаписи);	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыИзмененияСпискаЯчеек(Результат, ДопПар) ЭКспорт
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	ЗаполнитьЗначенияСвойств(ДопПар, Результат);
	ЗаполнитьДлинаСтрКлиент(ДопПар);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСтрокиРазмещения()
	ТекДанные = Элементы.СортаВыпуска.ТекущиеДанные;
	ДействияПриЗакрытииФормы = Новый ОписаниеОповещения("ПриЗакрытииФормыИзмененияСпискаЯчеек", ЭтотОбъект, ТекДанные);
	ПарОткрытия = Новый Структура("Сорт,СписокЯчеек,ДлинаОт,ДлинаДо", ТекДанные.Сорт, ТекДанные.Ячейки, ТекДанные.ДлинаОт, ТекДанные.ДлинаДо);
	ПарОткрытия.Вставить("ОписаниеПартии", СтрШаблон("Партия %1 от %2. Сечение: %3, вид продукции: %4", Номер, Формат(Дата, "ДФ=dd.MM.yy"), Сечение, ВидПродукции));
	ОткрытьФорму("ОбщаяФорма.ФормаРедактированияСпискаЯчеекСортаПартии", ПарОткрытия, ЭтаФорма, ,,,ДействияПриЗакрытииФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)
КонецПроцедуры

&НаКлиенте
Процедура СортаВыпускаПередНачаломИзменения(Элемент, Отказ)
	ОткрытьФормуРедактированияСтрокиРазмещения();
	Отказ = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура СортаВыпускаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ОткрытьФормуРедактированияСтрокиРазмещения()
КонецПроцедуры

&НаКлиенте
Процедура АвтоЗаполнение(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры
