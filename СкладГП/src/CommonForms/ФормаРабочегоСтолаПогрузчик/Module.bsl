
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПоказыватьВыходЦСП = Константы.ПоказыватьВыходЦСП.Получить();
	НастроитьТемуИнтерфейса();
	НастроитьФорму()
КонецПроцедуры

&НаСервере
Процедура НастроитьТемуИнтерфейса()
	СтилиФорм.НастроитьТемуИнтерфейса(ЭтотОбъект)	
КонецПроцедуры

&НаКлиенте
Процедура ПередСтартом(Отказ)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПриИзмененииПараметровЭкрана();
	Подключаемый_ОбновитьЗаголовок();
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьПакетыСтолаВыдачи", 0.5, ИСТИНА);
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЗаголовок", 120, ИСТИНА)

КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбновитьЗаголовок()
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьЗаголовок");
	
	ДанныеРасстановки = ПолучитьДанныеРасстановкиСклада();
	Заголовок = "Расставлено "+ДанныеРасстановки.Расставлено+" из "+ ДанныеРасстановки.Всего;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЗаголовок", 60, ИСТИНА)

КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеРасстановкиСклада()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСкладов", ОбщегоНазначенияВызовСервераПовтИсп.МассивСкладов());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ИсторияКачестваРасстановкиСкладаСрезПоследних.Всего) КАК Всего,
	|	СУММА(ИсторияКачестваРасстановкиСкладаСрезПоследних.Расставлено) КАК Расставлено
	|ИЗ
	|	РегистрСведений.ИсторияКачестваРасстановкиСклада.СрезПоследних КАК ИсторияКачестваРасстановкиСкладаСрезПоследних
	|ГДЕ
	|	ИсторияКачестваРасстановкиСкладаСрезПоследних.Склад В(&МассивСкладов)";
	

	т = Запрос.Выполнить().Выгрузить();
	Ответ = Новый Структура("Всего, Расставлено", 0 ,0);
	Для Каждого стр из т Цикл 
		Ответ.Всего = стр.Всего;
		Ответ.Расставлено = стр.Расставлено;
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	//Вставить содержимое обработчика
КонецПроцедуры
                                   
&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Функция ОбработчикиОжидания()
	Соотв = Новый Соответствие;
	Соотв.Вставить("Подключаемый_ОбновитьПакетыСтолаВыдачи", 120); 
	Возврат Соотв
КонецФункции

&НаКлиенте
Процедура ОтключениеОбработчиковОжидания()
	Для Каждого м из ОбработчикиОжидания() Цикл
		ОтключитьОбработчикОжидания(м.Ключ);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеОбработчиковОжидания()
	ОтключениеОбработчиковОжидания();
	Для Каждого м из ОбработчикиОжидания() Цикл
		ПодключитьОбработчикОжидания(м.Ключ, м.Значение);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ЕстьСвязь_ = ЕстьСвязь;
	Если ИмяСобытия = "ВыполненаАвторизацияКлиента" Тогда
		ЕстьСвязь_ = ЕстьСвязь;
		Если НЕ ЕстьСвязь Тогда Возврат КонецЕсли;
		
		Подключаемый_ОбновитьПакетыСтолаВыдачи();
		
		ПодключениеОбработчиковОжидания();
		
	ИначеЕсли ИмяСобытия = "ИзмененВидИнтерфейса" Тогда
		НастроитьТемуИнтерфейса();	
		
	ИначеЕсли ИмяСобытия = "ИзменениеСтатусаСвязи" Тогда
		
		Если ЕстьСвязь Тогда
			ПодключениеОбработчиковОжидания();
		Иначе
			ОтключениеОбработчиковОжидания();
		КонецЕсли;

	ИначеЕсли ИмяСобытия = "ИзмененыПакетыНаВилах" Тогда
		ВывестиПакетыНаВилахНаФорму(ЕстьСвязь);
		Подключаемый_ОбновитьПакетыСтолаВыдачи();
		
	ИначеЕсли ИмяСобытия = "ИзменениеМестоположения" Тогда
		
	ИначеЕсли ИмяСобытия = "ИзменениеРазмещенияПакета" Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьПакетыСтолаВыдачи", 0.5, ИСТИНА);
		Подключаемый_ОбновитьЗаголовок();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	ОбщегоНазначенияКлиент.ЗаполнитьСвойстваФормыПриИзмененииПараметровЭкрана(ЭтаФорма);
	Если ГоризонтальноеПоложениеЭкрана Тогда
		ГоризонтальноПакетовНаФорме = 5;
		Элементы.ГруппаОсновная.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
		Элементы.БуферЦСПОбъем.Видимость = ЛОЖЬ;
	Иначе
		ГоризонтальноПакетовНаФорме = 3;
		Элементы.ГруппаОсновная.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.БуферЦСПОбъем.Видимость = ИСТИНА;
	КонецЕсли;
	//ВывестиСтолЦСПНаФорму();
	ВывестиПакетыНаВилахНаФорму(ЕстьСвязь);
КонецПроцедуры

&НаКлиенте
Процедура ПриПробужденииКлиентскогоПриложения()
	//Вставить содержимое обработчика
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбновитьДанныеФормы(Команда)
	Подключаемый_ОбновитьПакетыСтолаВыдачи()
КонецПроцедуры

#Область ПодключаемыеОбработчики

&НаКлиенте
Процедура Подключаемый_ОбновитьПакетыСтолаВыдачи() Экспорт
	Если ЕстьСвязь и АвторизацияВыполнена Тогда
		СлужебныйОбновлениеВызовСервера.НачатьОбменИзменениями();
		ОбновитьПакетыСтолаВыдачиНаСервере();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура НастроитьФорму()
	Элементы.СтолВыдачиЦСП.Видимость = ПоказыватьВыходЦСП;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПакетаПоместитьНаВилы(Результат, ДопПар) Экспорт
	Если Не Результат = Неопределено Тогда
		СтрокиЕсть = ПакетыНаВилах.НайтиСтроки(Новый Структура("Пакет", Результат));
		Если СтрокиЕсть.Количество()>0 Тогда
			ПоказатьПредупреждение(,"Данный пакет уже на вилах!");
			Возврат
		КонецЕсли;
		СвойстваПакета = Пакеты_ВызовСервера.СвойстваПакетаМоб(Результат);
		Если СвойстваПакета = НЕОПРЕДЕЛЕНО Тогда
			а=1;
			Сообщить("Нет свойств пакета");
		Иначе
			Нов = ПакетыНаВилах.Добавить();
			Нов.Пакет = Результат;
			
			ЗаполнитьЗначенияСвойств(Нов, СвойстваПакета, "Сечение,Сорт,ДлинаТ");
			Нов.НомерПакета = СвойстваПакета.Номер;
			Если ЗначениеЗаполнено(СвойстваПакета.Ячейка) Тогда
				Нов.Назначение = СвойстваПакета.Ячейка;
			Иначе
				Нов.Назначение = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
			КонецЕсли;
			ЯчейкиСкладаВызовСервера.ДобавитьПакетНаВилы(Нов.Пакет);
		КонецЕсли;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьПакетыСтолаВыдачи", 0.5, ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПакетНаВилы(Команда)
	ПараметрыФормы = Новый Структура("РежимВыбора", ИСТИНА);
	ПослеВыбораПакетаПоместитьНаВилы = Новый ОписаниеОповещения("ПослеВыбораПакетаПоместитьНаВилы", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаПакета", ПараметрыФормы, ЭтотОбъект,,,, ПослеВыбораПакетаПоместитьНаВилы);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПакетаСнятьСВил(Результат, ДопПар) Экспорт
	Если Не Результат = Неопределено Тогда
		СтрокиЕсть = ПакетыНаВилах.НайтиСтроки(Новый Структура("Пакет", Результат));
		Для Каждого стр из СтрокиЕсть Цикл
			ЯчейкиСкладаВызовСервера.УбратьПакетСВил(стр.Пакет);
			ПакетыНаВилах.Удалить(стр);
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПакетыНаВилахВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	
	ТекДанные = Элементы.ПакетыНаВилах_Стиль1.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Пар = Новый Структура("Пакет,Ячейка", ТекДанные.Пакет, ТекДанные.Назначение);
	ПослеВыбораПакетаСнятьСВил = Новый ОписаниеОповещения("ПослеВыбораПакетаСнятьСВил", ЭтотОбъект);
	ОткрытьФорму("Обработка.ИнвентаризацияЯчейки.Форма.ФормаИнвентаризацииШтабеля", Пар, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура Дневной(Команда)
	УстановитьПараметрСеансаНочь(ЛОЖЬ);
	Оповестить("ИзмененВидИнтерфейса");
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрСеансаНочь(ВидИнтерфейсаНочь)
	ПараметрыСеанса.ВидИнтерфейсаНочь = ВидИнтерфейсаНочь;
КонецПроцедуры

&НаКлиенте
Процедура Ночной(Команда)
	УстановитьПараметрСеансаНочь(ИСТИНА);
	Оповестить("ИзмененВидИнтерфейса");
КонецПроцедуры

&НаСервере
Процедура ОбновитьПакетыСтолаВыдачиНаСервере() Экспорт
	МассивСкладовПУ = ОбщегоНазначенияВызовСервераПовтИсп.МассивСкладовПУ();
	
	Если ОбщегоНазначенияВызовСервераПовтИсп.БазаПУ().ЭтоERP Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 20
		|	pu_СведенияОПакетеСрезПоследних.ПакетПиломатериалов КАК ПакетПиломатериалов,
		|	pu_СведенияОПакетеСрезПоследних.Серия КАК Серия,
		|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) КАК ВНаличииОстаток,
		|	pu_СведенияОПакетеСрезПоследних.ДатаВремяВыпуска КАК ДатаВремяВыпуска,
		|	ТоварыНаСкладахОстатки.Склад КАК Склад,
		|	pu_СведенияОПакетеСрезПоследних.НомерПакета КАК НомерПакета,
		|	pu_СведенияОПакетеСрезПоследних.Сечение КАК Сечение,
		|	pu_СведенияОПакетеСрезПоследних.СортПиломатериалов КАК СортПиломатериалов,
		|	pu_СведенияОПакетеСрезПоследних.Длина.Наименование КАК Длина
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(, УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Склад) В (&МассивСкладовПУ)) КАК ТоварыНаСкладахОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.pu_СведенияОПакете.СрезПоследних КАК pu_СведенияОПакетеСрезПоследних
		|		ПО ТоварыНаСкладахОстатки.Серия = pu_СведенияОПакетеСрезПоследних.Серия
		|
		|СГРУППИРОВАТЬ ПО
		|	pu_СведенияОПакетеСрезПоследних.ПакетПиломатериалов,
		|	pu_СведенияОПакетеСрезПоследних.Серия,
		|	pu_СведенияОПакетеСрезПоследних.ДатаВремяВыпуска,
		|	ТоварыНаСкладахОстатки.Склад,
		|	pu_СведенияОПакетеСрезПоследних.НомерПакета,
		|	pu_СведенияОПакетеСрезПоследних.Сечение,
		|	pu_СведенияОПакетеСрезПоследних.СортПиломатериалов,
		|	pu_СведенияОПакетеСрезПоследних.Длина.Наименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаВремяВыпуска УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(вт.ПакетПиломатериалов) КАК Пакет,
		|	вт.НомерПакета КАК НомерПакета,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(вт.СортПиломатериалов) КАК СортПиломатериалов,
		|	вт.СортПиломатериалов.Наименование КАК СортПиломатериаловНаименование,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(вт.Сечение) КАК Сечение,
		|	вт.Сечение.Наименование КАК СечениеНаименование,
		|	вт.Длина КАК ДлинаНаименование,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних.Ячейка) КАК Ячейка,
		|	pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних.Ячейка.Наименование КАК ЯчейкаНаименование,
		|	pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних.Ряд КАК Ряд,
		|	pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних.Уровень КАК Уровень,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(вт.Склад) КАК Склад,
		|	вт.ДатаВремяВыпуска КАК ДатаВремяВыпуска
		|ПОМЕСТИТЬ вт2
		|ИЗ
		|	вт КАК вт
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.pu_ДвижениеПакетовПоЯчейкамСклада.СрезПоследних КАК pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних
		|		ПО вт.Склад = pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних.Склад
		|			И вт.Серия = pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних.СерияПакета
		|ГДЕ
		|	ЕСТЬNULL(pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних.Ряд, 0) = 0
		|	И ЕСТЬNULL(pu_ДвижениеПакетовПоЯчейкамСкладаСрезПоследних.Уровень, 0) = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт2.Пакет КАК Пакет,
		|	вт2.НомерПакета КАК НомерПакета,
		|	вт2.СортПиломатериалов КАК СортПиломатериалов,
		|	вт2.СортПиломатериаловНаименование КАК СортПиломатериаловНаименование,
		|	вт2.Сечение КАК Сечение,
		|	вт2.СечениеНаименование КАК СечениеНаименование,
		|	вт2.ДлинаНаименование КАК ДлинаНаименование,
		|	вт2.Ячейка КАК Ячейка,
		|	вт2.ЯчейкаНаименование КАК ЯчейкаНаименование,
		|	вт2.Ряд КАК Ряд,
		|	вт2.Уровень КАК Уровень,
		|	вт2.Склад КАК Склад,
		|	вт2.ДатаВремяВыпуска КАК ДатаВремяВыпуска
		|ИЗ
		|	вт2 КАК вт2
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаВремяВыпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ вт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ вт2"
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 10
		|	VLP_СведенияОПакете.НомерПакета КАК НомерПакета,
		|	VLP_СведенияОПакете.ДатаВремяВыпуска КАК ДатаВремяВыпуска,
		|	VLP_СведенияОПакете.СортПиломатериалов КАК СортПиломатериалов,
		|	VLP_СведенияОПакете.Сечение КАК Сечение,
		|	VLP_СведенияОПакете.Длина КАК Длина,
		|	VLP_ВесПакетовПиломатериаловСрезПоследних.Вес КАК Вес
		|ПОМЕСТИТЬ Вт10Посл
		|ИЗ
		|	РегистрСведений.VLP_СведенияОПакете КАК VLP_СведенияОПакете
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.VLP_ДвижениеПиломатериаловНаСкладахВрем.Остатки(, Склад.ИмяПредопределенныхДанных В (&МассивСкладовПУ)) КАК VLP_ДвижениеПиломатериаловНаСкладахВремОстатки
		|		ПО (VLP_СведенияОПакете.НомерПакета = VLP_ДвижениеПиломатериаловНаСкладахВремОстатки.НомерПакета)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.VLP_ВесПакетовПиломатериалов.СрезПоследних КАК VLP_ВесПакетовПиломатериаловСрезПоследних
		|		ПО (VLP_СведенияОПакете.НомерПакета = VLP_ВесПакетовПиломатериаловСрезПоследних.НомерПакета)
		|ГДЕ
		|	VLP_ВесПакетовПиломатериаловСрезПоследних.Вес > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаВремяВыпуска УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Вт10Посл.НомерПакета КАК НомерПакета,
		|	Вт10Посл.ДатаВремяВыпуска КАК ДатаВремяВыпуска,
		|	Вт10Посл.СортПиломатериалов КАК СортПиломатериалов,
		|	Вт10Посл.Сечение КАК Сечение,
		|	Вт10Посл.Длина КАК Длина,
		|	vlp_РаспределениеПакетовПоЯчейкамСкладаСрезПоследних.Ячейка КАК Ячейка,
		|	ЕСТЬNULL(vlp_РаспределениеПакетовПоЯчейкамСкладаСрезПоследних.Ряд, 0) КАК Ряд,
		|	ЕСТЬNULL(vlp_РаспределениеПакетовПоЯчейкамСкладаСрезПоследних.Уровень, 0) КАК Уровень
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	Вт10Посл КАК Вт10Посл
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.vlp_РаспределениеПакетовПоЯчейкамСклада.СрезПоследних КАК vlp_РаспределениеПакетовПоЯчейкамСкладаСрезПоследних
		|		ПО Вт10Посл.НомерПакета = vlp_РаспределениеПакетовПоЯчейкамСкладаСрезПоследних.НомерПакета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(вт.НомерПакета) КАК Пакет,
		|	вт.НомерПакета.Код КАК НомерПакета,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(вт.СортПиломатериалов) КАК СортПиломатериалов,
		|	вт.СортПиломатериалов.Наименование КАК СортПиломатериаловНаименование,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(вт.Сечение) КАК Сечение,
		|	вт.Сечение.Наименование КАК СечениеНаименование,
		|	вт.Длина.ПогоннаяДлина КАК ДлинаПогоннаяДлина,
		|	вт.Длина.Наименование КАК ДлинаНаименование,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(вт.Ячейка) КАК Ячейка,
		|	вт.Ячейка.Наименование КАК ЯчейкаНаименование,
		|	вт.Ряд КАК Ряд,
		|	вт.Уровень КАК Уровень,
		|	вт.ДатаВремяВыпуска КАК ДатаВремяВыпуска
		|ИЗ
		|	вт КАК вт
		|ГДЕ
		|	вт.Ряд = 0
		|	И вт.Уровень = 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаВремяВыпуска";
	КонецЕсли;
	СтруктураЗапроса = УКО.НоваяСтруктураПроизвольногоЗапроса();
	СтруктураЗапроса.ТекстЗапроса = ТекстЗапроса;
	СтруктураЗапроса.ПараметрыЗапроса.Вставить("МассивСкладовПУ", МассивСкладовПУ);
	
	ДанныеПУ = УКО.ПолучитьДанныеПроизвольногоЗапроса(СтруктураЗапроса);
	МассивПакетовДляОбновления = Неопределено;
	Если НЕ ДанныеПУ = Неопределено Тогда 
		МассивПакетовДляОбновления = Новый Массив;
		Для Каждого стр из ДанныеПУ Цикл
			Если Пакеты.СвойстваПакетаМоб(стр.Пакет) = Неопределено Тогда
				МассивПакетовДляОбновления.Добавить(стр.Пакет);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	Если МассивПакетовДляОбновления <> НЕОПРЕДЕЛЕНО и МассивПакетовДляОбновления.Количество()>0 Тогда
		СлужебныйОбновление.ОбновитьОстаткиПакетовНаСкладе(, МассивПакетовДляОбновления);	
	КонецЕсли;
	
	СтолВыдачиЦСП.Очистить();
	
	Если НЕ ДанныеПУ = Неопределено Тогда
		СвойстваПакетов = Пакеты.СвойстваМассиваПакетовМоб(ДанныеПУ.ВыгрузитьКолонку("Пакет"), Тип("УникальныйИдентификатор"));
		Для Каждого стр из ДанныеПУ Цикл
			
			Если Не ПакетыНаВилах.НайтиСтроки(Новый Структура("Пакет",стр.Пакет)).Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Нов = СтолВыдачиЦСП.Добавить();
			Нов.Пакет = стр.Пакет;
			Нов.НомерПакета = стр.НомерПакета;
			Нов.Сечение = стр.СечениеНаименование;
			Нов.ДлинаТ = стр.ДлинаНаименование;
			Нов.Сорт = стр.СортПиломатериалов;
			Нов.Назначение = стр.Ячейка;
			
			СвойстваПакета = СвойстваПакетов.Получить(Нов.Пакет);//Пакеты.СвойстваПакетаМоб(Нов.Пакет);
			Если Не СвойстваПакета = НЕОПРЕДЕЛЕНО Тогда
				Нов.ОписаниеПакета = Пакеты.ОписаниеПакетаПоШаблону(Нов.Пакет, СвойстваПакета);
				Нов.Состояние = СвойстваПакета.Состояние;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;  
	//БуферЦСП
	ОбновитьБуферЦСП();
	//-------->
	
	ВывестиСтолЦСПНаФорму();
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьБуферЦСП()
	//БуферЦСП
	Если Не ЗначениеЗаполнено(ЯчейкаБуфераЦСП) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ячейки.Ссылка КАК Ссылка
		|ИЗ
		|	Константа.Склад КАК КонстСклад
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Ячейки КАК Ячейки
		|		ПО КонстСклад.Значение = Ячейки.Владелец
		|ГДЕ
		|	Ячейки.Наименование = ""БуферЦСП""";
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ЯчейкаБуфераЦСП = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;                                                       
	Если ЗначениеЗаполнено(ЯчейкаБуфераЦСП) Тогда
		Элементы.БуферЦСП.Видимость = ИСТИНА;
		БуферЦСП.Параметры.УстановитьЗначениеПараметра("ЯчейкаБуфераЦСП",ЯчейкаБуфераЦСП); 
		БуферЦСП.Параметры.УстановитьЗначениеПараметра("МассивПакетовНаВилах",ЯчейкаБуфераЦСП);
		Элементы.БуферЦСП.Обновить();
	Иначе
		Элементы.БуферЦСП.Видимость = ЛОЖЬ	
	КонецЕсли;
	//-------->
КонецПроцедуры

&НаСервере
Процедура ВывестиСтолЦСПНаФорму()
	Если НЕ ПоказыватьВыходЦСП Тогда Возврат КонецЕсли;
	
	Пока Элементы.СтолВыдачиЦСП.ПодчиненныеЭлементы.Количество()>0 Цикл
		Элементы.Удалить(Элементы.СтолВыдачиЦСП.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	
	СчетчикПакетов = 0;
	СчетчикСтраниц = 0;
	ТекущаяСтраница = НЕОПРЕДЕЛЕНО;
	Для Каждого стр из СтолВыдачиЦСП Цикл
		Если ТекущаяСтраница = НЕОПРЕДЕЛЕНО или СчетчикПакетов >= ГоризонтальноПакетовНаФорме Тогда
			СчетчикСтраниц = СчетчикСтраниц + 1;
			СчетчикПакетов = 0;
			ТекущаяСтраница =  Элементы.Добавить("СтолВыдачи_Ряд"+СчетчикСтраниц, Тип("ГруппаФормы"), Элементы.СтолВыдачиЦСП); 
			ТекущаяСтраница.Вид = ВидГруппыФормы.Страница;
			ТекущаяСтраница.Заголовок = ""+СчетчикСтраниц;
			ТекущаяСтраница.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ТекущаяСтраница.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
		КонецЕсли;
		
		Если стр.Состояние = 1 Тогда
			СтруктураОформления = ЯчейкиСклада.СтильДекорацииОбычныйПакет();		
		ИначеЕсли стр.Состояние = 2 Тогда
			СтруктураОформления = ЯчейкиСклада.СтильДекорацииПакетРезерв();	
		ИначеЕсли стр.Состояние = 3 Тогда
			СтруктураОформления = ЯчейкиСклада.СтильДекорацииПакетЗапретОтгрузки();	
		КонецЕсли;
		
		КартинкаПакета = ЯчейкиСклада.ЭлементФормыПакета(ЭтотОбъект, Элементы, ТекущаяСтраница, стр.НомерПакета, , "ПакетыВил", стр, стр.ОписаниеПакета, СтруктураОформления);
		КартинкаПакета.Ширина = Цел(ШиринаЭкрана/96/ГоризонтальноПакетовНаФорме); 
		КартинкаПакета.Высота = 2;
		СчетчикПакетов = СчетчикПакетов + 1;	
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВывестиПакетыНаВилахНаФорму(ЕстьСвязь)
	МассивПакетов = ЯчейкиСклада.ПолучитьПакетыНаВилах();
	СвойстваПакетов = Пакеты.СвойстваМассиваПакетовМоб(МассивПакетов, Тип("УникальныйИдентификатор")); 
		
	ПакетыНаВилах.Очистить();
	Для Каждого Пакет из МассивПакетов Цикл
		Если СвойстваПакетов = Неопределено Тогда Продолжить КонецЕсли;

		СвойстваПакета = СвойстваПакетов.Получить(Пакет);
        Если СвойстваПакета = Неопределено Тогда Продолжить КонецЕсли;

		Нов = ПакетыНаВилах.Добавить();
		Нов.Пакет = Пакет;
		Нов.НомерПакета = СвойстваПакета.Номер;
		Нов.Сечение = СвойстваПакета.Сечение;
		Нов.ДлинаТ = СвойстваПакета.ДлинаТ;
		Нов.Назначение = СвойстваПакета.Ячейка;
		Если ЗначениеЗаполнено(СвойстваПакета.Подсборка) Тогда
			Нов.Назначение = СвойстваПакета.Подсборка;	
		КонецЕсли;
		Нов.Сорт = СвойстваПакета.Сорт;
		Нов.ОписаниеПакета = ЯчейкиСклада.ОписаниеПакета(Пакет, СвойстваПакета);
		Нов.Состояние = СвойстваПакета.Состояние;
	КонецЦикла;
	Если ЕстьСвязь Тогда
		ОбновитьПакетыСтолаВыдачиНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьСтилиДекорацииСервер(Знач элФормы, СтруктураСтиля)
	Если ТипЗнч(элФормы) = Тип("Строка") Тогда 
		элФормы = Элементы.Найти(элФормы);
	КонецЕсли;
	Для Каждого ОписаниеСтиля из СтруктураСтиля Цикл
		элФормы[ОписаниеСтиля.Ключ] = ОписаниеСтиля.Значение;		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьДействияПакета(ЭлементПакета, ПакетВЯчейке, СтрокаТаблицы) Экспорт
	ЭлементПакета.УстановитьДействие("Нажатие",	"ПакетНажатие");

	УстановитьКонтекстноеМенюПакета(ЭлементПакета, ПакетВЯчейке, СтрокаТаблицы) 	
КонецПроцедуры

&НаСервере
Функция суффиксыДобавленныхКоманд() Экспорт
	суффиксы = Новый Структура();
	суффиксы.Вставить("_ОтправитьВБуфер",	 "В буфер ЦСП");
	Возврат суффиксы;
КонецФункции

&НаСервере
Процедура УстановитьКонтекстноеМенюПакета(ЭлементПакета, ПакетВЯчейке, СтрокаТаблицы)
	
	ЯчейкиСклада.ДобавитьКомандуКонтекстногоМеню(ЭтаФорма, Элементы, ЭлементПакета, "_ОтправитьВБуфер", "ОтправитьВБуферЦСП");

КонецПроцедуры 

&НаКлиенте
Процедура ОтправитьВБуферЦСП(Команда)
	СтрокиСтолаВыдачиДляОтравкиВБуфер = СтолВыдачиЦСП.НайтиСтроки(Новый Структура("ИмяЭлементаФормы", СтрЗаменить(Команда.Имя, "_ОтправитьВБуфер", "")));	
	Если СтрокиСтолаВыдачиДляОтравкиВБуфер.Количество() > 0 Тогда
		ОтправитьСтрокиСтолаВыдачиВБуферЦСП(СтрокиСтолаВыдачиДляОтравкиВБуфер)	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОтправитьСтрокиСтолаВыдачиВБуферЦСП(СтрокиОтправить)
	Для Каждого стр из СтрокиОтправить Цикл
		Ответ = Ждать ЯчейкиСкладаКлиент.РазместитьПакетВЯчейкеКлиент(стр.Пакет, ЯчейкаБуфераЦСП, 1, 0, ИСТИНА)
	КонецЦикла; 
	СлужебныйОбновлениеВызовСервера.ОбновлениеОстатковСклада(ЯчейкаБуфераЦСП);
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьПакетыСтолаВыдачи", 0.5, ИСТИНА);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗадатьВопросВыбратьПакетНаВилы(СтрокаОписания)           
	ПослеВыбораПакетаПоместитьНаВилы(СтрокаОписания.Пакет, НЕОПРЕДЕЛЕНО);
КонецПроцедуры

&НаКлиенте
Процедура ПакетНажатие(Команда)
	СтрокаОписания = СтолВыдачиЦСП.НайтиСтроки(Новый Структура("ИмяЭлементаФормы", Команда.Имя))[0];
	ЗадатьВопросВыбратьПакетНаВилы(СтрокаОписания)	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризацияШтабеля(Команда)
	ОткрытьФорму("Обработка.ИнвентаризацияЯчейки.Форма.ФормаИнвентаризацииШтабеля", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура УбратьСВил(Команда)
	ТекСтрока = Элементы.ПакетыНаВилах_Стиль1.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда Возврат КонецЕсли;
	ЯчейкиСкладаВызовСервера.УбратьПакетСВил(ТекСтрока.Пакет);
	ВывестиПакетыНаВилахНаФорму(ЕстьСвязь);
КонецПроцедуры

&НаКлиенте
Процедура НайтиНовыйШтабельДляПакета(Команда)
	ТекСтрока = Элементы.ПакетыНаВилах_Стиль1.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда Возврат КонецЕсли;
	Пакет = ТекСтрока.Пакет;
	НовоеНазначение = ЯчейкиСкладаВызовСервера.НайтиНовыйШтабельДляПакета(Пакет, ТекСтрока.Назначение);
	Если НовоеНазначение = Неопределено Тогда
		ПредупреждениеАсинх("Не смог найти новый штабель для пакета "+Пакет)
	Иначе
		ТекСтрока.Назначение = НовоеНазначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоВШтабелеЗакончилось(Команда)
	ТекСтрока = Элементы.ПакетыНаВилах_Стиль1.ТекущиеДанные; 
	Если ТекСтрока = Неопределено Тогда Возврат КонецЕсли;
	ДействиеМестоВШтабелеЗакончилось(ТекСтрока);
КонецПроцедуры

&НаСервере
Функция НайтиНовыйШтабельВывозки(Пакет, ТекНазначение, ТекущаяПартияСортировки, ДанныеПУ = Неопределено)
	СвойстваПакета = Пакеты.СвойстваПакетаМоб(Пакет); 
	Если СвойстваПакета = Неопределено
		Тогда Возврат Неопределено
	КонецЕсли;
	
	ТекущиеПартии = ПартииСортировки.ПолучитьТекущиеПартии(); 
	Если ТекущиеПартии = Неопределено Тогда 
		СтрокиТекущей = НЕОПРЕДЕЛЕНО;
	Иначе
		УИД_Партии = Новый УникальныйИдентификатор(СвойстваПакета.Партия);
		СтрокиТекущей = ТекущиеПартии.НайтиСтроки(Новый Структура("id", УИД_Партии));
	КонецЕсли;
	Если СтрокиТекущей = Неопределено ИЛИ СтрокиТекущей.Количество() = 0 Тогда
		НовоеНазначение = ЯчейкиСкладаВызовСервера.НайтиНовыйШтабельДляПакета(Пакет, ТекНазначение);
		Возврат НовоеНазначение;
	Иначе
		ДанныеПУ = ПартииСортировки.ПолучитьРазмещениеПартииИзПУ(СвойстваПакета.Партия);
		Если ДанныеПУ = Неопределено Тогда Возврат Неопределено КонецЕсли;
		ДанныеПУ.Колонки.Добавить("Выбрана"); 
		
		СтрокиСорта = ДанныеПУ.НайтиСтроки(Новый Структура("Сорт", СвойстваПакета.Сорт.УникальныйИдентификатор()));
		Если СтрокиСорта.Количество() = 0 Тогда  Возврат Неопределено КонецЕсли;
		СтрокаРазмещения = Неопределено;
		Если СтрокиСорта.Количество() = 1 Тогда
			СтрокаРазмещения = СтрокиСорта[0]
		Иначе
			Для Каждого стр из СтрокиСорта Цикл
				Если СвойстваПакета.ДлинаОт >= стр.ДлинаОт
					И (СвойстваПакета.ДлинаДо <= стр.ДлинаДо или стр.ДлинаДо = 0) Тогда
					СтрокаРазмещения = стр;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если СтрокаРазмещения = Неопределено Тогда Возврат Неопределено КонецЕсли;
		ТекущаяПартияСортировки = УИД_Партии;
		СтрокаРазмещения.Выбрана = ИСТИНА;
		
		СписокЯчеек = СтрокаРазмещения.Ячейки.Получить();
		Если СписокЯчеек = Неопределено Тогда Возврат Неопределено КонецЕсли;
		ДанныеПУ.Колонки["Ячейки"].Имя = "Штабеля";
		ДанныеПУ = ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеПУ);

		Для Каждого ЭлементСпискаЯчеек из СписокЯчеек Цикл
			Если НЕ ЗначениеЗаполнено(ЭлементСпискаЯчеек.Значение) Тогда Продолжить КонецЕсли;
			ТипЗначенияСписка = ТипЗнч(ЭлементСпискаЯчеек.Значение);
			Если ТипЗначенияСписка = Тип("Строка") Тогда
				Штабель = Справочники.Ячейки.ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлементСпискаЯчеек.Значение));
			ИначеЕсли ТипЗначенияСписка = Тип("УникальныйИдентификатор") Тогда
				Штабель = Справочники.Ячейки.ПолучитьСсылку(ЭлементСпискаЯчеек.Значение);
			КонецЕсли;
			Если Штабель <> ТекНазначение Тогда;
				Возврат Штабель
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции 

&НаСервере
Функция ПолучитьНовыйСписокШтабелей(СтарыйСписок, НовыйШтабель, ХЗ = ИСТИНА) 
	УИДШтабеля = НовыйШтабель.УникальныйИдентификатор();
	Если ХЗ Тогда
		СписокШтабелей = СтарыйСписок.Получить();
	Иначе
		СписокШтабелей = СтарыйСписок
	КонецЕсли; 
	ЭлСписка = СписокШтабелей.НайтиПоЗначению(УИДШтабеля);
	Если ЭлСписка = Неопределено Тогда
		СписокШтабелей.Вставить(0, УИДШтабеля);		
	Иначе
		Пока СписокШтабелей[0] <> ЭлСписка Цикл
			СписокШтабелей.Сдвинуть(ЭлСписка, -1);	
		КонецЦикла;
	КонецЕсли;
	
	Если ХЗ Тогда
		Возврат Новый ХранилищеЗначения(СписокШтабелей);
	Иначе
		Возврат СписокШтабелей
	КонецЕсли;
КонецФункции 

&НаСервере
Процедура ОтправитьВПУ_ИзмененияНастроекРазмещенияПартииНаСервере(сПартии)
    Ответ = http_ВызовСервера.post("/hs/ma_bgp/parties_set", сПартии);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОтправитьВПУ_ИзмененияНастроекРазмещенияПартии(Партия, ДанныеПартии)
	сПартии = Новый Соответствие;
	сПартии.Вставить(Партия, ДанныеПартии);
    ОтправитьВПУ_ИзмененияНастроекРазмещенияПартииНаСервере(сПартии);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ДействиеМестоВШтабелеЗакончилось(ТекСтрока) 
	Перем ТекущаяПартияСортировки, ДанныеПУ, СтрокаРазмещения;
	
	Если ТекСтрока = Неопределено Тогда Возврат КонецЕсли;
	
	НовыйШтабель = НайтиНовыйШтабельВывозки(ТекСтрока.Пакет, ТекСтрока.Назначение, ТекущаяПартияСортировки, ДанныеПУ);
	Если ЗначениеЗаполнено(НовыйШтабель) Тогда
		ТекСтрока.Назначение = НовыйШтабель;
		Если Не ТекущаяПартияСортировки = Неопределено Тогда
			ОтветНаВопрос = Ждать ВопросАсинх(СтрШаблон("Назначить новый штабель вывозки %1 остальным пакетам партии", НовыйШтабель), РежимДиалогаВопрос.ДаНет);
			Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
				Для Каждого стр из ДанныеПУ Цикл
					Если стр.Выбрана = ИСТИНА Тогда
						стр.Штабеля = ПолучитьНовыйСписокШтабелей(стр.Штабеля, НовыйШтабель, ИСТИНА);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ОтправитьВПУ_ИзмененияНастроекРазмещенияПартии(ТекущаяПартияСортировки, ДанныеПУ);

			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоискПакета(Команда)
	
	ПараметрыФормы = Новый Структура("РежимВыбора", ЛОЖЬ);
	//ПослеВыбораПакетаПоместитьНаВилы = Новый ОписаниеОповещения("ПослеВыбораПакетаПоместитьНаВилы", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаПакета", ПараметрыФормы, ЭтотОбъект,,,, );

КонецПроцедуры

&НаКлиенте
Процедура ПакетыНаВилах_Стиль1ОбработкаЗапросаОбновления()
	Подключаемый_ОбновитьПакетыСтолаВыдачи()
КонецПроцедуры

&НаКлиенте
Процедура БуферЦСПОбработкаЗапросаОбновления()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ВзятьНаВилыИзБуфера(Команда)
	ТекДанные = Элементы.БуферЦСП.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		ПослеВыбораПакетаПоместитьНаВилы(ТекДанные.НомерПакета, НЕОПРЕДЕЛЕНО)
	КонецЕсли;
	Элементы.БуферЦСП.Обновить();
КонецПроцедуры
	

